#!/bin/python3
# We download the file http://unicode.org/Public/UNIDATA/CaseFolding.txt
# and then use that to generate a table of case folding mappings.

from urllib.request import urlopen
import argparse

def get_data(url):
    """
    Download the data from the given url.
    """
    return urlopen(url).read().decode("utf-8")

def download_case_folding_data():
    """
    Download the case folding data from the unicode.org website.
    """
    # Get the data from the unicode.org website.
    url = "http://unicode.org/Public/UNIDATA/CaseFolding.txt"
    data = get_data(url)
    return data

def parse_case_folding_data(data):
    """
    Parse the case folding data.
    """
    # Parse the data.
    mappings = {}
    for line in data.splitlines():
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        parts = line.split(";")
        if len(parts) < 3:
            continue
        code = int(parts[0].strip(), 16)
        status = parts[1].strip()
        if status != "C":
            continue
        mapping = parts[2].strip()
        if mapping.startswith("<"):
            continue
        mappings[code] = int(mapping, 16)

    # sort mappings by key
    mappings = sorted(mappings.items(), key=lambda x: x[0])
    return mappings

def write_header(outPath):
    """
    Write the header file to a file.
    """
    with open(outPath.replace(".c", ".h"), "w") as f:
        f.write("""\
/*
 * This file is generated by gen_cases.py.
 * Do not edit this file directly.
 */
""")
        f.write("""\

#ifndef DS_CASE_FOLDING_H
#define DS_CASE_FOLDING_H
""")
        f.write("""\

#include <stddef.h>
#include <stdint.h>
""")
        f.write("""\

typedef struct {
    uint32_t code;
    uint32_t folded_code;
} case_folding_t;

""")

        f.write("""\
extern const size_t g_caseFoldingTableSize;
""")
        f.write("""\
extern const case_folding_t g_caseFoldingTable[];
""")
        f.write("""\

#endif
""")

def write_table(mappings, outPath):
    """
    Write the table of case folding mappings to a file.
    """
    
    with open(outPath, "w") as f:
        f.write("""\
/*
 * This file is generated by gen_cases.py.
 * Do not edit this file directly.
 */

""")
        headerName = outPath.replace(".c", ".h")
        f.write(f"#include <{headerName}>\n\n")
        f.write(f"const size_t         g_caseFoldingTableSize = {len(mappings)};\n", )
        f.write("const case_folding_t g_caseFoldingTable[] = {\n")
        f.write("    // lowercase, uppercase\n")
        for code, folded_code in mappings:
            f.write("    { ")
            f.write("0x{:08x}, 0x{:08x}".format(code, folded_code))
            f.write(" },\n")
        f.write("};\n")

def main(args):
    """
    Generate the table of case folding mappings.
    """
    data = download_case_folding_data()

    # Parse the data.
    mappings = parse_case_folding_data(data)

    # Write the table to a file.
    write_header(args.out)
    write_table(mappings, args.out)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Installation utilities for building and releasing Vali.')
    parser.add_argument('--out', default="case_folding.h", help='Where to write the output file.')
    args = parser.parse_args()
    main(args)
