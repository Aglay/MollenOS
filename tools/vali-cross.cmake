##################################################
# Setup platform environment
##################################################
set(MOLLENOS ON)
set(VALI ON)

set(CMAKE_EXECUTABLE_SUFFIX ".app")
set(CMAKE_STATIC_LIBRARY_PREFIX "static_")
set(CMAKE_STATIC_LIBRARY_SUFFIX ".lib")
set(CMAKE_SHARED_LIBRARY_PREFIX "")  # lib
set(CMAKE_SHARED_LIBRARY_SUFFIX ".dll") # .so
set(CMAKE_IMPORT_LIBRARY_PREFIX "")
set(CMAKE_IMPORT_LIBRARY_SUFFIX ".lib")
set(CMAKE_LINK_LIBRARY_SUFFIX ".lib")
set(CMAKE_DL_LIBS "")
set(CMAKE_EXTRA_LINK_EXTENSIONS ".targets")

set(CMAKE_FIND_LIBRARY_PREFIXES "")
set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")

set(CMAKE_LIBRARY_PATH_FLAG "-LIBPATH:")
set(CMAKE_LINK_LIBRARY_FLAG "")
set(CMAKE_LINK_DEF_FILE_FLAG "/def:")

if (VALI_BOOTSTRAP)
    set (INITIAL_C_LIBRARIES "")
    set (INITIAL_CXX_LIBRARIES "")
    
    set (DLL_ENTRY_POINT "")
    set (APP_ENTRY_POINT "")

    set (SYSTEM_INCLUDES "")
    set (LINK_LIBRARIES "")
    set (LINK_FLAGS_BASE "")
else ()
    set (INITIAL_C_LIBRARIES "c.lib m.lib crt.lib compiler-rt.lib")

    if (DEFINED ENV{LIBCXX_BOOTSTRAP})
        set (INITIAL_CXX_LIBRARIES ${INITIAL_C_LIBRARIES})
    else ()
        set (INITIAL_CXX_LIBRARIES "static_c++.lib static_c++abi.lib unwind.lib ${INITIAL_C_LIBRARIES}")
    endif ()

    set (DLL_ENTRY_POINT "/entry:__CrtLibraryEntry")
    set (APP_ENTRY_POINT "/entry:__CrtConsoleEntry")

    set (SYSTEM_INCLUDES "$ENV{VALI_INCLUDES}")
    set (LINK_LIBRARIES $ENV{VALI_LIBRARIES})
    set (LINK_FLAGS_BASE $ENV{VALI_LFLAGS})
endif ()

##################################################
# LANGUAGE (C)
##################################################
set(CMAKE_C_COMPILE_OPTIONS_PIC "")
set(CMAKE_C_COMPILE_OPTIONS_PIE "")
set(CMAKE_SHARED_LIBRARY_C_FLAGS "-D_DLL")

set(CMAKE_C_COMPILE_OBJECT "<CMAKE_C_COMPILER> -o <OBJECT> <FLAGS> <DEFINES> <INCLUDES> ${SYSTEM_INCLUDES} -c <SOURCE>")
set(CMAKE_C_CREATE_STATIC_LIBRARY "<CMAKE_LINKER> /lib <LINK_FLAGS> /out:<TARGET> <OBJECTS>")
set(CMAKE_C_CREATE_SHARED_LIBRARY "<CMAKE_LINKER> /dll ${LINK_FLAGS_BASE} ${DLL_ENTRY_POINT} <LINK_FLAGS> /out:<TARGET> /implib:<TARGET_IMPLIB> /version:<TARGET_VERSION_MAJOR>.<TARGET_VERSION_MINOR> <OBJECTS> <LINK_LIBRARIES>") 
set(CMAKE_C_CREATE_SHARED_MODULE ${CMAKE_C_CREATE_SHARED_LIBRARY})
set(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> ${LINK_FLAGS_BASE} ${APP_ENTRY_POINT} <LINK_FLAGS> /out:<TARGET> /version:<TARGET_VERSION_MAJOR>.<TARGET_VERSION_MINOR> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_C_STANDARD_LIBRARIES ${INITIAL_C_LIBRARIES})

##################################################
# LANGUAGE (C++)
##################################################
set(CMAKE_CXX_COMPILE_OPTIONS_PIC "")
set(CMAKE_CXX_COMPILE_OPTIONS_PIE "")
set(CMAKE_SHARED_LIBRARY_CXX_FLAGS "-D_DLL")

set(CMAKE_CXX_COMPILE_OBJECT "<CMAKE_CXX_COMPILER> -o <OBJECT> <FLAGS> <DEFINES> <INCLUDES> ${SYSTEM_INCLUDES} -c <SOURCE>")
set(CMAKE_CXX_CREATE_STATIC_LIBRARY "<CMAKE_LINKER> /lib <LINK_FLAGS> /out:<TARGET> <OBJECTS>")
set(CMAKE_CXX_CREATE_SHARED_LIBRARY "<CMAKE_LINKER> /dll ${LINK_FLAGS_BASE} ${DLL_ENTRY_POINT} <LINK_FLAGS> /out:<TARGET> /implib:<TARGET_IMPLIB> /version:<TARGET_VERSION_MAJOR>.<TARGET_VERSION_MINOR> <OBJECTS> <LINK_LIBRARIES>") 
set(CMAKE_CXX_CREATE_SHARED_MODULE ${CMAKE_CXX_CREATE_SHARED_LIBRARY})
set(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_LINKER> ${LINK_FLAGS_BASE} ${APP_ENTRY_POINT} <LINK_FLAGS> /out:<TARGET> /version:<TARGET_VERSION_MAJOR>.<TARGET_VERSION_MINOR> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_CXX_STANDARD_LIBRARIES ${INITIAL_CXX_LIBRARIES})
