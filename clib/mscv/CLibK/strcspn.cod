; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\string\strcspn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strcspn
; Function compile flags: /Ogtp
; File c:\users\phail\documents\github\mollenos\clib\src\string\strcspn.c
;	COMDAT _strcspn
_TEXT	SEGMENT
_s$ = 8							; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_strcspn PROC						; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 35   : 	const char *s = s1;

  00005	8b 75 08	 mov	 esi, DWORD PTR _s1$[ebp]

; 36   : 	const char *c;
; 37   : 
; 38   : 	while (*s1)

  00008	8a 1e		 mov	 bl, BYTE PTR [esi]
  0000a	89 75 08	 mov	 DWORD PTR _s$[ebp], esi
  0000d	84 db		 test	 bl, bl
  0000f	74 2b		 je	 SHORT $LN18@strcspn
  00011	57		 push	 edi
  00012	8b 7d 0c	 mov	 edi, DWORD PTR _s2$[ebp]
  00015	8a 07		 mov	 al, BYTE PTR [edi]
$LL7@strcspn:

; 39   : 	{
; 40   : 		for (c = s2; *c; c++)

  00017	8b d7		 mov	 edx, edi
  00019	84 c0		 test	 al, al
  0001b	74 11		 je	 SHORT $LN17@strcspn
  0001d	8a c8		 mov	 cl, al
  0001f	90		 npad	 1
$LL5@strcspn:

; 41   : 		{
; 42   : 			if (*s1 == *c)

  00020	3a d9		 cmp	 bl, cl
  00022	74 0a		 je	 SHORT $LN17@strcspn

; 39   : 	{
; 40   : 		for (c = s2; *c; c++)

  00024	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  00027	42		 inc	 edx
  00028	84 c9		 test	 cl, cl
  0002a	75 f4		 jne	 SHORT $LL5@strcspn

; 43   : 				break;
; 44   : 		}
; 45   : 		
; 46   : 		if (*c)

  0002c	eb 05		 jmp	 SHORT $LN16@strcspn
$LN17@strcspn:
  0002e	80 3a 00	 cmp	 BYTE PTR [edx], 0
  00031	75 08		 jne	 SHORT $LN19@strcspn
$LN16@strcspn:

; 36   : 	const char *c;
; 37   : 
; 38   : 	while (*s1)

  00033	8a 5e 01	 mov	 bl, BYTE PTR [esi+1]

; 47   : 			break;
; 48   : 
; 49   : 		s1++;

  00036	46		 inc	 esi
  00037	84 db		 test	 bl, bl
  00039	75 dc		 jne	 SHORT $LL7@strcspn
$LN19@strcspn:
  0003b	5f		 pop	 edi
$LN18@strcspn:

; 50   : 	}
; 51   : 
; 52   : 	return s1 - s;

  0003c	8b c6		 mov	 eax, esi
  0003e	2b 45 08	 sub	 eax, DWORD PTR _s$[ebp]
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 53   : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_strcspn ENDP
_TEXT	ENDS
END
