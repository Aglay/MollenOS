; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strspn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strspn
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strspn.c
;	COMDAT _strspn
_TEXT	SEGMENT
_s$1$ = 8						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_strspn	PROC						; COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 40   : 	const char *s = s1;

  00004	8b 75 08	 mov	 esi, DWORD PTR _s1$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	89 45 08	 mov	 DWORD PTR _s$1$[ebp], eax

; 41   : 	const char *c;
; 42   : 
; 43   : 	while (*s1)

  0000c	8a 16		 mov	 dl, BYTE PTR [esi]
  0000e	84 d2		 test	 dl, dl
  00010	74 40		 je	 SHORT $LN20@strspn
  00012	53		 push	 ebx
  00013	57		 push	 edi
  00014	8b 7d 0c	 mov	 edi, DWORD PTR _s2$[ebp]
  00017	8a 1f		 mov	 bl, BYTE PTR [edi]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL7@strspn:

; 44   : 	{
; 45   : 		for (c = s2; *c; c++)

  00020	8b c7		 mov	 eax, edi
  00022	84 db		 test	 bl, bl
  00024	74 1a		 je	 SHORT $LN12@strspn
  00026	8a cb		 mov	 cl, bl
$LL5@strspn:

; 46   : 		{
; 47   : 			if (*s1 == *c)

  00028	3a d1		 cmp	 dl, cl
  0002a	74 14		 je	 SHORT $LN12@strspn

; 44   : 	{
; 45   : 		for (c = s2; *c; c++)

  0002c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002f	40		 inc	 eax
  00030	84 c9		 test	 cl, cl
  00032	75 f4		 jne	 SHORT $LL5@strspn

; 55   : 	}
; 56   : 
; 57   : 	return s1 - s;

  00034	8b 45 08	 mov	 eax, DWORD PTR _s$1$[ebp]
  00037	2b f0		 sub	 esi, eax
  00039	5f		 pop	 edi
  0003a	5b		 pop	 ebx
  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi

; 58   : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN12@strspn:

; 48   : 				break;
; 49   : 		}
; 50   : 
; 51   : 		if (*c == '\0')

  00040	80 38 00	 cmp	 BYTE PTR [eax], 0
  00043	74 08		 je	 SHORT $LN21@strspn

; 52   : 			break;
; 53   : 		
; 54   : 		s1++;

  00045	8a 56 01	 mov	 dl, BYTE PTR [esi+1]
  00048	46		 inc	 esi
  00049	84 d2		 test	 dl, dl
  0004b	75 d3		 jne	 SHORT $LL7@strspn
$LN21@strspn:
  0004d	8b 45 08	 mov	 eax, DWORD PTR _s$1$[ebp]
  00050	5f		 pop	 edi
  00051	5b		 pop	 ebx
$LN20@strspn:

; 55   : 	}
; 56   : 
; 57   : 	return s1 - s;

  00052	2b f0		 sub	 esi, eax
  00054	8b c6		 mov	 eax, esi
  00056	5e		 pop	 esi

; 58   : }

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_strspn	ENDP
_TEXT	ENDS
END
