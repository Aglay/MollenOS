; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\tanh.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_tanh
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4049000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c049000000000000
EXTRN	__CIexp:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@c049000000000000
CONST	SEGMENT
__real@c049000000000000 DQ 0c049000000000000r	; -50
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\tanh.c
;	COMDAT _tanh
_TEXT	SEGMENT
_x$ = 8							; size = 8
_tanh	PROC						; COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 14   : 	if (x > 50)

  00003	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4049000000000000
  00009	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0000c	db f1		 fcomi	 ST(1)
  0000e	dd d9		 fstp	 ST(1)
  00010	76 06		 jbe	 SHORT $LN4@tanh
  00012	dd d8		 fstp	 ST(0)

; 15   : 		return 1;

  00014	d9 e8		 fld1

; 23   : 	}
; 24   : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN4@tanh:

; 16   : 	else if (x < -50)

  00018	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c049000000000000
  0001e	df f1		 fcomip	 ST(1)
  00020	76 0a		 jbe	 SHORT $LN2@tanh
  00022	dd d8		 fstp	 ST(0)

; 17   : 		return -1;

  00024	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000

; 23   : 	}
; 24   : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@tanh:

; 18   : 	else
; 19   : 	{
; 20   : 		const double ebig = exp(x);

  0002c	e8 00 00 00 00	 call	 __CIexp

; 21   : 		const double esmall = 1.0/ebig;

  00031	d9 e8		 fld1
  00033	d8 f1		 fdiv	 ST(0), ST(1)

; 22   : 		return (ebig - esmall) / (ebig + esmall);

  00035	d9 c1		 fld	 ST(1)
  00037	d8 e1		 fsub	 ST(0), ST(1)
  00039	d9 c9		 fxch	 ST(1)
  0003b	de c2		 faddp	 ST(2), ST(0)
  0003d	de f1		 fdivrp	 ST(1), ST(0)

; 23   : 	}
; 24   : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_tanh	ENDP
_TEXT	ENDS
END
