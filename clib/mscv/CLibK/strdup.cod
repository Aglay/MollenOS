; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strdup.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strdup
PUBLIC	_strndup
EXTRN	__imp__kmalloc:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strdup.c
;	COMDAT _strndup
_TEXT	SEGMENT
_str$ = 8						; size = 4
_len$ = 12						; size = 4
_strndup PROC						; COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 20   : 	char * out = (char*)kmalloc(sizeof(char) * (len + 1));

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _len$[ebp]
  00008	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__kmalloc

; 21   : 	memcpy(out, str, len);

  00012	57		 push	 edi
  00013	ff 75 08	 push	 DWORD PTR _str$[ebp]
  00016	8b f0		 mov	 esi, eax
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _memcpy
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 22   : 	out[len] = '\0';

  00021	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 23   : 	return out;

  00025	8b c6		 mov	 eax, esi
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 24   : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_strndup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strdup.c
;	COMDAT _strdup
_TEXT	SEGMENT
_str$ = 8						; size = 4
_strdup	PROC						; COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 12   : 	size_t len = strlen(str);

  00003	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL3@strdup:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@strdup
  00017	2b c2		 sub	 eax, edx
  00019	56		 push	 esi
  0001a	57		 push	 edi

; 13   : 	char * out = (char*)kmalloc(sizeof(char) * (len+1));

  0001b	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001e	56		 push	 esi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__kmalloc

; 14   : 	memcpy(out, str, len+1);

  00025	56		 push	 esi
  00026	ff 75 08	 push	 DWORD PTR _str$[ebp]
  00029	8b f8		 mov	 edi, eax
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 _memcpy
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 15   : 	return out;

  00034	8b c7		 mov	 eax, edi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 16   : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_strdup	ENDP
_TEXT	ENDS
END
