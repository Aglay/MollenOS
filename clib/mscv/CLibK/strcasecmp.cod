; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strcasecmp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strcasecmp
EXTRN	_tolower:PROC
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strcasecmp.c
;	COMDAT _strcasecmp
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_strcasecmp PROC					; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 11   : 	const unsigned char *ucs1 = (const unsigned char *) s1;
; 12   : 	const unsigned char *ucs2 = (const unsigned char *) s2;
; 13   : 	int d = 0;
; 14   : 	for ( ; ; )
; 15   : 	{
; 16   : 		const int c1 = tolower(*ucs1++);

  00006	8b 7d 08	 mov	 edi, DWORD PTR _s1$[ebp]
  00009	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _tolower
  00012	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00015	8b f0		 mov	 esi, eax

; 17   : 		const int c2 = tolower(*ucs2++);

  00017	8b 7d 0c	 mov	 edi, DWORD PTR _s2$[ebp]
  0001a	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _tolower
  00023	83 c4 08	 add	 esp, 8
  00026	47		 inc	 edi

; 18   : 		
; 19   : 		if (((d = c1 - c2) != 0) || (c2 == '\0'))

  00027	2b f0		 sub	 esi, eax
  00029	75 26		 jne	 SHORT $LN12@strcasecmp
  0002b	eb 03 8d 49 00	 npad	 5
$LL4@strcasecmp:
  00030	85 c0		 test	 eax, eax
  00032	74 1d		 je	 SHORT $LN12@strcasecmp

; 11   : 	const unsigned char *ucs1 = (const unsigned char *) s1;
; 12   : 	const unsigned char *ucs2 = (const unsigned char *) s2;
; 13   : 	int d = 0;
; 14   : 	for ( ; ; )
; 15   : 	{
; 16   : 		const int c1 = tolower(*ucs1++);

  00034	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _tolower
  0003d	8b f0		 mov	 esi, eax
  0003f	43		 inc	 ebx

; 17   : 		const int c2 = tolower(*ucs2++);

  00040	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _tolower
  00049	83 c4 08	 add	 esp, 8
  0004c	47		 inc	 edi

; 18   : 		
; 19   : 		if (((d = c1 - c2) != 0) || (c2 == '\0'))

  0004d	2b f0		 sub	 esi, eax
  0004f	74 df		 je	 SHORT $LL4@strcasecmp
$LN12@strcasecmp:
  00051	5f		 pop	 edi

; 20   : 			break;
; 21   : 	}
; 22   : 	return d;

  00052	8b c6		 mov	 eax, esi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx

; 23   : }

  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_strcasecmp ENDP
_TEXT	ENDS
END
