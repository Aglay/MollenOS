; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\stdlib\strtold.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_map	DD	01H
	DD	03H
	DD	02H
	DD	00H
CONST	ENDS
PUBLIC	_strtold
PUBLIC	___flt_rounds
EXTRN	_strtod:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdlib\strtold.c
;	COMDAT ___flt_rounds
_TEXT	SEGMENT
_x$ = -4						; size = 4
___flt_rounds PROC					; COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 49   : 	int x;
; 50   : 
; 51   : 	/* Assume that the x87 and the SSE unit agree on the rounding mode. */
; 52   : #ifdef _MSC_VER
; 53   : 	_asm fnstcw dword ptr [x]

  00004	d9 7d fc	 fnstcw	 DWORD PTR _x$[ebp]

; 54   : #else
; 55   : 	__asm("fnstcw %0" : "=m" (x));
; 56   : #endif
; 57   : 	return (map[(x >> 10) & 0x03]);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0000a	c1 f8 0a	 sar	 eax, 10			; 0000000aH
  0000d	83 e0 03	 and	 eax, 3
  00010	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _map[eax*4]

; 58   : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
___flt_rounds ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdlib\strtold.c
;	COMDAT _strtold
_TEXT	SEGMENT
_s00$ = 8						; size = 4
_se$ = 12						; size = 4
_strtold PROC						; COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   : #else
; 70   : 	long double result;
; 71   : 	_strtorx_l(s00, se, FLT_ROUNDS, &result);
; 72   : 	return result;
; 73   : #endif
; 74   : }

  00003	5d		 pop	 ebp

; 66   : #ifdef _LDBL_EQ_DBL
; 67   : 	/* On platforms where long double is as wide as double.  */
; 68   : 	return strtod(s00, se);

  00004	e9 00 00 00 00	 jmp	 _strtod
_strtold ENDP
_TEXT	ENDS
END
