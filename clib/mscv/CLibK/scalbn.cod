; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\math\scalbn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_two54	DQ	04350000000000000r		; 1.80144e+016
_twom54	DQ	03c90000000000000r		; 5.55112e-017
_huge	DQ	07e37e43c8800759cr		; 1e+300
_tiny	DQ	001a56e1fc2f8f359r		; 1e-300
CONST	ENDS
PUBLIC	_scalbn
EXTRN	_copysign:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
; File c:\users\phail\documents\github\mollenos\clib\src\math\scalbn.c
;	COMDAT _scalbn
_TEXT	SEGMENT
_x$ = 8							; size = 8
_n$ = 16						; size = 4
_scalbn	PROC						; COMDAT

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	int  k,hx,lx;
; 32   : 	hx = __HI(x);
; 33   : 	lx = __LO(x);
; 34   : 	k = (hx&0x7ff00000)>>20;		/* extract exponent */

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]

; 35   : 	if (k==0) {				/* 0 or subnormal x */
; 36   : 		if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */

  00006	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00009	8b 55 10	 mov	 edx, DWORD PTR _n$[ebp]
  0000c	8b c1		 mov	 eax, ecx
  0000e	c1 f8 14	 sar	 eax, 20			; 00000014H
  00011	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00016	75 30		 jne	 SHORT $LN7@scalbn
  00018	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0001e	0b 4d 08	 or	 ecx, DWORD PTR _x$[ebp]
  00021	0f 84 b7 00 00
	00		 je	 $LN10@scalbn

; 37   : 		x *= two54; 

  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _two54
  0002d	dd 55 08	 fst	 QWORD PTR _x$[ebp]

; 38   : 		hx = __HI(x);
; 39   : 		k = ((hx&0x7ff00000)>>20) - 54; 

  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00033	8b c1		 mov	 eax, ecx
  00035	c1 f8 14	 sar	 eax, 20			; 00000014H
  00038	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0003d	83 e8 36	 sub	 eax, 54			; 00000036H

; 40   : 		if (n< -50000) return tiny*x; 	/*underflow*/

  00040	81 fa b0 3c ff
	ff		 cmp	 edx, -50000		; ffff3cb0H
  00046	7c 72		 jl	 SHORT $LN31@scalbn
$LN7@scalbn:

; 41   : 	}
; 42   : 	if (k==0x7ff) return x+x;		/* NaN or Inf */

  00048	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  0004d	75 04		 jne	 SHORT $LN6@scalbn
  0004f	dc c0		 fadd	 ST(0), ST(0)

; 54   : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN6@scalbn:

; 43   : 	k = k+n; 

  00053	03 c2		 add	 eax, edx

; 44   : 	if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */

  00055	3d fe 07 00 00	 cmp	 eax, 2046		; 000007feH
  0005a	7e 20		 jle	 SHORT $LN5@scalbn
  0005c	83 ec 10	 sub	 esp, 16			; 00000010H
  0005f	dd 5c 24 08	 fstp	 QWORD PTR [esp+8]
$LN32@scalbn:
  00063	dd 05 00 00 00
	00		 fld	 QWORD PTR _huge
  00069	dd 1c 24	 fstp	 QWORD PTR [esp]
  0006c	e8 00 00 00 00	 call	 _copysign
  00071	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _huge
  00077	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : }

  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN5@scalbn:

; 45   : 	if (k > 0) 				/* normal result */

  0007c	85 c0		 test	 eax, eax
  0007e	7e 15		 jle	 SHORT $LN4@scalbn

; 46   : 	{__HI(x) = (hx&0x800fffff)|(k<<20); return x;}

  00080	c1 e0 14	 shl	 eax, 20			; 00000014H
  00083	dd d8		 fstp	 ST(0)
  00085	81 e1 ff ff 0f
	80		 and	 ecx, -2146435073	; 800fffffH
  0008b	0b c1		 or	 eax, ecx
  0008d	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax
  00090	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 54   : }

  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN4@scalbn:

; 47   : 	if (k <= -54)

  00095	83 f8 ca	 cmp	 eax, -54		; ffffffcaH
  00098	7f 28		 jg	 SHORT $LN26@scalbn

; 48   : 		if (n > 50000) 	/* in case integer overflow in n+k */
; 49   : 			return huge*copysign(huge,x);	/*overflow*/

  0009a	83 ec 10	 sub	 esp, 16			; 00000010H
  0009d	dd 5c 24 08	 fstp	 QWORD PTR [esp+8]
  000a1	81 fa 50 c3 00
	00		 cmp	 edx, 50000		; 0000c350H
  000a7	7f ba		 jg	 SHORT $LN32@scalbn

; 50   : 		else return tiny*copysign(tiny,x); 	/*underflow*/

  000a9	dd 05 00 00 00
	00		 fld	 QWORD PTR _tiny
  000af	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b2	e8 00 00 00 00	 call	 _copysign
  000b7	83 c4 10	 add	 esp, 16			; 00000010H
$LN31@scalbn:
  000ba	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _tiny

; 54   : }

  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
$LN26@scalbn:

; 51   : 		k += 54;				/* subnormal result */
; 52   : 		__HI(x) = (hx&0x800fffff)|(k<<20);

  000c2	83 c0 36	 add	 eax, 54			; 00000036H
  000c5	dd d8		 fstp	 ST(0)
  000c7	c1 e0 14	 shl	 eax, 20			; 00000014H
  000ca	81 e1 ff ff 0f
	80		 and	 ecx, -2146435073	; 800fffffH
  000d0	0b c1		 or	 eax, ecx
  000d2	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax

; 53   : 		return x*twom54;

  000d5	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000d8	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _twom54
$LN10@scalbn:

; 54   : }

  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
_scalbn	ENDP
_TEXT	ENDS
END
