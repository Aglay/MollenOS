; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\math\scalbn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_two54	DQ	04350000000000000r		; 1.80144e+016
_twom54	DQ	03c90000000000000r		; 5.55112e-017
_huge	DQ	07e37e43c8800759cr		; 1e+300
_tiny	DQ	001a56e1fc2f8f359r		; 1e-300
CONST	ENDS
PUBLIC	_scalbn
PUBLIC	__real@01a56e1fc2f8f359
PUBLIC	__real@3c90000000000000
PUBLIC	__real@4350000000000000
PUBLIC	__real@7e37e43c8800759c
EXTRN	_copysign:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@4350000000000000
CONST	SEGMENT
__real@4350000000000000 DQ 04350000000000000r	; 1.80144e+016
CONST	ENDS
;	COMDAT __real@3c90000000000000
CONST	SEGMENT
__real@3c90000000000000 DQ 03c90000000000000r	; 5.55112e-017
CONST	ENDS
;	COMDAT __real@01a56e1fc2f8f359
CONST	SEGMENT
__real@01a56e1fc2f8f359 DQ 001a56e1fc2f8f359r	; 1e-300
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\phail\documents\github\mollenos\clib\src\math\scalbn.c
;	COMDAT _scalbn
_TEXT	SEGMENT
tv213 = 8						; size = 8
tv209 = 8						; size = 8
tv200 = 8						; size = 8
tv198 = 8						; size = 8
tv187 = 8						; size = 8
tv185 = 8						; size = 8
tv176 = 8						; size = 8
tv174 = 8						; size = 8
tv170 = 8						; size = 8
_x$ = 8							; size = 8
_n$ = 16						; size = 4
_scalbn	PROC						; COMDAT

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	int  k,hx,lx;
; 32   : 	hx = __HI(x);
; 33   : 	lx = __LO(x);
; 34   : 	k = (hx&0x7ff00000)>>20;		/* extract exponent */

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00006	8b c1		 mov	 eax, ecx

; 35   : 	if (k==0) {				/* 0 or subnormal x */

  00008	8b 55 10	 mov	 edx, DWORD PTR _n$[ebp]
  0000b	c1 f8 14	 sar	 eax, 20			; 00000014H
  0000e	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00013	75 4b		 jne	 SHORT $LN12@scalbn

; 36   : 		if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */

  00015	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0001b	0b 4d 08	 or	 ecx, DWORD PTR _x$[ebp]
  0001e	0f 84 a9 00 00
	00		 je	 $LN13@scalbn

; 37   : 		x *= two54; 

  00024	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  00029	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4350000000000000
  00031	f2 0f 11 45 08	 movsd	 QWORD PTR _x$[ebp], xmm0

; 38   : 		hx = __HI(x);
; 39   : 		k = ((hx&0x7ff00000)>>20) - 54; 

  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00039	8b c1		 mov	 eax, ecx
  0003b	c1 f8 14	 sar	 eax, 20			; 00000014H
  0003e	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00043	83 e8 36	 sub	 eax, 54			; 00000036H

; 40   : 		if (n< -50000) return tiny*x; 	/*underflow*/

  00046	81 fa b0 3c ff
	ff		 cmp	 edx, -50000		; ffff3cb0H
  0004c	7d 17		 jge	 SHORT $LN7@scalbn
  0004e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@01a56e1fc2f8f359
  00056	f2 0f 11 45 08	 movsd	 QWORD PTR tv213[ebp], xmm0
  0005b	dd 45 08	 fld	 QWORD PTR tv213[ebp]

; 54   : }

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN12@scalbn:

; 40   : 		if (n< -50000) return tiny*x; 	/*underflow*/

  00060	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
$LN7@scalbn:

; 41   : 	}
; 42   : 	if (k==0x7ff) return x+x;		/* NaN or Inf */

  00065	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  0006a	75 0e		 jne	 SHORT $LN6@scalbn
  0006c	f2 0f 58 c0	 addsd	 xmm0, xmm0
  00070	f2 0f 11 45 08	 movsd	 QWORD PTR tv209[ebp], xmm0
  00075	dd 45 08	 fld	 QWORD PTR tv209[ebp]

; 54   : }

  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN6@scalbn:

; 43   : 	k = k+n; 

  0007a	03 c2		 add	 eax, edx

; 44   : 	if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */

  0007c	3d fe 07 00 00	 cmp	 eax, 2046		; 000007feH
  00081	7e 38		 jle	 SHORT $LN5@scalbn
  00083	83 ec 10	 sub	 esp, 16			; 00000010H
  00086	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  0008c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@7e37e43c8800759c
  00094	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00099	e8 00 00 00 00	 call	 _copysign
  0009e	dd 5d 08	 fstp	 QWORD PTR tv200[ebp]
  000a1	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR tv200[ebp]
  000a6	83 c4 10	 add	 esp, 16			; 00000010H
  000a9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@7e37e43c8800759c
  000b1	f2 0f 11 45 08	 movsd	 QWORD PTR tv198[ebp], xmm0
  000b6	dd 45 08	 fld	 QWORD PTR tv198[ebp]

; 54   : }

  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN5@scalbn:

; 45   : 	if (k > 0) 				/* normal result */

  000bb	85 c0		 test	 eax, eax
  000bd	7e 13		 jle	 SHORT $LN4@scalbn

; 46   : 	{__HI(x) = (hx&0x800fffff)|(k<<20); return x;}

  000bf	c1 e0 14	 shl	 eax, 20			; 00000014H
  000c2	81 e1 ff ff 0f
	80		 and	 ecx, -2146435073	; 800fffffH
  000c8	0b c1		 or	 eax, ecx
  000ca	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax
$LN13@scalbn:
  000cd	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 54   : }

  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
$LN4@scalbn:

; 47   : 	if (k <= -54)

  000d2	83 f8 ca	 cmp	 eax, -54		; ffffffcaH
  000d5	7f 6f		 jg	 SHORT $LN1@scalbn

; 48   : 		if (n > 50000) 	/* in case integer overflow in n+k */
; 49   : 			return huge*copysign(huge,x);	/*overflow*/

  000d7	83 ec 10	 sub	 esp, 16			; 00000010H
  000da	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  000e0	81 fa 50 c3 00
	00		 cmp	 edx, 50000		; 0000c350H
  000e6	7e 2f		 jle	 SHORT $LN2@scalbn
  000e8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@7e37e43c8800759c
  000f0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f5	e8 00 00 00 00	 call	 _copysign
  000fa	dd 5d 08	 fstp	 QWORD PTR tv187[ebp]
  000fd	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR tv187[ebp]
  00102	83 c4 10	 add	 esp, 16			; 00000010H
  00105	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@7e37e43c8800759c
  0010d	f2 0f 11 45 08	 movsd	 QWORD PTR tv185[ebp], xmm0
  00112	dd 45 08	 fld	 QWORD PTR tv185[ebp]

; 54   : }

  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
$LN2@scalbn:

; 50   : 		else return tiny*copysign(tiny,x); 	/*underflow*/

  00117	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@01a56e1fc2f8f359
  0011f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00124	e8 00 00 00 00	 call	 _copysign
  00129	dd 5d 08	 fstp	 QWORD PTR tv176[ebp]
  0012c	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR tv176[ebp]
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@01a56e1fc2f8f359
  0013c	f2 0f 11 45 08	 movsd	 QWORD PTR tv174[ebp], xmm0
  00141	dd 45 08	 fld	 QWORD PTR tv174[ebp]

; 54   : }

  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
$LN1@scalbn:

; 51   : 		k += 54;				/* subnormal result */
; 52   : 		__HI(x) = (hx&0x800fffff)|(k<<20);

  00146	83 c0 36	 add	 eax, 54			; 00000036H
  00149	81 e1 ff ff 0f
	80		 and	 ecx, -2146435073	; 800fffffH
  0014f	c1 e0 14	 shl	 eax, 20			; 00000014H
  00152	0b c1		 or	 eax, ecx
  00154	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax

; 53   : 		return x*twom54;

  00157	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  0015c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3c90000000000000
  00164	f2 0f 11 45 08	 movsd	 QWORD PTR tv170[ebp], xmm0
  00169	dd 45 08	 fld	 QWORD PTR tv170[ebp]

; 54   : }

  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
_scalbn	ENDP
_TEXT	ENDS
END
