; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strncat.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strncat
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strncat.c
;	COMDAT _strncat
_TEXT	SEGMENT
_destination$ = 8					; size = 4
_source$ = 12						; size = 4
_num$ = 16						; size = 4
_strncat PROC						; COMDAT

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 26   : 	char *s = destination;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _destination$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 27   : 
; 28   : 	/* Skip over the data in s1 as quickly as possible.  */
; 29   : 	if (ALIGNED (destination))

  0000a	f6 c1 03	 test	 cl, 3
  0000d	75 2a		 jne	 SHORT $LN6@strncat

; 30   : 	{
; 31   : 		unsigned long *aligned_s1 = (unsigned long *)destination;
; 32   : 		
; 33   : 		while (!DETECTNULL (*aligned_s1))

  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	8d 82 ff fe fe
	fe		 lea	 eax, DWORD PTR [edx-16843009]
  00017	f7 d2		 not	 edx
  00019	23 c2		 and	 eax, edx
  0001b	a9 80 80 80 80	 test	 eax, -2139062144	; 80808080H
  00020	75 17		 jne	 SHORT $LN6@strncat
$LL7@strncat:
  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 34   : 			aligned_s1++;

  00025	83 c1 04	 add	 ecx, 4
  00028	8d 82 ff fe fe
	fe		 lea	 eax, DWORD PTR [edx-16843009]
  0002e	f7 d2		 not	 edx
  00030	23 c2		 and	 eax, edx
  00032	a9 80 80 80 80	 test	 eax, -2139062144	; 80808080H
  00037	74 e9		 je	 SHORT $LL7@strncat
$LN6@strncat:

; 35   : 
; 36   : 		destination = (char *)aligned_s1;
; 37   : 	}
; 38   : 
; 39   : 	while (*destination)

  00039	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0003c	74 08		 je	 SHORT $LN13@strncat
  0003e	8b ff		 npad	 2
$LL5@strncat:

; 40   : 		destination++;

  00040	41		 inc	 ecx
  00041	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00044	75 fa		 jne	 SHORT $LL5@strncat
$LN13@strncat:

; 41   : 
; 42   : 	/* s1 now points to the its trailing null character, now copy
; 43   : 		up to N bytes from S2 into S1 stopping if a NULL is encountered
; 44   : 		in S2.
; 45   : 
; 46   : 		It is not safe to use strncpy here since it copies EXACTLY N
; 47   : 		characters, NULL padding if necessary.  */
; 48   : 	while (num-- != 0 && (*destination++ = *source++))

  00046	8b 75 10	 mov	 esi, DWORD PTR _num$[ebp]
  00049	85 f6		 test	 esi, esi
  0004b	74 22		 je	 SHORT $LN23@strncat

; 49   : 	{
; 50   : 		if (num == 0)

  0004d	57		 push	 edi
  0004e	8b 7d 0c	 mov	 edi, DWORD PTR _source$[ebp]
  00051	2b f9		 sub	 edi, ecx
$LL3@strncat:

; 41   : 
; 42   : 	/* s1 now points to the its trailing null character, now copy
; 43   : 		up to N bytes from S2 into S1 stopping if a NULL is encountered
; 44   : 		in S2.
; 45   : 
; 46   : 		It is not safe to use strncpy here since it copies EXACTLY N
; 47   : 		characters, NULL padding if necessary.  */
; 48   : 	while (num-- != 0 && (*destination++ = *source++))

  00053	8a 14 0f	 mov	 dl, BYTE PTR [edi+ecx]
  00056	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00059	4e		 dec	 esi
  0005a	88 51 ff	 mov	 BYTE PTR [ecx-1], dl
  0005d	84 d2		 test	 dl, dl
  0005f	74 07		 je	 SHORT $LN24@strncat

; 49   : 	{
; 50   : 		if (num == 0)

  00061	85 f6		 test	 esi, esi
  00063	75 ee		 jne	 SHORT $LL3@strncat

; 51   : 			*destination = '\0';

  00065	c6 01 00	 mov	 BYTE PTR [ecx], 0
$LN24@strncat:
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 52   : 	}
; 53   : 	
; 54   : 	return s;

  0006a	8b c3		 mov	 eax, ebx
  0006c	5b		 pop	 ebx

; 55   : }

  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN23@strncat:
  0006f	5e		 pop	 esi

; 52   : 	}
; 53   : 	
; 54   : 	return s;

  00070	8b c3		 mov	 eax, ebx
  00072	5b		 pop	 ebx

; 55   : }

  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_strncat ENDP
_TEXT	ENDS
END
