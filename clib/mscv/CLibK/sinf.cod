; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\sinf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_s1pio2	DQ	03ff921fb54442d18r		; 1.5708
_s2pio2	DQ	0400921fb54442d18r		; 3.14159
_s3pio2	DQ	04012d97c7f3321d2r		; 4.71239
_s4pio2	DQ	0401921fb54442d18r		; 6.28319
CONST	ENDS
PUBLIC	_sinf
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@4012d97c7f3321d2
PUBLIC	__real@401921fb54442d18
PUBLIC	__real@c00921fb54442d18
PUBLIC	__real@c01921fb54442d18
EXTRN	___ieee754_rem_pio2f:PROC
EXTRN	___kernel_sindf:PROC
EXTRN	___kernel_cosdf:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@c01921fb54442d18
CONST	SEGMENT
__real@c01921fb54442d18 DQ 0c01921fb54442d18r	; -6.28319
CONST	ENDS
;	COMDAT __real@c00921fb54442d18
CONST	SEGMENT
__real@c00921fb54442d18 DQ 0c00921fb54442d18r	; -3.14159
CONST	ENDS
;	COMDAT __real@401921fb54442d18
CONST	SEGMENT
__real@401921fb54442d18 DQ 0401921fb54442d18r	; 6.28319
CONST	ENDS
;	COMDAT __real@4012d97c7f3321d2
CONST	SEGMENT
__real@4012d97c7f3321d2 DQ 04012d97c7f3321d2r	; 4.71239
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\sinf.c
;	COMDAT _sinf
_TEXT	SEGMENT
_y$ = -8						; size = 8
_hx$ = -4						; size = 4
tv170 = 8						; size = 4
_x$ = 8							; size = 4
_sinf	PROC						; COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 30   : 	double y;
; 31   : 	int32_t n, hx, ix;
; 32   : 
; 33   : 	GET_FLOAT_WORD(hx, x);

  00006	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0000b	f3 0f 11 45 fc	 movss	 DWORD PTR _hx$[ebp], xmm0

; 34   : 	ix = hx & 0x7fffffff;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _hx$[ebp]
  00013	8b c1		 mov	 eax, ecx
  00015	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 35   : 
; 36   : 	if (ix <= 0x3f490fda) {		/* |x| ~<= pi/4 */

  0001a	3d da 0f 49 3f	 cmp	 eax, 1061752794		; 3f490fdaH
  0001f	7f 2b		 jg	 SHORT $LN22@sinf

; 37   : 		if (ix<0x39800000)		/* |x| < 2**-12 */

  00021	3d 00 00 80 39	 cmp	 eax, 964689920		; 39800000H
  00026	7d 0f		 jge	 SHORT $LN20@sinf

; 38   : 			if (((int)x) == 0) return x;	/* x with inexact if x != 0 */

  00028	f3 0f 2c c0	 cvttss2si eax, xmm0
  0002c	85 c0		 test	 eax, eax
  0002e	75 07		 jne	 SHORT $LN20@sinf
  00030	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 74   : 		}
; 75   : 	}
; 76   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN20@sinf:

; 39   : 		return __kernel_sindf(x);

  00037	d9 45 08	 fld	 DWORD PTR _x$[ebp]
$LN34@sinf:

; 69   : 		case 0: return  __kernel_sindf(y);

  0003a	83 ec 08	 sub	 esp, 8
  0003d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00040	e8 00 00 00 00	 call	 ___kernel_sindf
  00045	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN22@sinf:

; 40   : 	}
; 41   : 	if (ix <= 0x407b53d1) {		/* |x| ~<= 5*pi/4 */

  0004c	3d d1 53 7b 40	 cmp	 eax, 1081824209		; 407b53d1H
  00051	7f 77		 jg	 SHORT $LN15@sinf

; 42   : 		if (ix <= 0x4016cbe3) {	/* |x| ~<= 3pi/4 */

  00053	3d e3 cb 16 40	 cmp	 eax, 1075235811		; 4016cbe3H
  00058	7f 36		 jg	 SHORT $LN18@sinf

; 43   : 			if (hx>0)
; 44   : 				return __kernel_cosdf(x - s1pio2);

  0005a	d9 45 08	 fld	 DWORD PTR _x$[ebp]
  0005d	83 ec 08	 sub	 esp, 8
  00060	85 c9		 test	 ecx, ecx
  00062	7e 15		 jle	 SHORT $LN17@sinf
  00064	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff921fb54442d18
$LN3@sinf:
  0006a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0006d	e8 00 00 00 00	 call	 ___kernel_cosdf

; 69   : 		case 0: return  __kernel_sindf(y);

  00072	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN17@sinf:

; 45   : 			else
; 46   : 				return -__kernel_cosdf(x + s1pio2);

  00079	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff921fb54442d18
$LN37@sinf:
  0007f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00082	e8 00 00 00 00	 call	 ___kernel_cosdf
  00087	d9 e0		 fchs

; 69   : 		case 0: return  __kernel_sindf(y);

  00089	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN18@sinf:

; 47   : 		}
; 48   : 		else
; 49   : 			return __kernel_sindf((hx > 0 ? s2pio2 : -s2pio2) - x);

  00090	85 c9		 test	 ecx, ecx
  00092	7e 1b		 jle	 SHORT $LN28@sinf
  00094	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@400921fb54442d18

; 69   : 		case 0: return  __kernel_sindf(y);

  0009a	83 ec 08	 sub	 esp, 8
  0009d	d8 65 08	 fsub	 DWORD PTR _x$[ebp]
  000a0	dd 1c 24	 fstp	 QWORD PTR [esp]
  000a3	e8 00 00 00 00	 call	 ___kernel_sindf
  000a8	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
$LN28@sinf:

; 47   : 		}
; 48   : 		else
; 49   : 			return __kernel_sindf((hx > 0 ? s2pio2 : -s2pio2) - x);

  000af	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c00921fb54442d18

; 69   : 		case 0: return  __kernel_sindf(y);

  000b5	83 ec 08	 sub	 esp, 8
  000b8	d8 65 08	 fsub	 DWORD PTR _x$[ebp]
  000bb	dd 1c 24	 fstp	 QWORD PTR [esp]
  000be	e8 00 00 00 00	 call	 ___kernel_sindf
  000c3	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
$LN15@sinf:

; 50   : 	}
; 51   : 	if (ix <= 0x40e231d5) {		/* |x| ~<= 9*pi/4 */

  000ca	3d d5 31 e2 40	 cmp	 eax, 1088565717		; 40e231d5H
  000cf	7f 77		 jg	 SHORT $LN14@sinf

; 52   : 		if (ix <= 0x40afeddf) {	/* |x| ~<= 7*pi/4 */

  000d1	3d df ed af 40	 cmp	 eax, 1085271519		; 40afeddfH
  000d6	7f 36		 jg	 SHORT $LN13@sinf

; 53   : 			if (hx>0)
; 54   : 				return -__kernel_cosdf(x - s3pio2);

  000d8	d9 45 08	 fld	 DWORD PTR _x$[ebp]
  000db	83 ec 08	 sub	 esp, 8
  000de	85 c9		 test	 ecx, ecx
  000e0	7e 17		 jle	 SHORT $LN12@sinf
  000e2	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4012d97c7f3321d2
  000e8	dd 1c 24	 fstp	 QWORD PTR [esp]
  000eb	e8 00 00 00 00	 call	 ___kernel_cosdf
  000f0	d9 e0		 fchs

; 69   : 		case 0: return  __kernel_sindf(y);

  000f2	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
$LN12@sinf:

; 55   : 			else
; 56   : 				return __kernel_cosdf(x + s3pio2);

  000f9	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4012d97c7f3321d2
  000ff	dd 1c 24	 fstp	 QWORD PTR [esp]
  00102	e8 00 00 00 00	 call	 ___kernel_cosdf

; 69   : 		case 0: return  __kernel_sindf(y);

  00107	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
$LN13@sinf:

; 57   : 		}
; 58   : 		else
; 59   : 			return __kernel_sindf(x + (hx > 0 ? -s4pio2 : s4pio2));

  0010e	85 c9		 test	 ecx, ecx
  00110	7e 1b		 jle	 SHORT $LN30@sinf
  00112	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c01921fb54442d18

; 69   : 		case 0: return  __kernel_sindf(y);

  00118	83 ec 08	 sub	 esp, 8
  0011b	d8 45 08	 fadd	 DWORD PTR _x$[ebp]
  0011e	dd 1c 24	 fstp	 QWORD PTR [esp]
  00121	e8 00 00 00 00	 call	 ___kernel_sindf
  00126	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
$LN30@sinf:

; 57   : 		}
; 58   : 		else
; 59   : 			return __kernel_sindf(x + (hx > 0 ? -s4pio2 : s4pio2));

  0012d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@401921fb54442d18

; 69   : 		case 0: return  __kernel_sindf(y);

  00133	83 ec 08	 sub	 esp, 8
  00136	d8 45 08	 fadd	 DWORD PTR _x$[ebp]
  00139	dd 1c 24	 fstp	 QWORD PTR [esp]
  0013c	e8 00 00 00 00	 call	 ___kernel_sindf
  00141	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
$LN14@sinf:

; 60   : 	}
; 61   : 
; 62   : 	/* sin(Inf or NaN) is NaN */
; 63   : 	else if (ix >= 0x7f800000) return x - x;

  00148	3d 00 00 80 7f	 cmp	 eax, 2139095040		; 7f800000H
  0014d	7c 0f		 jl	 SHORT $LN8@sinf
  0014f	d9 45 08	 fld	 DWORD PTR _x$[ebp]
  00152	dc e8		 fsub	 ST(0), ST(0)
  00154	d9 5d 08	 fstp	 DWORD PTR tv170[ebp]
  00157	d9 45 08	 fld	 DWORD PTR tv170[ebp]

; 74   : 		}
; 75   : 	}
; 76   : }

  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$LN8@sinf:

; 64   : 
; 65   : 	/* general argument reduction needed */
; 66   : 	else {
; 67   : 		n = __ieee754_rem_pio2f(x, &y);

  0015e	d9 45 08	 fld	 DWORD PTR _x$[ebp]
  00161	8d 45 f8	 lea	 eax, DWORD PTR _y$[ebp]
  00164	50		 push	 eax
  00165	51		 push	 ecx
  00166	d9 1c 24	 fstp	 DWORD PTR [esp]
  00169	e8 00 00 00 00	 call	 ___ieee754_rem_pio2f

; 72   : 		default:
; 73   : 			return -__kernel_cosdf(y);

  0016e	dd 45 f8	 fld	 QWORD PTR _y$[ebp]
  00171	83 e0 03	 and	 eax, 3
  00174	83 c4 08	 add	 esp, 8
  00177	83 e8 00	 sub	 eax, 0
  0017a	0f 84 ba fe ff
	ff		 je	 $LN34@sinf
  00180	83 ec 08	 sub	 esp, 8
  00183	48		 dec	 eax
  00184	0f 84 e0 fe ff
	ff		 je	 $LN3@sinf

; 68   : 		switch (n & 3) {

  0018a	48		 dec	 eax
  0018b	0f 85 ee fe ff
	ff		 jne	 $LN37@sinf

; 70   : 		case 1: return  __kernel_cosdf(y);
; 71   : 		case 2: return  __kernel_sindf(-y);

  00191	d9 e0		 fchs
  00193	dd 1c 24	 fstp	 QWORD PTR [esp]
  00196	e8 00 00 00 00	 call	 ___kernel_sindf
  0019b	83 c4 08	 add	 esp, 8

; 74   : 		}
; 75   : 	}
; 76   : }

  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
END
