; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strncasecmp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strncasecmp
PUBLIC	___tolower
EXTRN	__ctype:BYTE
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h
;	COMDAT ___tolower
_TEXT	SEGMENT
_c$ = 8							; size = 1
___tolower PROC						; COMDAT

; 61   : __inline unsigned char __tolower(unsigned char c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   :         return isupper(c) ? c - ('A' - 'a') : c;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00006	0f b6 c0	 movzx	 eax, al
  00009	f6 80 00 00 00
	00 01		 test	 BYTE PTR __ctype[eax], 1
  00010	74 03		 je	 SHORT $LN4@tolower
  00012	83 c0 20	 add	 eax, 32			; 00000020H
$LN4@tolower:

; 63   : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
___tolower ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strncasecmp.c
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h
; File c:\users\philip\documents\github\mollenos\clib\src\string\strncasecmp.c
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h
; File c:\users\philip\documents\github\mollenos\clib\src\string\strncasecmp.c
;	COMDAT _strncasecmp
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_n$ = 16						; size = 4
_strncasecmp PROC					; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 11   : 	const unsigned char *ucs1 = (const unsigned char *) s1;
; 12   : 	const unsigned char *ucs2 = (const unsigned char *) s2;
; 13   : 	int d = 0;
; 14   : 	for ( ; n != 0; n--)

  00003	8b 55 10	 mov	 edx, DWORD PTR _n$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s1$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _s2$[ebp]
  0000e	85 d2		 test	 edx, edx
  00010	74 37		 je	 SHORT $LN23@strncasecm
$LL5@strncasecm:
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h

; 62   :         return isupper(c) ? c - ('A' - 'a') : c;

  00012	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00015	f6 80 00 00 00
	00 01		 test	 BYTE PTR __ctype[eax], 1
  0001c	74 03		 je	 SHORT $LN10@strncasecm
  0001e	83 c0 20	 add	 eax, 32			; 00000020H
$LN10@strncasecm:
; File c:\users\philip\documents\github\mollenos\clib\src\string\strncasecmp.c

; 16   : 		const int c1 = tolower(*ucs1++);

  00021	0f b6 c8	 movzx	 ecx, al
  00024	46		 inc	 esi
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h

; 62   :         return isupper(c) ? c - ('A' - 'a') : c;

  00025	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00028	f6 80 00 00 00
	00 01		 test	 BYTE PTR __ctype[eax], 1
  0002f	74 03		 je	 SHORT $LN14@strncasecm
  00031	83 c0 20	 add	 eax, 32			; 00000020H
$LN14@strncasecm:
; File c:\users\philip\documents\github\mollenos\clib\src\string\strncasecmp.c

; 17   : 		const int c2 = tolower(*ucs2++);

  00034	0f b6 c0	 movzx	 eax, al
  00037	47		 inc	 edi

; 18   : 		
; 19   : 		if (((d = c1 - c2) != 0) || (c2 == '\0'))

  00038	2b c8		 sub	 ecx, eax
  0003a	75 07		 jne	 SHORT $LN21@strncasecm
  0003c	85 c0		 test	 eax, eax
  0003e	74 03		 je	 SHORT $LN21@strncasecm

; 11   : 	const unsigned char *ucs1 = (const unsigned char *) s1;
; 12   : 	const unsigned char *ucs2 = (const unsigned char *) s2;
; 13   : 	int d = 0;
; 14   : 	for ( ; n != 0; n--)

  00040	4a		 dec	 edx
  00041	75 cf		 jne	 SHORT $LL5@strncasecm
$LN21@strncasecm:
  00043	5f		 pop	 edi

; 20   : 			break;
; 21   : 	}
; 22   : 	return d;

  00044	8b c1		 mov	 eax, ecx
  00046	5e		 pop	 esi

; 23   : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN23@strncasecm:
  00049	5f		 pop	 edi

; 20   : 			break;
; 21   : 	}
; 22   : 	return d;

  0004a	33 c0		 xor	 eax, eax
  0004c	5e		 pop	 esi

; 23   : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_strncasecmp ENDP
_TEXT	ENDS
END
