; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strncasecmp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strncasecmp
EXTRN	_tolower:PROC
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strncasecmp.c
;	COMDAT _strncasecmp
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_n$ = 16						; size = 4
_strncasecmp PROC					; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 11   : 	const unsigned char *ucs1 = (const unsigned char *) s1;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _s1$[ebp]
  00007	56		 push	 esi

; 12   : 	const unsigned char *ucs2 = (const unsigned char *) s2;
; 13   : 	int d = 0;
; 14   : 	for ( ; n != 0; n--)

  00008	8b 75 10	 mov	 esi, DWORD PTR _n$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 33		 je	 SHORT $LN15@strncasecm
  0000f	57		 push	 edi
$LL5@strncasecm:

; 15   : 	{
; 16   : 		const int c1 = tolower(*ucs1++);

  00010	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _tolower
  00019	8b f8		 mov	 edi, eax
  0001b	8d 5b 01	 lea	 ebx, DWORD PTR [ebx+1]

; 17   : 		const int c2 = tolower(*ucs2++);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _s2$[ebp]
  00021	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _tolower
  0002a	ff 45 0c	 inc	 DWORD PTR _s2$[ebp]
  0002d	83 c4 08	 add	 esp, 8

; 18   : 		
; 19   : 		if (((d = c1 - c2) != 0) || (c2 == '\0'))

  00030	2b f8		 sub	 edi, eax
  00032	75 07		 jne	 SHORT $LN14@strncasecm
  00034	85 c0		 test	 eax, eax
  00036	74 03		 je	 SHORT $LN14@strncasecm

; 12   : 	const unsigned char *ucs2 = (const unsigned char *) s2;
; 13   : 	int d = 0;
; 14   : 	for ( ; n != 0; n--)

  00038	4e		 dec	 esi
  00039	75 d5		 jne	 SHORT $LL5@strncasecm
$LN14@strncasecm:

; 20   : 			break;
; 21   : 	}
; 22   : 	return d;

  0003b	8b c7		 mov	 eax, edi
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx

; 23   : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN15@strncasecm:
  00042	5e		 pop	 esi

; 20   : 			break;
; 21   : 	}
; 22   : 	return d;

  00043	33 c0		 xor	 eax, eax
  00045	5b		 pop	 ebx

; 23   : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_strncasecmp ENDP
_TEXT	ENDS
END
