; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\pow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_sccsid	DB	'@(#)e_pow.c 1.5 04/04/22 SMI', 00H
_DATA	ENDS
CONST	SEGMENT
_bp	DQ	03ff0000000000000r		; 1
	DQ	03ff8000000000000r		; 1.5
_dp_h	DQ	00000000000000000r		; 0
	DQ	03fe2b80340000000r		; 0.584962
_dp_l	DQ	00000000000000000r		; 0
	DQ	03e4cfdeb43cfd006r		; 1.35004e-008
_zero	DQ	00000000000000000r		; 0
_one	DQ	03ff0000000000000r		; 1
_two	DQ	04000000000000000r		; 2
_two53	DQ	04340000000000000r		; 9.0072e+015
_huge	DQ	07e37e43c8800759cr		; 1e+300
_tiny	DQ	001a56e1fc2f8f359r		; 1e-300
_L1	DQ	03fe3333333333303r		; 0.6
_L2	DQ	03fdb6db6db6fabffr		; 0.428571
_L3	DQ	03fd55555518f264dr		; 0.333333
_L4	DQ	03fd17460a91d4101r		; 0.272728
_L5	DQ	03fcd864a93c9db65r		; 0.230661
_L6	DQ	03fca7e284a454eefr		; 0.206975
_P1	DQ	03fc555555555553er		; 0.166667
_P2	DQ	0bf66c16c16bebd93r		; -0.00277778
_P3	DQ	03f11566aaf25de2cr		; 6.61376e-005
_P4	DQ	0bebbbd41c5d26bf1r		; -1.65339e-006
_P5	DQ	03e66376972bea4d0r		; 4.13814e-008
_lg2	DQ	03fe62e42fefa39efr		; 0.693147
_lg2_h	DQ	03fe62e4300000000r		; 0.693147
_lg2_l	DQ	0be205c610ca86c39r		; -1.90465e-009
_ovt	DQ	03c971547652b82fer		; 8.00857e-017
_cp	DQ	03feec709dc3a03fdr		; 0.961797
_cp_h	DQ	03feec709e0000000r		; 0.961797
_cp_l	DQ	0be3e2fe0145b01f5r		; -7.02846e-009
_ivln2	DQ	03ff71547652b82fer		; 1.4427
_ivln2_h DQ	03ff7154760000000r		; 1.4427
_ivln2_l DQ	03e54ae0bf85ddf44r		; 1.92596e-008
CONST	ENDS
PUBLIC	_pow
PUBLIC	___fpclassifyl
PUBLIC	___fpclassifyf
PUBLIC	___fpclassify
PUBLIC	___isnan
PUBLIC	___isnanf
PUBLIC	___isnanl
PUBLIC	___signbit
PUBLIC	___signbitf
PUBLIC	___signbitl
PUBLIC	__real@0000000000000000
PUBLIC	__real@01a56e1fc2f8f359
PUBLIC	__real@3c971547652b82fe
PUBLIC	__real@3e205c610ca86c39
PUBLIC	__real@3e3e2fe0145b01f5
PUBLIC	__real@3e54ae0bf85ddf44
PUBLIC	__real@3e66376972bea4d0
PUBLIC	__real@3ebbbd41c5d26bf1
PUBLIC	__real@3f11566aaf25de2c
PUBLIC	__real@3f66c16c16bebd93
PUBLIC	__real@3fc555555555553e
PUBLIC	__real@3fca7e284a454eef
PUBLIC	__real@3fcd864a93c9db65
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd17460a91d4101
PUBLIC	__real@3fd55555518f264d
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fdb6db6db6fabff
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333303
PUBLIC	__real@3fe62e42fefa39ef
PUBLIC	__real@3fe62e4300000000
PUBLIC	__real@3feec709dc3a03fd
PUBLIC	__real@3feec709e0000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff7154760000000
PUBLIC	__real@3ff71547652b82fe
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4340000000000000
PUBLIC	__real@7e37e43c8800759c
PUBLIC	__real@bff0000000000000
EXTRN	_scalbn:PROC
EXTRN	__CIsqrt:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@4340000000000000
CONST	SEGMENT
__real@4340000000000000 DQ 04340000000000000r	; 9.0072e+015
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff71547652b82fe
CONST	SEGMENT
__real@3ff71547652b82fe DQ 03ff71547652b82fer	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff7154760000000
CONST	SEGMENT
__real@3ff7154760000000 DQ 03ff7154760000000r	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feec709e0000000
CONST	SEGMENT
__real@3feec709e0000000 DQ 03feec709e0000000r	; 0.961797
CONST	ENDS
;	COMDAT __real@3feec709dc3a03fd
CONST	SEGMENT
__real@3feec709dc3a03fd DQ 03feec709dc3a03fdr	; 0.961797
CONST	ENDS
;	COMDAT __real@3fe62e4300000000
CONST	SEGMENT
__real@3fe62e4300000000 DQ 03fe62e4300000000r	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe62e42fefa39ef
CONST	SEGMENT
__real@3fe62e42fefa39ef DQ 03fe62e42fefa39efr	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe3333333333303
CONST	SEGMENT
__real@3fe3333333333303 DQ 03fe3333333333303r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdb6db6db6fabff
CONST	SEGMENT
__real@3fdb6db6db6fabff DQ 03fdb6db6db6fabffr	; 0.428571
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd55555518f264d
CONST	SEGMENT
__real@3fd55555518f264d DQ 03fd55555518f264dr	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd17460a91d4101
CONST	SEGMENT
__real@3fd17460a91d4101 DQ 03fd17460a91d4101r	; 0.272728
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcd864a93c9db65
CONST	SEGMENT
__real@3fcd864a93c9db65 DQ 03fcd864a93c9db65r	; 0.230661
CONST	ENDS
;	COMDAT __real@3fca7e284a454eef
CONST	SEGMENT
__real@3fca7e284a454eef DQ 03fca7e284a454eefr	; 0.206975
CONST	ENDS
;	COMDAT __real@3fc555555555553e
CONST	SEGMENT
__real@3fc555555555553e DQ 03fc555555555553er	; 0.166667
CONST	ENDS
;	COMDAT __real@3f66c16c16bebd93
CONST	SEGMENT
__real@3f66c16c16bebd93 DQ 03f66c16c16bebd93r	; 0.00277778
CONST	ENDS
;	COMDAT __real@3f11566aaf25de2c
CONST	SEGMENT
__real@3f11566aaf25de2c DQ 03f11566aaf25de2cr	; 6.61376e-005
CONST	ENDS
;	COMDAT __real@3ebbbd41c5d26bf1
CONST	SEGMENT
__real@3ebbbd41c5d26bf1 DQ 03ebbbd41c5d26bf1r	; 1.65339e-006
CONST	ENDS
;	COMDAT __real@3e66376972bea4d0
CONST	SEGMENT
__real@3e66376972bea4d0 DQ 03e66376972bea4d0r	; 4.13814e-008
CONST	ENDS
;	COMDAT __real@3e54ae0bf85ddf44
CONST	SEGMENT
__real@3e54ae0bf85ddf44 DQ 03e54ae0bf85ddf44r	; 1.92596e-008
CONST	ENDS
;	COMDAT __real@3e3e2fe0145b01f5
CONST	SEGMENT
__real@3e3e2fe0145b01f5 DQ 03e3e2fe0145b01f5r	; 7.02846e-009
CONST	ENDS
;	COMDAT __real@3e205c610ca86c39
CONST	SEGMENT
__real@3e205c610ca86c39 DQ 03e205c610ca86c39r	; 1.90465e-009
CONST	ENDS
;	COMDAT __real@3c971547652b82fe
CONST	SEGMENT
__real@3c971547652b82fe DQ 03c971547652b82fer	; 8.00857e-017
CONST	ENDS
;	COMDAT __real@01a56e1fc2f8f359
CONST	SEGMENT
__real@01a56e1fc2f8f359 DQ 001a56e1fc2f8f359r	; 1e-300
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbitl
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 8
___signbitl PROC					; COMDAT

; 271  : __CRT_INLINE int __cdecl __signbitl(long double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 272  : 	unsigned short stw;
; 273  : #if defined(_MSC_VER)
; 274  : 	_asm {
; 275  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 276  : 		fxam;

  00007	d9 e5		 fxam

; 277  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 278  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 279  : 	}
; 280  : #else
; 281  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 282  : #endif
; 283  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 284  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbitl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbitf
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 4
___signbitf PROC					; COMDAT

; 256  : __CRT_INLINE int __cdecl __signbitf(float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 257  : 	unsigned short stw;
; 258  : #if defined(_MSC_VER)
; 259  : 	_asm {
; 260  : 		fld [x];

  00004	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 261  : 		fxam;

  00007	d9 e5		 fxam

; 262  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 263  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 264  : 	}
; 265  : #else
; 266  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 267  : #endif
; 268  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 269  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbitf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbit
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 8
___signbit PROC						; COMDAT

; 241  : __CRT_INLINE int __cdecl __signbit(double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 242  : 	unsigned short stw;
; 243  : #if defined(_MSC_VER)
; 244  : 	_asm {
; 245  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 246  : 		fxam;

  00007	d9 e5		 fxam

; 247  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 248  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 249  : 	}
; 250  : #else
; 251  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 252  : #endif
; 253  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 254  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnanl
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 8
___isnanl PROC						; COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 212  : 	unsigned short sw;
; 213  : #if defined(_MSC_VER)
; 214  : 	_asm {
; 215  : 		fld [_x];

  00004	dd 45 08	 fld	 QWORD PTR __x$[ebp]

; 216  : 		fxam;

  00007	d9 e5		 fxam

; 217  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 218  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 219  : 	}
; 220  : #else
; 221  : 	__asm__ __volatile__("fxam;"
; 222  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 223  : #endif
; 224  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 225  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 226  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnanl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnanf
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 4
___isnanf PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 194  : 	unsigned short sw;
; 195  : #if defined(_MSC_VER)
; 196  : 	_asm {
; 197  : 		fld [_x];

  00004	d9 45 08	 fld	 DWORD PTR __x$[ebp]

; 198  : 		fxam;

  00007	d9 e5		 fxam

; 199  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 200  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 201  : 	}
; 202  : #else
; 203  : 	__asm__ __volatile__("fxam;"
; 204  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 205  : #endif
; 206  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 207  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 208  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnanf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnan
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 8
___isnan PROC						; COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 176  : 	unsigned short sw;
; 177  : #if defined(_MSC_VER)
; 178  : 	_asm {
; 179  : 		fld [_x];

  00004	dd 45 08	 fld	 QWORD PTR __x$[ebp]

; 180  : 		fxam;

  00007	d9 e5		 fxam

; 181  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 182  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 183  : 	}
; 184  : #else
; 185  : 	__asm__ __volatile__("fxam;"
; 186  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 187  : #endif
; 188  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 189  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 190  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnan ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassify
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 8
___fpclassify PROC					; COMDAT

; 125  : __CRT_INLINE int __cdecl __fpclassify(double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 126  : 	unsigned short sw;
; 127  : #if defined(_MSC_VER)
; 128  : 	_asm {
; 129  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 130  : 		fxam;

  00007	d9 e5		 fxam

; 131  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 132  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 133  : 	}
; 134  : #else
; 135  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 136  : #endif
; 137  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 138  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassify ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassifyf
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 4
___fpclassifyf PROC					; COMDAT

; 139  : __CRT_INLINE int __cdecl __fpclassifyf(float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 140  : 	unsigned short sw;
; 141  : #if defined(_MSC_VER)
; 142  : 	_asm {
; 143  : 		fld [x];

  00004	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 144  : 		fxam;

  00007	d9 e5		 fxam

; 145  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 146  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 147  : 	}
; 148  : #else
; 149  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 150  : #endif
; 151  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 152  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassifyf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassifyl
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 8
___fpclassifyl PROC					; COMDAT

; 111  : __CRT_INLINE int __cdecl __fpclassifyl(long double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 112  : 	unsigned short sw;
; 113  : #if defined(_MSC_VER)
; 114  : 	_asm {
; 115  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 116  : 		fxam;

  00007	d9 e5		 fxam

; 117  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 118  : 		mov word ptr [sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 119  : 	}
; 120  : #else
; 121  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 122  : #endif
; 123  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 124  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassifyl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\pow.c
;	COMDAT _pow
_TEXT	SEGMENT
_ss$1$ = -32						; size = 8
_p_h$ = -24						; size = 8
_s_h$1 = -24						; size = 8
_t_h$2 = -16						; size = 8
_ax$ = -16						; size = 8
_s$1$ = -8						; size = 8
_j$2$ = -4						; size = 4
_j$1$ = -4						; size = 4
_y1$ = 8						; size = 8
_t1$ = 8						; size = 8
_t$ = 8							; size = 8
_z$ = 8							; size = 8
_x$ = 8							; size = 8
_n$ = 12						; size = 4
_y$ = 16						; size = 8
_pow	PROC						; COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 104  : 	double z,ax,z_h,z_l,p_h,p_l;
; 105  : 	double y1,t1,t2,r,s,t,u,v,w;
; 106  : 	int i0,i1,i,j,k,yisint,n;
; 107  : 	int hx,hy,ix,iy;
; 108  : 	unsigned lx,ly;
; 109  : 
; 110  : 	i0 = ((*(int*)&one)>>29)^1; i1=1-i0;
; 111  : 	hx = __HI(x); lx = __LO(x);
; 112  : 	hy = __HI(y); ly = __LO(y);
; 113  : 	ix = hx&0x7fffffff;  iy = hy&0x7fffffff;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00006	83 ec 20	 sub	 esp, 32			; 00000020H
  00009	8b d1		 mov	 edx, ecx
  0000b	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00011	53		 push	 ebx

; 114  : 
; 115  :     /* y==zero: x**0 = 1 */
; 116  : 	if((iy|ly)==0) return one; 	

  00012	8b 5d 10	 mov	 ebx, DWORD PTR _y$[ebp]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 14	 mov	 edi, DWORD PTR _y$[ebp+4]
  0001a	8b f7		 mov	 esi, edi
  0001c	81 e6 ff ff ff
	7f		 and	 esi, 2147483647		; 7fffffffH
  00022	8b c6		 mov	 eax, esi
  00024	0b c3		 or	 eax, ebx
  00026	75 09		 jne	 SHORT $LN60@pow
  00028	d9 e8		 fld1
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx

; 306  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN60@pow:

; 117  : 
; 118  :     /* +-NaN return x+y */
; 119  : 	if(ix > 0x7ff00000 || ((ix==0x7ff00000)&&(lx!=0)) ||
; 120  : 	   iy > 0x7ff00000 || ((iy==0x7ff00000)&&(ly!=0))) 

  00031	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  00037	0f 8f 9a 06 00
	00		 jg	 $LN58@pow
  0003d	75 0a		 jne	 SHORT $LN57@pow
  0003f	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00043	0f 85 8e 06 00
	00		 jne	 $LN58@pow
$LN57@pow:
  00049	81 fe 00 00 f0
	7f		 cmp	 esi, 2146435072		; 7ff00000H
  0004f	0f 8f 82 06 00
	00		 jg	 $LN58@pow
  00055	75 08		 jne	 SHORT $LN59@pow
  00057	85 db		 test	 ebx, ebx
  00059	0f 85 78 06 00
	00		 jne	 $LN58@pow
$LN59@pow:

; 122  : 
; 123  :     /* determine if y is an odd int when x < 0
; 124  :      * yisint = 0	... y is not an integer
; 125  :      * yisint = 1	... y is an odd int
; 126  :      * yisint = 2	... y is an even int
; 127  :      */
; 128  : 	yisint  = 0;

  0005f	33 db		 xor	 ebx, ebx

; 129  : 	if(hx<0) {	

  00061	85 c9		 test	 ecx, ecx
  00063	79 0d		 jns	 SHORT $LN48@pow

; 130  : 	    if(iy>=0x43400000) yisint = 2; /* even integer y */

  00065	81 fe 00 00 40
	43		 cmp	 esi, 1128267776		; 43400000H
  0006b	7c 32		 jl	 SHORT $LN55@pow
  0006d	bb 02 00 00 00	 mov	 ebx, 2
$LN48@pow:

; 139  : 		}
; 140  : 	    }		
; 141  : 	} 
; 142  : 
; 143  :     /* special value of y */
; 144  : 	if(ly==0) { 	

  00072	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  00076	0f 85 13 01 00
	00		 jne	 $LN77@pow
$LN75@pow:

; 145  : 	    if (iy==0x7ff00000) {	/* y is +-inf */

  0007c	81 fe 00 00 f0
	7f		 cmp	 esi, 2146435072		; 7ff00000H
  00082	0f 85 b3 00 00
	00		 jne	 $LN42@pow

; 146  : 	        if(((ix-0x3ff00000)|lx)==0)

  00088	8d 82 00 00 10
	c0		 lea	 eax, DWORD PTR [edx-1072693248]
  0008e	0b 45 08	 or	 eax, DWORD PTR _x$[ebp]
  00091	75 79		 jne	 SHORT $LN45@pow

; 147  : 		    return  y - y;	/* inf**+-1 is NaN */

  00093	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	dc e8		 fsub	 ST(0), ST(0)
  0009a	5b		 pop	 ebx

; 306  : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN55@pow:

; 131  : 	    else if(iy>=0x3ff00000) {

  0009f	81 fe 00 00 f0
	3f		 cmp	 esi, 1072693248		; 3ff00000H
  000a5	7c cb		 jl	 SHORT $LN48@pow

; 132  : 		k = (iy>>20)-0x3ff;	   /* exponent */

  000a7	8b c6		 mov	 eax, esi
  000a9	c1 f8 14	 sar	 eax, 20			; 00000014H
  000ac	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH

; 133  : 		if(k>20) {

  000b1	83 f8 14	 cmp	 eax, 20			; 00000014H
  000b4	7e 25		 jle	 SHORT $LN52@pow

; 134  : 		    j = ly>>(52-k);

  000b6	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  000bb	2b c8		 sub	 ecx, eax
  000bd	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  000c0	d3 e8		 shr	 eax, cl
  000c2	89 45 fc	 mov	 DWORD PTR _j$1$[ebp], eax

; 135  : 		    if((j<<(52-k))== (int)ly) yisint = 2-(j&1);

  000c5	d3 e0		 shl	 eax, cl
  000c7	3b 45 10	 cmp	 eax, DWORD PTR _y$[ebp]
  000ca	75 a6		 jne	 SHORT $LN48@pow
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _j$1$[ebp]
  000cf	bb 02 00 00 00	 mov	 ebx, 2
  000d4	83 e0 01	 and	 eax, 1
  000d7	2b d8		 sub	 ebx, eax

; 136  : 		} else if(ly==0) {

  000d9	eb 97		 jmp	 SHORT $LN48@pow
$LN52@pow:
  000db	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  000de	85 c9		 test	 ecx, ecx
  000e0	0f 85 a9 00 00
	00		 jne	 $LN77@pow

; 137  : 		    j = iy>>(20-k);

  000e6	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000eb	2b c8		 sub	 ecx, eax
  000ed	8b c6		 mov	 eax, esi
  000ef	d3 f8		 sar	 eax, cl
  000f1	89 45 fc	 mov	 DWORD PTR _j$2$[ebp], eax

; 138  : 		    if((j<<(20-k))==iy) yisint = 2-(j&1);

  000f4	d3 e0		 shl	 eax, cl
  000f6	3b c6		 cmp	 eax, esi
  000f8	75 82		 jne	 SHORT $LN75@pow
  000fa	8b 45 fc	 mov	 eax, DWORD PTR _j$2$[ebp]
  000fd	bb 02 00 00 00	 mov	 ebx, 2
  00102	83 e0 01	 and	 eax, 1
  00105	2b d8		 sub	 ebx, eax

; 139  : 		}
; 140  : 	    }		
; 141  : 	} 
; 142  : 
; 143  :     /* special value of y */
; 144  : 	if(ly==0) { 	

  00107	e9 70 ff ff ff	 jmp	 $LN75@pow
$LN45@pow:

; 148  : 	        else if (ix >= 0x3ff00000)/* (|x|>1)**+-inf = inf,0 */

  0010c	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  00112	7c 17		 jl	 SHORT $LN43@pow

; 149  : 		    return (hy>=0)? y: zero;

  00114	85 ff		 test	 edi, edi
  00116	78 0a		 js	 SHORT $LN63@pow
  00118	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx

; 306  : }

  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN63@pow:

; 149  : 		    return (hy>=0)? y: zero;

  00122	d9 ee		 fldz
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx

; 306  : }

  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
$LN43@pow:

; 150  : 	        else			/* (|x|<1)**-,+inf = inf,0 */
; 151  : 		    return (hy<0)?-y: zero;

  0012b	85 ff		 test	 edi, edi
  0012d	79 f3		 jns	 SHORT $LN63@pow
  0012f	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	d9 e0		 fchs
  00136	5b		 pop	 ebx

; 306  : }

  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
$LN42@pow:

; 152  : 	    } 
; 153  : 	    if(iy==0x3ff00000) {	/* y is  +-1 */

  0013b	81 fe 00 00 f0
	3f		 cmp	 esi, 1072693248		; 3ff00000H
  00141	75 1a		 jne	 SHORT $LN39@pow

; 154  : 		if(hy<0) return one/x; else return x;

  00143	85 ff		 test	 edi, edi
  00145	79 0c		 jns	 SHORT $LN40@pow
  00147	d9 e8		 fld1
  00149	dc 75 08	 fdiv	 QWORD PTR _x$[ebp]
  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx

; 306  : }

  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
$LN40@pow:

; 154  : 		if(hy<0) return one/x; else return x;

  00153	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx

; 306  : }

  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
$LN39@pow:

; 155  : 	    }
; 156  : 	    if(hy==0x40000000) return x*x; /* y is  2 */

  0015d	81 ff 00 00 00
	40		 cmp	 edi, 1073741824		; 40000000H
  00163	75 0c		 jne	 SHORT $LN38@pow
  00165	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	dc c8		 fmul	 ST(0), ST(0)
  0016c	5b		 pop	 ebx

; 306  : }

  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
$LN38@pow:

; 157  : 	    if(hy==0x3fe00000) {	/* y is  0.5 */
; 158  : 		if(hx>=0)	/* x >= +0 */

  00171	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00174	81 ff 00 00 e0
	3f		 cmp	 edi, 1071644672		; 3fe00000H
  0017a	75 16		 jne	 SHORT $LN36@pow
  0017c	85 c9		 test	 ecx, ecx
  0017e	78 12		 js	 SHORT $LN36@pow

; 159  : 		return sqrt(x);	

  00180	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00183	e8 00 00 00 00	 call	 __CIsqrt
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	5b		 pop	 ebx

; 306  : }

  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c3		 ret	 0
$LN77@pow:
  0018f	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
$LN36@pow:

; 160  : 	    }
; 161  : 	}
; 162  : 
; 163  : 	ax   = fabs(x);
; 164  :     /* special value of x */
; 165  : 	if(lx==0) {

  00192	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00196	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00199	d9 c0		 fld	 ST(0)
  0019b	d9 e1		 fabs
  0019d	dd 55 f0	 fst	 QWORD PTR _ax$[ebp]
  001a0	75 4d		 jne	 SHORT $LN34@pow

; 166  : 	    if(ix==0x7ff00000||ix==0||ix==0x3ff00000){

  001a2	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  001a8	74 0c		 je	 SHORT $LN90@pow
  001aa	85 d2		 test	 edx, edx
  001ac	74 08		 je	 SHORT $LN90@pow
  001ae	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  001b4	75 39		 jne	 SHORT $LN34@pow
$LN90@pow:
  001b6	dd d9		 fstp	 ST(1)

; 167  : 		z = ax;			/*x is +-0,+-inf,+-1*/
; 168  : 		if(hy<0) z = one/z;	/* z = (1/|x|) */

  001b8	85 ff		 test	 edi, edi
  001ba	79 04		 jns	 SHORT $LN32@pow
  001bc	d9 e8		 fld1
  001be	de f1		 fdivrp	 ST(1), ST(0)
$LN32@pow:

; 169  : 		if(hx<0) {

  001c0	85 c9		 test	 ecx, ecx
  001c2	0f 89 15 05 00
	00		 jns	 $LN61@pow

; 170  : 		    if(((ix-0x3ff00000)|yisint)==0) {

  001c8	8d 82 00 00 10
	c0		 lea	 eax, DWORD PTR [edx-1072693248]
  001ce	0b c3		 or	 eax, ebx
  001d0	75 0b		 jne	 SHORT $LN30@pow

; 171  : 			z = (z-z)/(z-z); /* (-1)**non-int is NaN */

  001d2	dc e0		 fsubr	 ST(0), ST(0)
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	dc f8		 fdiv	 ST(0), ST(0)

; 306  : }

  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
$LN30@pow:

; 172  : 		    } else if(yisint==1) 

  001dd	83 fb 01	 cmp	 ebx, 1
  001e0	0f 85 f7 04 00
	00		 jne	 $LN61@pow

; 173  : 			z = -z;		/* (x<0)**odd = -(|x|**odd) */

  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	d9 e0		 fchs
  001ea	5b		 pop	 ebx

; 306  : }

  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
$LN34@pow:

; 174  : 		}
; 175  : 		return z;
; 176  : 	    }
; 177  : 	}
; 178  :     
; 179  : 	n = (hx>>31)+1;

  001ef	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  001f2	41		 inc	 ecx

; 180  : 
; 181  :     /* (x<0)**(non-int) is NaN */
; 182  : 	if((n|yisint)==0) return (x-x)/(x-x);

  001f3	8b c1		 mov	 eax, ecx
  001f5	0b c3		 or	 eax, ebx
  001f7	75 0d		 jne	 SHORT $LN103@pow
  001f9	dd d8		 fstp	 ST(0)
  001fb	dc e8		 fsub	 ST(0), ST(0)
  001fd	5f		 pop	 edi
  001fe	5e		 pop	 esi
  001ff	5b		 pop	 ebx
  00200	dc f8		 fdiv	 ST(0), ST(0)

; 306  : }

  00202	8b e5		 mov	 esp, ebp
  00204	5d		 pop	 ebp
  00205	c3		 ret	 0
$LN103@pow:
  00206	dd d9		 fstp	 ST(1)

; 183  : 
; 184  : 	s = one; /* s (sign of result -ve**odd) = -1 else = 1 */
; 185  : 	if((n|(yisint-1))==0) s = -one;/* (-ve)**(odd int) */

  00208	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0020b	0b c1		 or	 eax, ecx
  0020d	d9 e8		 fld1
  0020f	d9 c0		 fld	 ST(0)
  00211	dd 55 f8	 fst	 QWORD PTR _s$1$[ebp]
  00214	75 0b		 jne	 SHORT $LN26@pow
  00216	dd d8		 fstp	 ST(0)
  00218	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000
  0021e	dd 55 f8	 fst	 QWORD PTR _s$1$[ebp]
$LN26@pow:

; 186  : 
; 187  :     /* |y| is huge */
; 188  : 	if(iy>0x41e00000) { /* if |y| > 2**31 */

  00221	d9 ee		 fldz
  00223	81 fe 00 00 e0
	41		 cmp	 esi, 1105199104		; 41e00000H
  00229	0f 8e e6 00 00
	00		 jle	 $LN109@pow

; 189  : 	    if(iy>0x43f00000){	/* if |y| > 2**64, must o/uflow */

  0022f	81 fe 00 00 f0
	43		 cmp	 esi, 1139802112		; 43f00000H
  00235	7e 3e		 jle	 SHORT $LN22@pow

; 190  : 		if(ix<=0x3fefffff) return (hy<0)? huge*huge:tiny*tiny;

  00237	dd d9		 fstp	 ST(1)
  00239	dd da		 fstp	 ST(2)
  0023b	dd d8		 fstp	 ST(0)
  0023d	dd d8		 fstp	 ST(0)
  0023f	81 fa ff ff ef
	3f		 cmp	 edx, 1072693247		; 3fefffffH
  00245	7f 17		 jg	 SHORT $LN23@pow
  00247	85 ff		 test	 edi, edi
  00249	0f 89 d3 fe ff
	ff		 jns	 $LN63@pow
  0024f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	dc c8		 fmul	 ST(0), ST(0)
  00259	5b		 pop	 ebx

; 306  : }

  0025a	8b e5		 mov	 esp, ebp
  0025c	5d		 pop	 ebp
  0025d	c3		 ret	 0
$LN23@pow:

; 191  : 		if(ix>=0x3ff00000) return (hy>0)? huge*huge:tiny*tiny;

  0025e	85 ff		 test	 edi, edi
  00260	0f 8e bc fe ff
	ff		 jle	 $LN63@pow
  00266	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  0026c	5f		 pop	 edi
  0026d	5e		 pop	 esi
  0026e	dc c8		 fmul	 ST(0), ST(0)
  00270	5b		 pop	 ebx

; 306  : }

  00271	8b e5		 mov	 esp, ebp
  00273	5d		 pop	 ebp
  00274	c3		 ret	 0
$LN22@pow:

; 192  : 	    }
; 193  : 	/* over/underflow if x is not close to one */
; 194  : 	    if(ix<0x3fefffff) return (hy<0)? s*huge*huge:s*tiny*tiny;

  00275	81 fa ff ff ef
	3f		 cmp	 edx, 1072693247		; 3fefffffH
  0027b	7d 1b		 jge	 SHORT $LN21@pow
  0027d	dd db		 fstp	 ST(3)
  0027f	dd d9		 fstp	 ST(1)
  00281	dd d9		 fstp	 ST(1)
  00283	85 ff		 test	 edi, edi
  00285	78 23		 js	 SHORT $LN173@pow
$LN71@pow:
  00287	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@01a56e1fc2f8f359
  0028d	dc c9		 fmul	 ST(1), ST(0)
  0028f	5f		 pop	 edi
  00290	5e		 pop	 esi
  00291	5b		 pop	 ebx
  00292	de c9		 fmulp	 ST(1), ST(0)

; 306  : }

  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c3		 ret	 0
$LN21@pow:

; 195  : 	    if(ix>0x3ff00000) return (hy>0)? s*huge*huge:s*tiny*tiny;

  00298	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  0029e	7e 1b		 jle	 SHORT $LN122@pow
  002a0	dd db		 fstp	 ST(3)
  002a2	dd d9		 fstp	 ST(1)
  002a4	dd d9		 fstp	 ST(1)
  002a6	85 ff		 test	 edi, edi
  002a8	7e dd		 jle	 SHORT $LN71@pow
$LN173@pow:
  002aa	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  002b0	dc c9		 fmul	 ST(1), ST(0)
  002b2	5f		 pop	 edi
  002b3	5e		 pop	 esi
  002b4	5b		 pop	 ebx
  002b5	de c9		 fmulp	 ST(1), ST(0)

; 306  : }

  002b7	8b e5		 mov	 esp, ebp
  002b9	5d		 pop	 ebp
  002ba	c3		 ret	 0
$LN122@pow:
  002bb	dd d9		 fstp	 ST(1)

; 196  : 	/* now |1-x| is tiny <= 2**-20, suffice to compute 
; 197  : 	   log(x) by x-x^2/2+x^3/3-x^4/4 */
; 198  : 	    t = ax-one;		/* t has 20 trailing zeros */

  002bd	d9 ca		 fxch	 ST(2)
  002bf	d8 e1		 fsub	 ST(0), ST(1)

; 199  : 	    w = (t*t)*(0.5-t*(0.3333333333333333333333-t*0.25));
; 200  : 	    u = ivln2_h*t;	/* ivln2_h has 21 sig. bits */

  002c1	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3ff7154760000000
  002c7	d8 c9		 fmul	 ST(0), ST(1)

; 201  : 	    v = t*ivln2_l-w*ivln2;

  002c9	d9 c1		 fld	 ST(1)
  002cb	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e54ae0bf85ddf44
  002d1	d9 c2		 fld	 ST(2)
  002d3	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fd0000000000000
  002d9	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fd5555555555555
  002df	d8 cb		 fmul	 ST(0), ST(3)
  002e1	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe0000000000000
  002e7	d9 cb		 fxch	 ST(3)
  002e9	dc c8		 fmul	 ST(0), ST(0)
  002eb	de cb		 fmulp	 ST(3), ST(0)
  002ed	d9 ca		 fxch	 ST(2)
  002ef	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff71547652b82fe
  002f5	de ea		 fsubp	 ST(2), ST(0)

; 202  : 	    t1 = u+v;

  002f7	d9 c1		 fld	 ST(1)
  002f9	d8 c1		 fadd	 ST(0), ST(1)
  002fb	dd 5d 08	 fstp	 QWORD PTR _t1$[ebp]

; 203  : 	    __LO(t1) = 0;

  002fe	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _t1$[ebp], 0

; 204  : 	    t2 = v-(t1-u);

  00305	dd 45 08	 fld	 QWORD PTR _t1$[ebp]
  00308	d9 c0		 fld	 ST(0)
  0030a	de e2		 fsubrp	 ST(2), ST(0)
  0030c	d9 ca		 fxch	 ST(2)
  0030e	de e1		 fsubrp	 ST(1), ST(0)

; 205  : 	} else {

  00310	e9 c0 01 00 00	 jmp	 $LN19@pow
$LN109@pow:

; 206  : 	    double ss,s2,s_h,s_l,t_h,t_l;
; 207  : 	    n = 0;

  00315	33 c9		 xor	 ecx, ecx
  00317	dd d9		 fstp	 ST(1)

; 208  : 	/* take care subnormal number */
; 209  : 	    if(ix<0x00100000)

  00319	81 fa 00 00 10
	00		 cmp	 edx, 1048576		; 00100000H
  0031f	7d 15		 jge	 SHORT $LN157@pow

; 210  : 		{ax *= two53; n -= 53; ix = __HI(ax); }

  00321	d9 ca		 fxch	 ST(2)
  00323	b9 cb ff ff ff	 mov	 ecx, -53		; ffffffcbH
  00328	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4340000000000000
  0032e	dd 5d f0	 fstp	 QWORD PTR _ax$[ebp]
  00331	8b 55 f4	 mov	 edx, DWORD PTR _ax$[ebp+4]
  00334	eb 02		 jmp	 SHORT $LN18@pow
$LN157@pow:
  00336	dd da		 fstp	 ST(2)
$LN18@pow:

; 211  : 	    n  += ((ix)>>20)-0x3ff;

  00338	8b c2		 mov	 eax, edx
  0033a	81 c1 01 fc ff
	ff		 add	 ecx, -1023		; fffffc01H
  00340	c1 f8 14	 sar	 eax, 20			; 00000014H

; 212  : 	    j  = ix&0x000fffff;

  00343	81 e2 ff ff 0f
	00		 and	 edx, 1048575		; 000fffffH
  00349	03 c1		 add	 eax, ecx

; 213  : 	/* determine interval */
; 214  : 	    ix = j|0x3ff00000;		/* normalize ix */

  0034b	8b ca		 mov	 ecx, edx
  0034d	81 c9 00 00 f0
	3f		 or	 ecx, 1072693248		; 3ff00000H
  00353	89 45 0c	 mov	 DWORD PTR _n$[ebp], eax

; 215  : 	    if(j<=0x3988E) k=0;		/* |x|<sqrt(3/2) */

  00356	81 fa 8e 98 03
	00		 cmp	 edx, 235662		; 0003988eH
  0035c	7f 04		 jg	 SHORT $LN17@pow
  0035e	33 d2		 xor	 edx, edx
  00360	eb 1b		 jmp	 SHORT $LN14@pow
$LN17@pow:

; 216  : 	    else if(j<0xBB67A) k=1;	/* |x|<sqrt(3)   */

  00362	81 fa 7a b6 0b
	00		 cmp	 edx, 767610		; 000bb67aH
  00368	7d 07		 jge	 SHORT $LN15@pow
  0036a	ba 01 00 00 00	 mov	 edx, 1
  0036f	eb 0c		 jmp	 SHORT $LN14@pow
$LN15@pow:

; 217  : 	    else {k=0;n+=1;ix -= 0x00100000;}

  00371	40		 inc	 eax
  00372	33 d2		 xor	 edx, edx
  00374	89 45 0c	 mov	 DWORD PTR _n$[ebp], eax
  00377	81 e9 00 00 10
	00		 sub	 ecx, 1048576		; 00100000H
$LN14@pow:

; 218  : 	    __HI(ax) = ix;

  0037d	89 4d f4	 mov	 DWORD PTR _ax$[ebp+4], ecx

; 219  : 
; 220  : 	/* compute ss = s_h+s_l = (x-1)/(x+1) or (x-1.5)/(x+1.5) */
; 221  : 	    u = ax-bp[k];		/* bp[0]=1.0, bp[1]=1.5 */
; 222  : 	    v = one/(ax+bp[k]);
; 223  : 	    ss = u*v;
; 224  : 	    s_h = ss;
; 225  : 	    __LO(s_h) = 0;
; 226  : 	/* t_h=ax+bp[k] High */
; 227  : 	    t_h = zero;
; 228  : 	    __HI(t_h)=((ix>>1)|0x20000000)+0x00080000+(k<<18); 

  00380	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00383	dd 45 f0	 fld	 QWORD PTR _ax$[ebp]
  00386	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  0038c	d9 c0		 fld	 ST(0)
  0038e	d1 f9		 sar	 ecx, 1
  00390	dc 24 d5 00 00
	00 00		 fsub	 QWORD PTR _bp[edx*8]
  00397	c1 e0 12	 shl	 eax, 18			; 00000012H
  0039a	03 c8		 add	 ecx, eax
  0039c	d9 c1		 fld	 ST(1)
  0039e	dc 04 d5 00 00
	00 00		 fadd	 QWORD PTR _bp[edx*8]
  003a5	de fb		 fdivp	 ST(3), ST(0)
  003a7	d9 c2		 fld	 ST(2)
  003a9	d8 c9		 fmul	 ST(0), ST(1)
  003ab	dd 55 e0	 fst	 QWORD PTR _ss$1$[ebp]
  003ae	dd 55 e8	 fst	 QWORD PTR _s_h$1[ebp]
  003b1	d9 cc		 fxch	 ST(4)
  003b3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _s_h$1[ebp], 0
  003ba	dd 5d f0	 fstp	 QWORD PTR _t_h$2[ebp]
  003bd	89 4d f4	 mov	 DWORD PTR _t_h$2[ebp+4], ecx

; 229  : 	    t_l = ax - (t_h-bp[k]);
; 230  : 	    s_l = v*((u-s_h*t_h)-s_h*t_l);

  003c0	dd 45 f0	 fld	 QWORD PTR _t_h$2[ebp]
  003c3	d9 c0		 fld	 ST(0)
  003c5	dd 45 e8	 fld	 QWORD PTR _s_h$1[ebp]
  003c8	dc c9		 fmul	 ST(1), ST(0)
  003ca	d9 cb		 fxch	 ST(3)
  003cc	de e1		 fsubrp	 ST(1), ST(0)
  003ce	d9 c9		 fxch	 ST(1)
  003d0	dc 24 d5 00 00
	00 00		 fsub	 QWORD PTR _bp[edx*8]
  003d7	de eb		 fsubp	 ST(3), ST(0)
  003d9	d9 ca		 fxch	 ST(2)
  003db	d8 c9		 fmul	 ST(0), ST(1)
  003dd	de ea		 fsubp	 ST(2), ST(0)
  003df	d9 c9		 fxch	 ST(1)
  003e1	de ca		 fmulp	 ST(2), ST(0)

; 231  : 	/* compute log(ax) */
; 232  : 	    s2 = ss*ss;

  003e3	d9 c2		 fld	 ST(2)
  003e5	d8 cb		 fmul	 ST(0), ST(3)

; 233  : 	    r = s2*s2*(L1+s2*(L2+s2*(L3+s2*(L4+s2*(L5+s2*L6)))));

  003e7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fca7e284a454eef
  003ed	d8 c9		 fmul	 ST(0), ST(1)
  003ef	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fcd864a93c9db65
  003f5	d8 c9		 fmul	 ST(0), ST(1)
  003f7	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd17460a91d4101
  003fd	d8 c9		 fmul	 ST(0), ST(1)
  003ff	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd55555518f264d
  00405	d8 c9		 fmul	 ST(0), ST(1)
  00407	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fdb6db6db6fabff
  0040d	d8 c9		 fmul	 ST(0), ST(1)
  0040f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe3333333333303
  00415	d9 c9		 fxch	 ST(1)
  00417	dc c8		 fmul	 ST(0), ST(0)
  00419	de c9		 fmulp	 ST(1), ST(0)

; 234  : 	    r += s_l*(s_h+ss);

  0041b	d9 c1		 fld	 ST(1)
  0041d	de c4		 faddp	 ST(4), ST(0)
  0041f	d9 cb		 fxch	 ST(3)
  00421	d8 ca		 fmul	 ST(0), ST(2)
  00423	de c3		 faddp	 ST(3), ST(0)

; 235  : 	    s2  = s_h*s_h;

  00425	d9 c0		 fld	 ST(0)
  00427	d8 c9		 fmul	 ST(0), ST(1)

; 236  : 	    t_h = 3.0+s2+r;

  00429	d9 c0		 fld	 ST(0)
  0042b	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4008000000000000
  00431	dc c1		 fadd	 ST(1), ST(0)
  00433	d9 c9		 fxch	 ST(1)
  00435	d8 c5		 fadd	 ST(0), ST(5)
  00437	dd 5d f0	 fstp	 QWORD PTR _t_h$2[ebp]

; 237  : 	    __LO(t_h) = 0;

  0043a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _t_h$2[ebp], 0

; 238  : 	    t_l = r-((t_h-3.0)-s2);
; 239  : 	/* u+v = ss*(1+...) */
; 240  : 	    u = s_h*t_h;

  00441	dd 45 f0	 fld	 QWORD PTR _t_h$2[ebp]
  00444	d9 c0		 fld	 ST(0)
  00446	de cc		 fmulp	 ST(4), ST(0)
  00448	d9 c0		 fld	 ST(0)
  0044a	de e2		 fsubrp	 ST(2), ST(0)
  0044c	d9 c9		 fxch	 ST(1)
  0044e	de e2		 fsubrp	 ST(2), ST(0)
  00450	d9 cc		 fxch	 ST(4)
  00452	de e1		 fsubrp	 ST(1), ST(0)

; 241  : 	    v = s_l*t_h+t_l*ss;

  00454	dc 4d e0	 fmul	 QWORD PTR _ss$1$[ebp]
  00457	d9 ca		 fxch	 ST(2)
  00459	de cb		 fmulp	 ST(3), ST(0)
  0045b	d9 c9		 fxch	 ST(1)
  0045d	de c2		 faddp	 ST(2), ST(0)

; 242  : 	/* 2/(3log2)*(ss+...) */
; 243  : 	    p_h = u+v;

  0045f	d9 c1		 fld	 ST(1)
  00461	d8 c1		 fadd	 ST(0), ST(1)
  00463	dd 5d e8	 fstp	 QWORD PTR _p_h$[ebp]

; 244  : 	    __LO(p_h) = 0;

  00466	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _p_h$[ebp], 0

; 245  : 	    p_l = v-(p_h-u);
; 246  : 	    z_h = cp_h*p_h;		/* cp_h+cp_l = 2/(3*log2) */

  0046d	dd 45 e8	 fld	 QWORD PTR _p_h$[ebp]
  00470	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feec709e0000000
  00476	d8 c9		 fmul	 ST(0), ST(1)
  00478	d9 c1		 fld	 ST(1)
  0047a	de e3		 fsubrp	 ST(3), ST(0)
  0047c	d9 cb		 fxch	 ST(3)
  0047e	de e2		 fsubrp	 ST(2), ST(0)

; 247  : 	    z_l = cp_l*p_h+p_l*cp+dp_l[k];

  00480	d9 c9		 fxch	 ST(1)
  00482	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3feec709dc3a03fd
  00488	d9 c9		 fxch	 ST(1)
  0048a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e3e2fe0145b01f5
  00490	de e9		 fsubp	 ST(1), ST(0)
  00492	dc 04 d5 00 00
	00 00		 fadd	 QWORD PTR _dp_l[edx*8]

; 248  : 	/* log2(ax) = (ss+..)*2/(3*log2) = n + dp_h + z_h + z_l */
; 249  : 	    t = (double)n;

  00499	db 45 0c	 fild	 DWORD PTR _n$[ebp]

; 250  : 	    t1 = (((z_h+z_l)+dp_h[k])+t);

  0049c	d9 c1		 fld	 ST(1)
  0049e	d8 c3		 fadd	 ST(0), ST(3)
  004a0	dc 04 d5 00 00
	00 00		 fadd	 QWORD PTR _dp_h[edx*8]
  004a7	d8 c1		 fadd	 ST(0), ST(1)
  004a9	dd 5d 08	 fstp	 QWORD PTR _t1$[ebp]

; 251  : 	    __LO(t1) = 0;

  004ac	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _t1$[ebp], 0

; 252  : 	    t2 = z_l-(((t1-t)-dp_h[k])-z_h);

  004b3	dd 45 08	 fld	 QWORD PTR _t1$[ebp]
  004b6	d9 c0		 fld	 ST(0)
  004b8	de e2		 fsubrp	 ST(2), ST(0)
  004ba	d9 c9		 fxch	 ST(1)
  004bc	dc 24 d5 00 00
	00 00		 fsub	 QWORD PTR _dp_h[edx*8]
  004c3	de e3		 fsubrp	 ST(3), ST(0)
  004c5	d9 c9		 fxch	 ST(1)
  004c7	de e2		 fsubrp	 ST(2), ST(0)
  004c9	d9 e8		 fld1
  004cb	d9 ee		 fldz
  004cd	d9 cb		 fxch	 ST(3)
  004cf	d9 c9		 fxch	 ST(1)
  004d1	d9 ca		 fxch	 ST(2)
  004d3	d9 c9		 fxch	 ST(1)
$LN19@pow:

; 253  : 	}
; 254  : 
; 255  :     /* split up y into y1+y2 and compute (y1+y2)*(t1+t2) */
; 256  : 	y1  = y;

  004d5	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  004d8	dd 55 08	 fst	 QWORD PTR _y1$[ebp]

; 257  : 	__LO(y1) = 0;
; 258  : 	p_l = (y-y1)*t1+y*t2;

  004db	d9 c0		 fld	 ST(0)
  004dd	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _y1$[ebp], 0
  004e4	dd 45 08	 fld	 QWORD PTR _y1$[ebp]
  004e7	dc e9		 fsub	 ST(1), ST(0)
  004e9	d9 c9		 fxch	 ST(1)
  004eb	d8 cc		 fmul	 ST(0), ST(4)
  004ed	d9 cb		 fxch	 ST(3)
  004ef	de ca		 fmulp	 ST(2), ST(0)
  004f1	d9 ca		 fxch	 ST(2)
  004f3	de c1		 faddp	 ST(1), ST(0)

; 259  : 	p_h = y1*t1;

  004f5	d9 c9		 fxch	 ST(1)
  004f7	de ca		 fmulp	 ST(2), ST(0)

; 260  : 	z = p_l+p_h;

  004f9	d9 c0		 fld	 ST(0)
  004fb	d8 c2		 fadd	 ST(0), ST(2)
  004fd	dd 55 08	 fst	 QWORD PTR _z$[ebp]

; 261  : 	j = __HI(z);
; 262  : 	i = __LO(z);
; 263  : 	if (j>=0x40900000) {				/* z >= 1024 */

  00500	8b 7d 0c	 mov	 edi, DWORD PTR _z$[ebp+4]
  00503	81 ff 00 00 90
	40		 cmp	 edi, 1083179008		; 40900000H
  00509	7c 3f		 jl	 SHORT $LN13@pow

; 264  : 	    if(((j-0x40900000)|i)!=0)			/* if z > 1024 */

  0050b	8d 87 00 00 70
	bf		 lea	 eax, DWORD PTR [edi-1083179008]
  00511	0b 45 08	 or	 eax, DWORD PTR _z$[ebp]
  00514	74 1e		 je	 SHORT $LN12@pow
  00516	dd d8		 fstp	 ST(0)
$LN171@pow:
  00518	dd d9		 fstp	 ST(1)
  0051a	dd d8		 fstp	 ST(0)
  0051c	dd d8		 fstp	 ST(0)
  0051e	dd d8		 fstp	 ST(0)

; 265  : 		return s*huge*huge;			/* overflow */

  00520	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  00526	dd 45 f8	 fld	 QWORD PTR _s$1$[ebp]
  00529	d8 c9		 fmul	 ST(0), ST(1)
  0052b	5f		 pop	 edi
  0052c	5e		 pop	 esi
  0052d	5b		 pop	 ebx
  0052e	de c9		 fmulp	 ST(1), ST(0)

; 306  : }

  00530	8b e5		 mov	 esp, ebp
  00532	5d		 pop	 ebp
  00533	c3		 ret	 0
$LN12@pow:

; 266  : 	    else {
; 267  : 		if(p_l+ovt>z-p_h) return s*huge*huge;	/* overflow */

  00534	d9 c1		 fld	 ST(1)
  00536	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3c971547652b82fe
  0053c	d9 c9		 fxch	 ST(1)
  0053e	d8 e3		 fsub	 ST(0), ST(3)
  00540	d9 c9		 fxch	 ST(1)
  00542	df f1		 fcomip	 ST(1)
  00544	dd d8		 fstp	 ST(0)
  00546	76 5d		 jbe	 SHORT $LN5@pow
  00548	eb ce		 jmp	 SHORT $LN171@pow
$LN13@pow:

; 268  : 	    }
; 269  : 	} else if((j&0x7fffffff)>=0x4090cc00 ) {	/* z <= -1075 */

  0054a	8b c7		 mov	 eax, edi
  0054c	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00551	3d 00 cc 90 40	 cmp	 eax, 1083231232		; 4090cc00H
  00556	7c 4b		 jl	 SHORT $LN149@pow

; 270  : 	    if(((j-0xc090cc00)|i)!=0) 		/* z < -1075 */

  00558	8d 87 00 34 6f
	3f		 lea	 eax, DWORD PTR [edi+1064252416]
  0055e	0b 45 08	 or	 eax, DWORD PTR _z$[ebp]
  00561	74 1e		 je	 SHORT $LN7@pow

; 271  : 		return s*tiny*tiny;		/* underflow */

  00563	dd d8		 fstp	 ST(0)
  00565	dd d9		 fstp	 ST(1)
  00567	dd d8		 fstp	 ST(0)
  00569	dd d8		 fstp	 ST(0)
  0056b	dd d8		 fstp	 ST(0)
  0056d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@01a56e1fc2f8f359
  00573	dd 45 f8	 fld	 QWORD PTR _s$1$[ebp]
  00576	d8 c9		 fmul	 ST(0), ST(1)
  00578	5f		 pop	 edi
  00579	5e		 pop	 esi
  0057a	5b		 pop	 ebx
  0057b	de c9		 fmulp	 ST(1), ST(0)

; 306  : }

  0057d	8b e5		 mov	 esp, ebp
  0057f	5d		 pop	 ebp
  00580	c3		 ret	 0
$LN7@pow:

; 272  : 	    else {
; 273  : 		if(p_l<=z-p_h) return s*tiny*tiny;	/* underflow */

  00581	d8 e2		 fsub	 ST(0), ST(2)
  00583	df f1		 fcomip	 ST(1)
  00585	72 1e		 jb	 SHORT $LN5@pow
  00587	dd d9		 fstp	 ST(1)
  00589	dd d8		 fstp	 ST(0)
  0058b	dd d8		 fstp	 ST(0)
  0058d	dd d8		 fstp	 ST(0)
  0058f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@01a56e1fc2f8f359
  00595	dd 45 f8	 fld	 QWORD PTR _s$1$[ebp]
  00598	d8 c9		 fmul	 ST(0), ST(1)
  0059a	5f		 pop	 edi
  0059b	5e		 pop	 esi
  0059c	5b		 pop	 ebx
  0059d	de c9		 fmulp	 ST(1), ST(0)

; 306  : }

  0059f	8b e5		 mov	 esp, ebp
  005a1	5d		 pop	 ebp
  005a2	c3		 ret	 0
$LN149@pow:
  005a3	dd d8		 fstp	 ST(0)
$LN5@pow:

; 274  : 	    }
; 275  : 	}
; 276  :     /*
; 277  :      * compute 2**(p_h+p_l)
; 278  :      */
; 279  : 	i = j&0x7fffffff;

  005a5	8b cf		 mov	 ecx, edi

; 280  : 	k = (i>>20)-0x3ff;
; 281  : 	n = 0;

  005a7	33 f6		 xor	 esi, esi
  005a9	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 282  : 	if(i>0x3fe00000) {		/* if |z| > 0.5, set n = [z+0.5] */

  005af	81 f9 00 00 e0
	3f		 cmp	 ecx, 1071644672		; 3fe00000H
  005b5	7e 58		 jle	 SHORT $LN139@pow

; 283  : 	    n = j+(0x00100000>>(k+1));

  005b7	c1 f9 14	 sar	 ecx, 20			; 00000014H
  005ba	be 00 00 10 00	 mov	 esi, 1048576		; 00100000H
  005bf	81 e9 fe 03 00
	00		 sub	 ecx, 1022		; 000003feH

; 284  : 	    k = ((n&0x7fffffff)>>20)-0x3ff;	/* new k for n */
; 285  : 	    t = zero;
; 286  : 	    __HI(t) = (n&~(0x000fffff>>k));

  005c5	b8 ff ff 0f 00	 mov	 eax, 1048575		; 000fffffH
  005ca	d3 fe		 sar	 esi, cl
  005cc	d9 cb		 fxch	 ST(3)
  005ce	03 f7		 add	 esi, edi
  005d0	8b d6		 mov	 edx, esi
  005d2	c1 fa 14	 sar	 edx, 20			; 00000014H
  005d5	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  005db	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  005e1	8b ca		 mov	 ecx, edx
  005e3	d3 f8		 sar	 eax, cl

; 287  : 	    n = ((n&0x000fffff)|0x00100000)>>(20-k);

  005e5	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  005ea	f7 d0		 not	 eax
  005ec	2b ca		 sub	 ecx, edx
  005ee	23 c6		 and	 eax, esi
  005f0	81 e6 ff ff 0f
	00		 and	 esi, 1048575		; 000fffffH
  005f6	81 ce 00 00 10
	00		 or	 esi, 1048576		; 00100000H
  005fc	d3 fe		 sar	 esi, cl
  005fe	dd 5d 08	 fstp	 QWORD PTR _t$[ebp]
  00601	89 45 0c	 mov	 DWORD PTR _t$[ebp+4], eax

; 288  : 	    if(j<0) n = -n;

  00604	85 ff		 test	 edi, edi
  00606	79 02		 jns	 SHORT $LN3@pow
  00608	f7 de		 neg	 esi
$LN3@pow:

; 289  : 	    p_h -= t;

  0060a	dc 65 08	 fsub	 QWORD PTR _t$[ebp]
  0060d	eb 02		 jmp	 SHORT $LN4@pow
$LN139@pow:
  0060f	dd db		 fstp	 ST(3)
$LN4@pow:

; 290  : 	} 
; 291  : 	t = p_l+p_h;

  00611	d9 c2		 fld	 ST(2)

; 292  : 	__LO(t) = 0;
; 293  : 	u = t*lg2_h;
; 294  : 	v = (p_l-(t-p_h))*lg2+t*lg2_l;
; 295  : 	z = u+v;
; 296  : 	w = v-(z-u);
; 297  : 	t  = z*z;
; 298  : 	t1  = z - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))));
; 299  : 	r  = (z*t1)/(t1-two)-(w+z*w);
; 300  : 	z  = one-(r-z);
; 301  : 	j  = __HI(z);
; 302  : 	j += (n<<20);

  00613	8b ce		 mov	 ecx, esi
  00615	d8 c1		 fadd	 ST(0), ST(1)
  00617	c1 e1 14	 shl	 ecx, 20			; 00000014H
  0061a	dd 5d 08	 fstp	 QWORD PTR _t$[ebp]
  0061d	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0
  00624	dd 45 08	 fld	 QWORD PTR _t$[ebp]
  00627	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe62e4300000000
  0062d	d8 c9		 fmul	 ST(0), ST(1)
  0062f	d9 c1		 fld	 ST(1)
  00631	de e3		 fsubrp	 ST(3), ST(0)
  00633	d9 cc		 fxch	 ST(4)
  00635	de e2		 fsubrp	 ST(2), ST(0)
  00637	d9 c9		 fxch	 ST(1)
  00639	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe62e42fefa39ef
  0063f	d9 c9		 fxch	 ST(1)
  00641	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e205c610ca86c39
  00647	de e9		 fsubp	 ST(1), ST(0)
  00649	d9 c0		 fld	 ST(0)
  0064b	d8 c3		 fadd	 ST(0), ST(3)
  0064d	d9 c0		 fld	 ST(0)
  0064f	de e4		 fsubrp	 ST(4), ST(0)
  00651	d9 c9		 fxch	 ST(1)
  00653	de e3		 fsubrp	 ST(3), ST(0)
  00655	d9 c0		 fld	 ST(0)
  00657	d8 c9		 fmul	 ST(0), ST(1)
  00659	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3e66376972bea4d0
  0065f	d8 c9		 fmul	 ST(0), ST(1)
  00661	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ebbbd41c5d26bf1
  00667	d8 c9		 fmul	 ST(0), ST(1)
  00669	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f11566aaf25de2c
  0066f	d8 c9		 fmul	 ST(0), ST(1)
  00671	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3f66c16c16bebd93
  00677	d8 c9		 fmul	 ST(0), ST(1)
  00679	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fc555555555553e
  0067f	de c9		 fmulp	 ST(1), ST(0)
  00681	d8 e9		 fsubr	 ST(0), ST(1)
  00683	d9 c0		 fld	 ST(0)
  00685	d8 ca		 fmul	 ST(0), ST(2)
  00687	d9 c9		 fxch	 ST(1)
  00689	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4000000000000000
  0068f	de f9		 fdivp	 ST(1), ST(0)
  00691	d9 c3		 fld	 ST(3)
  00693	d8 ca		 fmul	 ST(0), ST(2)
  00695	de c4		 faddp	 ST(4), ST(0)
  00697	de e3		 fsubrp	 ST(3), ST(0)
  00699	de ea		 fsubp	 ST(2), ST(0)
  0069b	de e1		 fsubrp	 ST(1), ST(0)
  0069d	dd 55 08	 fst	 QWORD PTR _z$[ebp]
  006a0	8b 45 0c	 mov	 eax, DWORD PTR _z$[ebp+4]
  006a3	03 c1		 add	 eax, ecx

; 303  : 	if((j>>20)<=0) z = scalbn(z,n);	/* subnormal output */

  006a5	a9 00 00 f0 ff	 test	 eax, -1048576		; fff00000H
  006aa	7f 19		 jg	 SHORT $LN145@pow
  006ac	56		 push	 esi
  006ad	83 ec 08	 sub	 esp, 8
  006b0	dd 1c 24	 fstp	 QWORD PTR [esp]
  006b3	e8 00 00 00 00	 call	 _scalbn

; 305  : 	return s*z;

  006b8	dc 4d f8	 fmul	 QWORD PTR _s$1$[ebp]
  006bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  006be	5f		 pop	 edi
  006bf	5e		 pop	 esi
  006c0	5b		 pop	 ebx

; 306  : }

  006c1	8b e5		 mov	 esp, ebp
  006c3	5d		 pop	 ebp
  006c4	c3		 ret	 0
$LN145@pow:
  006c5	dd d8		 fstp	 ST(0)

; 304  : 	else __HI(z) += (n<<20);

  006c7	89 45 0c	 mov	 DWORD PTR _z$[ebp+4], eax
  006ca	dd 45 08	 fld	 QWORD PTR _z$[ebp]

; 305  : 	return s*z;

  006cd	dc 4d f8	 fmul	 QWORD PTR _s$1$[ebp]
  006d0	5f		 pop	 edi
  006d1	5e		 pop	 esi
  006d2	5b		 pop	 ebx

; 306  : }

  006d3	8b e5		 mov	 esp, ebp
  006d5	5d		 pop	 ebp
  006d6	c3		 ret	 0
$LN58@pow:

; 121  : 		return x+y;	

  006d7	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  006da	dc 45 10	 fadd	 QWORD PTR _y$[ebp]
$LN61@pow:
  006dd	5f		 pop	 edi
  006de	5e		 pop	 esi
  006df	5b		 pop	 ebx

; 306  : }

  006e0	8b e5		 mov	 esp, ebp
  006e2	5d		 pop	 ebp
  006e3	c3		 ret	 0
_pow	ENDP
_TEXT	ENDS
END
