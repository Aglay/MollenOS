; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\pow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_bp	DQ	03ff0000000000000r		; 1
	DQ	03ff8000000000000r		; 1.5
_dp_h	DQ	00000000000000000r		; 0
	DQ	03fe2b80340000000r		; 0.584962
_dp_l	DQ	00000000000000000r		; 0
	DQ	03e4cfdeb43cfd006r		; 1.35004e-008
_zero	DQ	00000000000000000r		; 0
_one	DQ	03ff0000000000000r		; 1
_two	DQ	04000000000000000r		; 2
_two53	DQ	04340000000000000r		; 9.0072e+015
_huge	DQ	07e37e43c8800759cr		; 1e+300
_tiny	DQ	001a56e1fc2f8f359r		; 1e-300
_L1	DQ	03fe3333333333303r		; 0.6
_L2	DQ	03fdb6db6db6fabffr		; 0.428571
_L3	DQ	03fd55555518f264dr		; 0.333333
_L4	DQ	03fd17460a91d4101r		; 0.272728
_L5	DQ	03fcd864a93c9db65r		; 0.230661
_L6	DQ	03fca7e284a454eefr		; 0.206975
_P1	DQ	03fc555555555553er		; 0.166667
_P2	DQ	0bf66c16c16bebd93r		; -0.00277778
_P3	DQ	03f11566aaf25de2cr		; 6.61376e-005
_P4	DQ	0bebbbd41c5d26bf1r		; -1.65339e-006
_P5	DQ	03e66376972bea4d0r		; 4.13814e-008
_lg2	DQ	03fe62e42fefa39efr		; 0.693147
_lg2_h	DQ	03fe62e4300000000r		; 0.693147
_lg2_l	DQ	0be205c610ca86c39r		; -1.90465e-009
_ovt	DQ	03c971547652b82fer		; 8.00857e-017
_cp	DQ	03feec709dc3a03fdr		; 0.961797
_cp_h	DQ	03feec709e0000000r		; 0.961797
_cp_l	DQ	0be3e2fe0145b01f5r		; -7.02846e-009
_ivln2	DQ	03ff71547652b82fer		; 1.4427
_ivln2_h DQ	03ff7154760000000r		; 1.4427
_ivln2_l DQ	03e54ae0bf85ddf44r		; 1.92596e-008
_twoTo1023 DQ	07fe0000000000000r		; 8.98847e+307
_twoToM1022 DQ	00010000000000000r		; 2.22507e-308
CONST	ENDS
PUBLIC	_pow
PUBLIC	__CIpow
PUBLIC	__real@0000000000000000
PUBLIC	__real@01a56e1fc2f8f359
PUBLIC	__real@3c971547652b82fe
PUBLIC	__real@3e205c610ca86c39
PUBLIC	__real@3e3e2fe0145b01f5
PUBLIC	__real@3e54ae0bf85ddf44
PUBLIC	__real@3e66376972bea4d0
PUBLIC	__real@3ebbbd41c5d26bf1
PUBLIC	__real@3f11566aaf25de2c
PUBLIC	__real@3f66c16c16bebd93
PUBLIC	__real@3fc555555555553e
PUBLIC	__real@3fca7e284a454eef
PUBLIC	__real@3fcd864a93c9db65
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd17460a91d4101
PUBLIC	__real@3fd55555518f264d
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fdb6db6db6fabff
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333303
PUBLIC	__real@3fe62e42fefa39ef
PUBLIC	__real@3fe62e4300000000
PUBLIC	__real@3feec709dc3a03fd
PUBLIC	__real@3feec709e0000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff7154760000000
PUBLIC	__real@3ff71547652b82fe
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4340000000000000
PUBLIC	__real@7e37e43c8800759c
PUBLIC	__real@bff0000000000000
EXTRN	_scalbn:PROC
EXTRN	__CIsqrt:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@4340000000000000
CONST	SEGMENT
__real@4340000000000000 DQ 04340000000000000r	; 9.0072e+015
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff71547652b82fe
CONST	SEGMENT
__real@3ff71547652b82fe DQ 03ff71547652b82fer	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff7154760000000
CONST	SEGMENT
__real@3ff7154760000000 DQ 03ff7154760000000r	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feec709e0000000
CONST	SEGMENT
__real@3feec709e0000000 DQ 03feec709e0000000r	; 0.961797
CONST	ENDS
;	COMDAT __real@3feec709dc3a03fd
CONST	SEGMENT
__real@3feec709dc3a03fd DQ 03feec709dc3a03fdr	; 0.961797
CONST	ENDS
;	COMDAT __real@3fe62e4300000000
CONST	SEGMENT
__real@3fe62e4300000000 DQ 03fe62e4300000000r	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe62e42fefa39ef
CONST	SEGMENT
__real@3fe62e42fefa39ef DQ 03fe62e42fefa39efr	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe3333333333303
CONST	SEGMENT
__real@3fe3333333333303 DQ 03fe3333333333303r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdb6db6db6fabff
CONST	SEGMENT
__real@3fdb6db6db6fabff DQ 03fdb6db6db6fabffr	; 0.428571
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd55555518f264d
CONST	SEGMENT
__real@3fd55555518f264d DQ 03fd55555518f264dr	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd17460a91d4101
CONST	SEGMENT
__real@3fd17460a91d4101 DQ 03fd17460a91d4101r	; 0.272728
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcd864a93c9db65
CONST	SEGMENT
__real@3fcd864a93c9db65 DQ 03fcd864a93c9db65r	; 0.230661
CONST	ENDS
;	COMDAT __real@3fca7e284a454eef
CONST	SEGMENT
__real@3fca7e284a454eef DQ 03fca7e284a454eefr	; 0.206975
CONST	ENDS
;	COMDAT __real@3fc555555555553e
CONST	SEGMENT
__real@3fc555555555553e DQ 03fc555555555553er	; 0.166667
CONST	ENDS
;	COMDAT __real@3f66c16c16bebd93
CONST	SEGMENT
__real@3f66c16c16bebd93 DQ 03f66c16c16bebd93r	; 0.00277778
CONST	ENDS
;	COMDAT __real@3f11566aaf25de2c
CONST	SEGMENT
__real@3f11566aaf25de2c DQ 03f11566aaf25de2cr	; 6.61376e-005
CONST	ENDS
;	COMDAT __real@3ebbbd41c5d26bf1
CONST	SEGMENT
__real@3ebbbd41c5d26bf1 DQ 03ebbbd41c5d26bf1r	; 1.65339e-006
CONST	ENDS
;	COMDAT __real@3e66376972bea4d0
CONST	SEGMENT
__real@3e66376972bea4d0 DQ 03e66376972bea4d0r	; 4.13814e-008
CONST	ENDS
;	COMDAT __real@3e54ae0bf85ddf44
CONST	SEGMENT
__real@3e54ae0bf85ddf44 DQ 03e54ae0bf85ddf44r	; 1.92596e-008
CONST	ENDS
;	COMDAT __real@3e3e2fe0145b01f5
CONST	SEGMENT
__real@3e3e2fe0145b01f5 DQ 03e3e2fe0145b01f5r	; 7.02846e-009
CONST	ENDS
;	COMDAT __real@3e205c610ca86c39
CONST	SEGMENT
__real@3e205c610ca86c39 DQ 03e205c610ca86c39r	; 1.90465e-009
CONST	ENDS
;	COMDAT __real@3c971547652b82fe
CONST	SEGMENT
__real@3c971547652b82fe DQ 03c971547652b82fer	; 8.00857e-017
CONST	ENDS
;	COMDAT __real@01a56e1fc2f8f359
CONST	SEGMENT
__real@01a56e1fc2f8f359 DQ 001a56e1fc2f8f359r	; 1e-300
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\pow.c
;	COMDAT __CIpow
_TEXT	SEGMENT
_x$ = -16						; size = 8
_y$ = -8						; size = 8
__CIpow	PROC						; COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 329  : 	FPU_DOUBLES(x, y);

  00006	dd 5d f0	 fstp	 QWORD PTR _x$[ebp]
  00009	9b		 fwait
  0000a	dd 5d f8	 fstp	 QWORD PTR _y$[ebp]
  0000d	9b		 fwait

; 330  : 	return pow(x, y);

  0000e	dd 45 f8	 fld	 QWORD PTR _y$[ebp]
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	dd 5c 24 08	 fstp	 QWORD PTR [esp+8]
  00018	dd 45 f0	 fld	 QWORD PTR _x$[ebp]
  0001b	dd 1c 24	 fstp	 QWORD PTR [esp]
  0001e	e8 00 00 00 00	 call	 _pow
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 331  : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__CIpow	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\pow.c
;	COMDAT _pow
_TEXT	SEGMENT
_ss$1$ = -32						; size = 8
_sl_u$1 = -24						; size = 8
_sl_u$2 = -24						; size = 8
_sl_u$3 = -24						; size = 8
_s$1$ = -16						; size = 8
_ew_u$4 = -16						; size = 8
_sh_u$5 = -8						; size = 8
_sh_u$6 = -8						; size = 8
_ew_u$7 = -8						; size = 8
_sl_u$8 = 8						; size = 8
_gh_u$9 = 8						; size = 8
_x$ = 8							; size = 8
_j$2$ = 12						; size = 4
_j$1$ = 12						; size = 4
_n$ = 12						; size = 4
_sh_u$10 = 16						; size = 8
_gh_u$11 = 16						; size = 8
_sl_u$12 = 16						; size = 8
_sh_u$13 = 16						; size = 8
_ew_u$14 = 16						; size = 8
_sl_u$15 = 16						; size = 8
_sl_u$16 = 16						; size = 8
_y$ = 16						; size = 8
_pow	PROC						; COMDAT

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 100  : 	double z, ax, z_h, z_l, p_h, p_l;
; 101  : 	double y1, t1, t2, r, s, t, u, v, w;
; 102  : 	int32_t i, j, k, yisint, n;
; 103  : 	int32_t hx, hy, ix, iy;
; 104  : 	uint32_t lx, ly;
; 105  : 
; 106  : 	EXTRACT_WORDS(hx, lx, x);

  00006	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00009	dd 55 f8	 fst	 QWORD PTR _ew_u$7[ebp]

; 107  : 	EXTRACT_WORDS(hy, ly, y);

  0000c	dd 45 10	 fld	 QWORD PTR _y$[ebp]

; 108  : 	ix = hx & 0x7fffffff;  iy = hy & 0x7fffffff;

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _ew_u$7[ebp+4]
  00012	8b d1		 mov	 edx, ecx
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	dd 55 f0	 fst	 QWORD PTR _ew_u$4[ebp]

; 109  : 
; 110  : 	/* y==zero: x**0 = 1 */
; 111  : 	if ((iy | ly) == 0) return one;

  00019	8b 5d f0	 mov	 ebx, DWORD PTR _ew_u$4[ebp]
  0001c	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00022	57		 push	 edi
  00023	8b 7d f4	 mov	 edi, DWORD PTR _ew_u$4[ebp+4]
  00026	8b f7		 mov	 esi, edi
  00028	81 e6 ff ff ff
	7f		 and	 esi, 2147483647		; 7fffffffH
  0002e	8b c6		 mov	 eax, esi
  00030	0b c3		 or	 eax, ebx
  00032	75 0d		 jne	 SHORT $LN105@pow
$LN298@pow:
  00034	dd d9		 fstp	 ST(1)
$LN299@pow:
  00036	5f		 pop	 edi
  00037	dd d8		 fstp	 ST(0)
  00039	d9 e8		 fld1
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx

; 318  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN105@pow:

; 112  : 
; 113  : 	/* x==1: 1**y = 1, even if y is NaN */
; 114  : 	if (hx == 0x3ff00000 && lx == 0) return one;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _ew_u$7[ebp]
  00044	81 f9 00 00 f0
	3f		 cmp	 ecx, 1072693248		; 3ff00000H
  0004a	75 04		 jne	 SHORT $LN104@pow
  0004c	85 c0		 test	 eax, eax
  0004e	74 e4		 je	 SHORT $LN298@pow
$LN104@pow:

; 115  : 
; 116  : 	/* y!=zero: result is NaN if either arg is NaN */
; 117  : 	if (ix > 0x7ff00000 || ((ix == 0x7ff00000) && (lx != 0)) ||
; 118  : 		iy > 0x7ff00000 || ((iy == 0x7ff00000) && (ly != 0)))

  00050	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  00056	0f 8f b4 06 00
	00		 jg	 $LN102@pow
  0005c	75 08		 jne	 SHORT $LN101@pow
  0005e	85 c0		 test	 eax, eax
  00060	0f 85 aa 06 00
	00		 jne	 $LN102@pow
$LN101@pow:
  00066	81 fe 00 00 f0
	7f		 cmp	 esi, 2146435072		; 7ff00000H
  0006c	0f 8f 9e 06 00
	00		 jg	 $LN102@pow
  00072	75 08		 jne	 SHORT $LN103@pow
  00074	85 db		 test	 ebx, ebx
  00076	0f 85 94 06 00
	00		 jne	 $LN102@pow
$LN103@pow:

; 120  : 
; 121  : 	/* determine if y is an odd int when x < 0
; 122  : 	* yisint = 0	... y is not an integer
; 123  : 	* yisint = 1	... y is an odd int
; 124  : 	* yisint = 2	... y is an even int
; 125  : 	*/
; 126  : 	yisint = 0;

  0007c	33 db		 xor	 ebx, ebx

; 127  : 	if (hx<0) {

  0007e	85 c9		 test	 ecx, ecx
  00080	79 0d		 jns	 SHORT $LN92@pow

; 128  : 		if (iy >= 0x43400000) yisint = 2; /* even integer y */

  00082	81 fe 00 00 40
	43		 cmp	 esi, 1128267776		; 43400000H
  00088	7c 47		 jl	 SHORT $LN99@pow
  0008a	bb 02 00 00 00	 mov	 ebx, 2
$LN92@pow:

; 138  : 			}
; 139  : 		}
; 140  : 	}
; 141  : 
; 142  : 	/* special value of y */
; 143  : 	if (ly == 0) {

  0008f	83 7d f0 00	 cmp	 DWORD PTR _ew_u$4[ebp], 0
  00093	0f 85 2f 01 00
	00		 jne	 $LN128@pow
$LN126@pow:

; 144  : 		if (iy == 0x7ff00000) {	/* y is +-inf */

  00099	81 fe 00 00 f0
	7f		 cmp	 esi, 2146435072		; 7ff00000H
  0009f	0f 85 aa 00 00
	00		 jne	 $LN86@pow

; 145  : 			if (((ix - 0x3ff00000) | lx) == 0)

  000a5	8d 82 00 00 10
	c0		 lea	 eax, DWORD PTR [edx-1072693248]
  000ab	dd d9		 fstp	 ST(1)
  000ad	0b 45 f8	 or	 eax, DWORD PTR _ew_u$7[ebp]
  000b0	74 84		 je	 SHORT $LN299@pow

; 146  : 				return  one;	/* (-1)**+-inf is NaN */
; 147  : 			else if (ix >= 0x3ff00000)/* (|x|>1)**+-inf = inf,0 */

  000b2	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  000b8	0f 8c 84 00 00
	00		 jl	 $LN87@pow

; 148  : 				return (hy >= 0) ? y : zero;

  000be	85 ff		 test	 edi, edi
  000c0	0f 89 52 06 00
	00		 jns	 $LN112@pow
$LN181@pow:
  000c6	dd d8		 fstp	 ST(0)
$LN118@pow:
  000c8	d9 ee		 fldz
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 318  : }

  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
$LN99@pow:

; 129  : 		else if (iy >= 0x3ff00000) {

  000d1	81 fe 00 00 f0
	3f		 cmp	 esi, 1072693248		; 3ff00000H
  000d7	7c b6		 jl	 SHORT $LN92@pow

; 130  : 			k = (iy >> 20) - 0x3ff;	   /* exponent */

  000d9	8b c6		 mov	 eax, esi
  000db	c1 f8 14	 sar	 eax, 20			; 00000014H
  000de	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH

; 131  : 			if (k>20) {

  000e3	83 f8 14	 cmp	 eax, 20			; 00000014H
  000e6	7e 25		 jle	 SHORT $LN96@pow

; 132  : 				j = ly >> (52 - k);

  000e8	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  000ed	2b c8		 sub	 ecx, eax
  000ef	8b 45 f0	 mov	 eax, DWORD PTR _ew_u$4[ebp]
  000f2	d3 e8		 shr	 eax, cl
  000f4	89 45 0c	 mov	 DWORD PTR _j$1$[ebp], eax

; 133  : 				if ((uint32_t)(j << (52 - k)) == ly) yisint = 2 - (j & 1);

  000f7	d3 e0		 shl	 eax, cl
  000f9	3b 45 f0	 cmp	 eax, DWORD PTR _ew_u$4[ebp]
  000fc	75 91		 jne	 SHORT $LN92@pow
  000fe	8b 45 0c	 mov	 eax, DWORD PTR _j$1$[ebp]
  00101	bb 02 00 00 00	 mov	 ebx, 2
  00106	83 e0 01	 and	 eax, 1
  00109	2b d8		 sub	 ebx, eax

; 134  : 			}
; 135  : 			else if (ly == 0) {

  0010b	eb 82		 jmp	 SHORT $LN92@pow
$LN96@pow:
  0010d	8b 4d f0	 mov	 ecx, DWORD PTR _ew_u$4[ebp]
  00110	85 c9		 test	 ecx, ecx
  00112	0f 85 b0 00 00
	00		 jne	 $LN128@pow

; 136  : 				j = iy >> (20 - k);

  00118	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0011d	2b c8		 sub	 ecx, eax
  0011f	8b c6		 mov	 eax, esi
  00121	d3 f8		 sar	 eax, cl
  00123	89 45 0c	 mov	 DWORD PTR _j$2$[ebp], eax

; 137  : 				if ((j << (20 - k)) == iy) yisint = 2 - (j & 1);

  00126	d3 e0		 shl	 eax, cl
  00128	3b c6		 cmp	 eax, esi
  0012a	0f 85 69 ff ff
	ff		 jne	 $LN126@pow
  00130	8b 45 0c	 mov	 eax, DWORD PTR _j$2$[ebp]
  00133	bb 02 00 00 00	 mov	 ebx, 2
  00138	83 e0 01	 and	 eax, 1
  0013b	2b d8		 sub	 ebx, eax

; 138  : 			}
; 139  : 		}
; 140  : 	}
; 141  : 
; 142  : 	/* special value of y */
; 143  : 	if (ly == 0) {

  0013d	e9 57 ff ff ff	 jmp	 $LN126@pow
$LN87@pow:

; 149  : 			else			/* (|x|<1)**-,+inf = inf,0 */
; 150  : 				return (hy<0) ? -y : zero;

  00142	85 ff		 test	 edi, edi
  00144	79 80		 jns	 SHORT $LN181@pow
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	d9 e0		 fchs
  0014a	5b		 pop	 ebx

; 318  : }

  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
$LN86@pow:

; 151  : 		}
; 152  : 		if (iy == 0x3ff00000) {	/* y is  +-1 */

  0014f	81 fe 00 00 f0
	3f		 cmp	 esi, 1072693248		; 3ff00000H
  00155	75 15		 jne	 SHORT $LN83@pow

; 153  : 			if (hy<0) return one / x; else return x;

  00157	dd d8		 fstp	 ST(0)
  00159	85 ff		 test	 edi, edi
  0015b	0f 89 b7 05 00
	00		 jns	 $LN112@pow
  00161	d9 e8		 fld1
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	de f1		 fdivrp	 ST(1), ST(0)
  00167	5b		 pop	 ebx

; 318  : }

  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
$LN83@pow:

; 154  : 		}
; 155  : 		if (hy == 0x40000000) return x*x;   /* y is  2 */

  0016c	81 ff 00 00 00
	40		 cmp	 edi, 1073741824		; 40000000H
  00172	75 0b		 jne	 SHORT $LN82@pow
  00174	5f		 pop	 edi
  00175	dd d8		 fstp	 ST(0)
  00177	5e		 pop	 esi
  00178	dc c8		 fmul	 ST(0), ST(0)
  0017a	5b		 pop	 ebx

; 318  : }

  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c3		 ret	 0
$LN82@pow:

; 156  : 		if (hy == 0x40080000) return x*x*x; /* y is  3 */

  0017f	81 ff 00 00 08
	40		 cmp	 edi, 1074266112		; 40080000H
  00185	75 0f		 jne	 SHORT $LN81@pow
  00187	dd d8		 fstp	 ST(0)
  00189	d9 c0		 fld	 ST(0)
  0018b	d8 c9		 fmul	 ST(0), ST(1)
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
  0018f	5b		 pop	 ebx
  00190	de c9		 fmulp	 ST(1), ST(0)

; 318  : }

  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c3		 ret	 0
$LN81@pow:

; 157  : 		if (hy == 0x40100000) {             /* y is  4 */

  00196	81 ff 00 00 10
	40		 cmp	 edi, 1074790400		; 40100000H
  0019c	75 0d		 jne	 SHORT $LN80@pow

; 158  : 			u = x*x;

  0019e	dd d8		 fstp	 ST(0)
  001a0	dc c8		 fmul	 ST(0), ST(0)
  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	5b		 pop	 ebx

; 159  : 			return u*u;

  001a5	dc c8		 fmul	 ST(0), ST(0)

; 318  : }

  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
$LN80@pow:

; 160  : 		}
; 161  : 		if (hy == 0x3fe00000) {             /* y is  0.5 */
; 162  : 			if (hx >= 0)	/* x >= +0 */

  001ab	8b 4d fc	 mov	 ecx, DWORD PTR _ew_u$7[ebp+4]
  001ae	81 ff 00 00 e0
	3f		 cmp	 edi, 1071644672		; 3fe00000H
  001b4	75 15		 jne	 SHORT $LN78@pow
  001b6	85 c9		 test	 ecx, ecx
  001b8	78 11		 js	 SHORT $LN78@pow

; 163  : 				return sqrt(x);

  001ba	dd d8		 fstp	 ST(0)
  001bc	e8 00 00 00 00	 call	 __CIsqrt
  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx

; 318  : }

  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN128@pow:
  001c8	8b 4d fc	 mov	 ecx, DWORD PTR _ew_u$7[ebp+4]
$LN78@pow:

; 164  : 		}
; 165  : 	}
; 166  : 
; 167  : 	ax = fabs(x);
; 168  : 	/* special value of x */
; 169  : 	if (lx == 0) {

  001cb	83 7d f8 00	 cmp	 DWORD PTR _ew_u$7[ebp], 0
  001cf	d9 c1		 fld	 ST(1)
  001d1	d9 e1		 fabs
  001d3	75 4f		 jne	 SHORT $LN76@pow

; 170  : 		if (ix == 0x7ff00000 || ix == 0 || ix == 0x3ff00000){

  001d5	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  001db	74 0c		 je	 SHORT $LN214@pow
  001dd	85 d2		 test	 edx, edx
  001df	74 08		 je	 SHORT $LN214@pow
  001e1	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  001e7	75 3b		 jne	 SHORT $LN76@pow
$LN214@pow:
  001e9	dd da		 fstp	 ST(2)
  001eb	dd d8		 fstp	 ST(0)

; 171  : 			z = ax;			/*x is +-0,+-inf,+-1*/
; 172  : 			if (hy<0) z = one / z;	/* z = (1/|x|) */

  001ed	85 ff		 test	 edi, edi
  001ef	79 04		 jns	 SHORT $LN74@pow
  001f1	d9 e8		 fld1
  001f3	de f1		 fdivrp	 ST(1), ST(0)
$LN74@pow:

; 173  : 			if (hx<0) {

  001f5	85 c9		 test	 ecx, ecx
  001f7	0f 89 1b 05 00
	00		 jns	 $LN112@pow

; 174  : 				if (((ix - 0x3ff00000) | yisint) == 0) {

  001fd	8d 82 00 00 10
	c0		 lea	 eax, DWORD PTR [edx-1072693248]
  00203	0b c3		 or	 eax, ebx
  00205	75 0b		 jne	 SHORT $LN72@pow

; 175  : 					z = (z - z) / (z - z); /* (-1)**non-int is NaN */

  00207	dc e0		 fsubr	 ST(0), ST(0)
  00209	5f		 pop	 edi
  0020a	5e		 pop	 esi
  0020b	5b		 pop	 ebx
  0020c	dc f8		 fdiv	 ST(0), ST(0)

; 318  : }

  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c3		 ret	 0
$LN72@pow:

; 176  : 				}
; 177  : 				else if (yisint == 1)

  00212	83 fb 01	 cmp	 ebx, 1
  00215	0f 85 fd 04 00
	00		 jne	 $LN112@pow

; 178  : 					z = -z;		/* (x<0)**odd = -(|x|**odd) */

  0021b	5f		 pop	 edi
  0021c	5e		 pop	 esi
  0021d	d9 e0		 fchs
  0021f	5b		 pop	 ebx

; 318  : }

  00220	8b e5		 mov	 esp, ebp
  00222	5d		 pop	 ebp
  00223	c3		 ret	 0
$LN76@pow:

; 179  : 			}
; 180  : 			return z;
; 181  : 		}
; 182  : 	}
; 183  : 
; 184  : 	/* CYGNUS LOCAL + fdlibm-5.3 fix: This used to be
; 185  : 	n = (hx>>31)+1;
; 186  : 	but ANSI C says a right shift of a signed negative quantity is
; 187  : 	implementation defined.  */
; 188  : 	n = ((uint32_t)hx >> 31) - 1;

  00224	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00227	49		 dec	 ecx

; 189  : 
; 190  : 	/* (x<0)**(non-int) is NaN */
; 191  : 	if ((n | yisint) == 0) return (x - x) / (x - x);

  00228	8b c1		 mov	 eax, ecx
  0022a	0b c3		 or	 eax, ebx
  0022c	75 0f		 jne	 SHORT $LN227@pow
  0022e	dd d8		 fstp	 ST(0)
  00230	dd d8		 fstp	 ST(0)
  00232	dc e8		 fsub	 ST(0), ST(0)
  00234	5f		 pop	 edi
  00235	5e		 pop	 esi
  00236	5b		 pop	 ebx
  00237	dc f8		 fdiv	 ST(0), ST(0)

; 318  : }

  00239	8b e5		 mov	 esp, ebp
  0023b	5d		 pop	 ebp
  0023c	c3		 ret	 0
$LN227@pow:
  0023d	dd da		 fstp	 ST(2)

; 192  : 
; 193  : 	s = one; /* s (sign of result -ve**odd) = -1 else = 1 */
; 194  : 	if ((n | (yisint - 1)) == 0) s = -one;/* (-ve)**(odd int) */

  0023f	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00242	0b c1		 or	 eax, ecx
  00244	d9 e8		 fld1
  00246	d9 c0		 fld	 ST(0)
  00248	dd 55 f0	 fst	 QWORD PTR _s$1$[ebp]
  0024b	75 0b		 jne	 SHORT $LN68@pow
  0024d	dd d8		 fstp	 ST(0)
  0024f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000
  00255	dd 55 f0	 fst	 QWORD PTR _s$1$[ebp]
$LN68@pow:

; 195  : 
; 196  : 	/* |y| is huge */
; 197  : 	if (iy>0x41e00000) { /* if |y| > 2**31 */

  00258	d9 ee		 fldz
  0025a	81 fe 00 00 e0
	41		 cmp	 esi, 1105199104		; 41e00000H
  00260	0f 8e e6 00 00
	00		 jle	 $LN233@pow

; 198  : 		if (iy>0x43f00000){	/* if |y| > 2**64, must o/uflow */

  00266	dd d8		 fstp	 ST(0)
  00268	81 fe 00 00 f0
	43		 cmp	 esi, 1139802112		; 43f00000H
  0026e	7e 3e		 jle	 SHORT $LN64@pow

; 199  : 			if (ix <= 0x3fefffff) return (hy<0) ? huge*huge : tiny*tiny;

  00270	dd d8		 fstp	 ST(0)
  00272	dd da		 fstp	 ST(2)
  00274	dd d8		 fstp	 ST(0)
  00276	dd d8		 fstp	 ST(0)
  00278	81 fa ff ff ef
	3f		 cmp	 edx, 1072693247		; 3fefffffH
  0027e	7f 17		 jg	 SHORT $LN65@pow
  00280	85 ff		 test	 edi, edi
  00282	0f 89 40 fe ff
	ff		 jns	 $LN118@pow
  00288	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  0028e	5f		 pop	 edi
  0028f	5e		 pop	 esi
  00290	dc c8		 fmul	 ST(0), ST(0)
  00292	5b		 pop	 ebx

; 318  : }

  00293	8b e5		 mov	 esp, ebp
  00295	5d		 pop	 ebp
  00296	c3		 ret	 0
$LN65@pow:

; 200  : 			if (ix >= 0x3ff00000) return (hy>0) ? huge*huge : tiny*tiny;

  00297	85 ff		 test	 edi, edi
  00299	0f 8e 29 fe ff
	ff		 jle	 $LN118@pow
  0029f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  002a5	5f		 pop	 edi
  002a6	5e		 pop	 esi
  002a7	dc c8		 fmul	 ST(0), ST(0)
  002a9	5b		 pop	 ebx

; 318  : }

  002aa	8b e5		 mov	 esp, ebp
  002ac	5d		 pop	 ebp
  002ad	c3		 ret	 0
$LN64@pow:

; 201  : 		}
; 202  : 		/* over/underflow if x is not close to one */
; 203  : 		if (ix<0x3fefffff) return (hy<0) ? s*huge*huge : s*tiny*tiny;

  002ae	81 fa ff ff ef
	3f		 cmp	 edx, 1072693247		; 3fefffffH
  002b4	7d 1b		 jge	 SHORT $LN63@pow
  002b6	dd db		 fstp	 ST(3)
  002b8	dd d9		 fstp	 ST(1)
  002ba	dd d8		 fstp	 ST(0)
  002bc	85 ff		 test	 edi, edi
  002be	78 23		 js	 SHORT $LN302@pow
$LN122@pow:
  002c0	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@01a56e1fc2f8f359
  002c6	dc c9		 fmul	 ST(1), ST(0)
  002c8	5f		 pop	 edi
  002c9	5e		 pop	 esi
  002ca	5b		 pop	 ebx
  002cb	de c9		 fmulp	 ST(1), ST(0)

; 318  : }

  002cd	8b e5		 mov	 esp, ebp
  002cf	5d		 pop	 ebp
  002d0	c3		 ret	 0
$LN63@pow:

; 204  : 		if (ix>0x3ff00000) return (hy>0) ? s*huge*huge : s*tiny*tiny;

  002d1	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  002d7	7e 1b		 jle	 SHORT $LN246@pow
  002d9	dd db		 fstp	 ST(3)
  002db	dd d9		 fstp	 ST(1)
  002dd	dd d8		 fstp	 ST(0)
  002df	85 ff		 test	 edi, edi
  002e1	7e dd		 jle	 SHORT $LN122@pow
$LN302@pow:
  002e3	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  002e9	dc c9		 fmul	 ST(1), ST(0)
  002eb	5f		 pop	 edi
  002ec	5e		 pop	 esi
  002ed	5b		 pop	 ebx
  002ee	de c9		 fmulp	 ST(1), ST(0)

; 318  : }

  002f0	8b e5		 mov	 esp, ebp
  002f2	5d		 pop	 ebp
  002f3	c3		 ret	 0
$LN246@pow:
  002f4	dd d8		 fstp	 ST(0)

; 205  : 		/* now |1-x| is tiny <= 2**-20, suffice to compute
; 206  : 		log(x) by x-x^2/2+x^3/3-x^4/4 */
; 207  : 		t = ax - one;		/* t has 20 trailing zeros */

  002f6	dc ea		 fsub	 ST(2), ST(0)

; 208  : 		w = (t*t)*(0.5 - t*(0.3333333333333333333333 - t*0.25));
; 209  : 		u = ivln2_h*t;	/* ivln2_h has 21 sig. bits */

  002f8	d9 c2		 fld	 ST(2)
  002fa	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff7154760000000

; 210  : 		v = t*ivln2_l - w*ivln2;

  00300	d9 c3		 fld	 ST(3)
  00302	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e54ae0bf85ddf44
  00308	d9 c4		 fld	 ST(4)
  0030a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fd0000000000000
  00310	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fd5555555555555
  00316	d8 cd		 fmul	 ST(0), ST(5)
  00318	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe0000000000000
  0031e	d9 cd		 fxch	 ST(5)
  00320	dc c8		 fmul	 ST(0), ST(0)
  00322	de cd		 fmulp	 ST(5), ST(0)
  00324	d9 cc		 fxch	 ST(4)
  00326	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff71547652b82fe
  0032c	de ec		 fsubp	 ST(4), ST(0)

; 211  : 		t1 = u + v;

  0032e	d9 c3		 fld	 ST(3)
  00330	d8 c1		 fadd	 ST(0), ST(1)

; 212  : 		SET_LOW_WORD(t1, 0);

  00332	dd 5d 10	 fstp	 QWORD PTR _sl_u$16[ebp]
  00335	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _sl_u$16[ebp], 0
  0033c	dd 45 10	 fld	 QWORD PTR _sl_u$16[ebp]

; 213  : 		t2 = v - (t1 - u);

  0033f	d9 c0		 fld	 ST(0)
  00341	de e2		 fsubrp	 ST(2), ST(0)
  00343	d9 cc		 fxch	 ST(4)
  00345	de e1		 fsubrp	 ST(1), ST(0)

; 214  : 	}
; 215  : 	else {

  00347	e9 c8 01 00 00	 jmp	 $LN58@pow
$LN233@pow:
  0034c	dd d9		 fstp	 ST(1)

; 216  : 		double ss, s2, s_h, s_l, t_h, t_l;
; 217  : 		n = 0;

  0034e	33 c9		 xor	 ecx, ecx
  00350	dd da		 fstp	 ST(2)

; 218  : 		/* take care subnormal number */
; 219  : 		if (ix<0x00100000)

  00352	81 fa 00 00 10
	00		 cmp	 edx, 1048576		; 00100000H
  00358	7d 15		 jge	 SHORT $LN54@pow

; 220  : 		{
; 221  : 			ax *= two53; n -= 53; GET_HIGH_WORD(ix, ax);

  0035a	d9 ca		 fxch	 ST(2)
  0035c	b9 cb ff ff ff	 mov	 ecx, -53		; ffffffcbH
  00361	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4340000000000000
  00367	dd 55 08	 fst	 QWORD PTR _gh_u$9[ebp]
  0036a	8b 55 0c	 mov	 edx, DWORD PTR _gh_u$9[ebp+4]
  0036d	d9 ca		 fxch	 ST(2)
$LN54@pow:

; 222  : 		}
; 223  : 		n += ((ix) >> 20) - 0x3ff;

  0036f	8b c2		 mov	 eax, edx
  00371	81 c1 01 fc ff
	ff		 add	 ecx, -1023		; fffffc01H
  00377	c1 f8 14	 sar	 eax, 20			; 00000014H

; 224  : 		j = ix & 0x000fffff;

  0037a	81 e2 ff ff 0f
	00		 and	 edx, 1048575		; 000fffffH
  00380	03 c1		 add	 eax, ecx

; 225  : 		/* determine interval */
; 226  : 		ix = j | 0x3ff00000;		/* normalize ix */

  00382	8b ca		 mov	 ecx, edx
  00384	81 c9 00 00 f0
	3f		 or	 ecx, 1072693248		; 3ff00000H
  0038a	89 45 0c	 mov	 DWORD PTR _n$[ebp], eax

; 227  : 		if (j <= 0x3988E) k = 0;		/* |x|<sqrt(3/2) */

  0038d	81 fa 8e 98 03
	00		 cmp	 edx, 235662		; 0003988eH
  00393	7f 04		 jg	 SHORT $LN53@pow
  00395	33 d2		 xor	 edx, edx
  00397	eb 1b		 jmp	 SHORT $LN49@pow
$LN53@pow:

; 228  : 		else if (j<0xBB67A) k = 1;	/* |x|<sqrt(3)   */

  00399	81 fa 7a b6 0b
	00		 cmp	 edx, 767610		; 000bb67aH
  0039f	7d 07		 jge	 SHORT $LN51@pow
  003a1	ba 01 00 00 00	 mov	 edx, 1
  003a6	eb 0c		 jmp	 SHORT $LN49@pow
$LN51@pow:

; 229  : 		else { k = 0; n += 1; ix -= 0x00100000; }

  003a8	40		 inc	 eax
  003a9	33 d2		 xor	 edx, edx
  003ab	89 45 0c	 mov	 DWORD PTR _n$[ebp], eax
  003ae	81 e9 00 00 10
	00		 sub	 ecx, 1048576		; 00100000H
$LN49@pow:

; 230  : 		SET_HIGH_WORD(ax, ix);

  003b4	d9 ca		 fxch	 ST(2)

; 231  : 
; 232  : 		/* compute ss = s_h+s_l = (x-1)/(x+1) or (x-1.5)/(x+1.5) */
; 233  : 		u = ax - bp[k];		/* bp[0]=1.0, bp[1]=1.5 */
; 234  : 		v = one / (ax + bp[k]);
; 235  : 		ss = u*v;
; 236  : 		s_h = ss;
; 237  : 		SET_LOW_WORD(s_h, 0);
; 238  : 		/* t_h=ax+bp[k] High */
; 239  : 		t_h = zero;
; 240  : 		SET_HIGH_WORD(t_h, ((ix >> 1) | 0x20000000) + 0x00080000 + (k << 18));

  003b6	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  003b9	dd 5d f8	 fstp	 QWORD PTR _sh_u$6[ebp]
  003bc	89 4d fc	 mov	 DWORD PTR _sh_u$6[ebp+4], ecx
  003bf	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  003c5	dd 45 f8	 fld	 QWORD PTR _sh_u$6[ebp]
  003c8	d9 c0		 fld	 ST(0)
  003ca	d1 f9		 sar	 ecx, 1
  003cc	dc 24 d5 00 00
	00 00		 fsub	 QWORD PTR _bp[edx*8]
  003d3	c1 e0 12	 shl	 eax, 18			; 00000012H
  003d6	03 c8		 add	 ecx, eax
  003d8	d9 c1		 fld	 ST(1)
  003da	dc 04 d5 00 00
	00 00		 fadd	 QWORD PTR _bp[edx*8]
  003e1	de fc		 fdivp	 ST(4), ST(0)
  003e3	d9 c3		 fld	 ST(3)
  003e5	d8 c9		 fmul	 ST(0), ST(1)
  003e7	dd 55 e0	 fst	 QWORD PTR _ss$1$[ebp]
  003ea	dd 55 e8	 fst	 QWORD PTR _sl_u$3[ebp]
  003ed	d9 cb		 fxch	 ST(3)
  003ef	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _sl_u$3[ebp], 0
  003f6	dd 5d f8	 fstp	 QWORD PTR _sh_u$5[ebp]
  003f9	89 4d fc	 mov	 DWORD PTR _sh_u$5[ebp+4], ecx

; 241  : 		t_l = ax - (t_h - bp[k]);
; 242  : 		s_l = v*((u - s_h*t_h) - s_h*t_l);

  003fc	dd 45 f8	 fld	 QWORD PTR _sh_u$5[ebp]
  003ff	d9 c0		 fld	 ST(0)
  00401	dd 45 e8	 fld	 QWORD PTR _sl_u$3[ebp]
  00404	dc c9		 fmul	 ST(1), ST(0)
  00406	d9 cb		 fxch	 ST(3)
  00408	de e1		 fsubrp	 ST(1), ST(0)
  0040a	d9 c9		 fxch	 ST(1)
  0040c	dc 24 d5 00 00
	00 00		 fsub	 QWORD PTR _bp[edx*8]
  00413	de eb		 fsubp	 ST(3), ST(0)
  00415	d9 ca		 fxch	 ST(2)
  00417	d8 c9		 fmul	 ST(0), ST(1)
  00419	de ea		 fsubp	 ST(2), ST(0)
  0041b	d9 c9		 fxch	 ST(1)
  0041d	de cb		 fmulp	 ST(3), ST(0)

; 243  : 		/* compute log(ax) */
; 244  : 		s2 = ss*ss;

  0041f	d9 c1		 fld	 ST(1)
  00421	d8 ca		 fmul	 ST(0), ST(2)

; 245  : 		r = s2*s2*(L1 + s2*(L2 + s2*(L3 + s2*(L4 + s2*(L5 + s2*L6)))));

  00423	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fca7e284a454eef
  00429	d8 c9		 fmul	 ST(0), ST(1)
  0042b	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fcd864a93c9db65
  00431	d8 c9		 fmul	 ST(0), ST(1)
  00433	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd17460a91d4101
  00439	d8 c9		 fmul	 ST(0), ST(1)
  0043b	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd55555518f264d
  00441	d8 c9		 fmul	 ST(0), ST(1)
  00443	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fdb6db6db6fabff
  00449	d8 c9		 fmul	 ST(0), ST(1)
  0044b	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe3333333333303
  00451	d9 c9		 fxch	 ST(1)
  00453	dc c8		 fmul	 ST(0), ST(0)
  00455	de c9		 fmulp	 ST(1), ST(0)

; 246  : 		r += s_l*(s_h + ss);

  00457	d9 c1		 fld	 ST(1)
  00459	de c3		 faddp	 ST(3), ST(0)
  0045b	d9 ca		 fxch	 ST(2)
  0045d	d8 cb		 fmul	 ST(0), ST(3)
  0045f	de c2		 faddp	 ST(2), ST(0)

; 247  : 		s2 = s_h*s_h;

  00461	d9 c0		 fld	 ST(0)
  00463	d8 c9		 fmul	 ST(0), ST(1)

; 248  : 		t_h = 3.0 + s2 + r;

  00465	d9 c0		 fld	 ST(0)
  00467	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4008000000000000
  0046d	dc c1		 fadd	 ST(1), ST(0)
  0046f	d9 c9		 fxch	 ST(1)
  00471	d8 c4		 fadd	 ST(0), ST(4)

; 249  : 		SET_LOW_WORD(t_h, 0);

  00473	dd 5d e8	 fstp	 QWORD PTR _sl_u$2[ebp]
  00476	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _sl_u$2[ebp], 0

; 250  : 		t_l = r - ((t_h - 3.0) - s2);
; 251  : 		/* u+v = ss*(1+...) */
; 252  : 		u = s_h*t_h;

  0047d	dd 45 e8	 fld	 QWORD PTR _sl_u$2[ebp]
  00480	d9 c0		 fld	 ST(0)
  00482	de cc		 fmulp	 ST(4), ST(0)
  00484	d9 c0		 fld	 ST(0)
  00486	de e2		 fsubrp	 ST(2), ST(0)
  00488	d9 c9		 fxch	 ST(1)
  0048a	de e2		 fsubrp	 ST(2), ST(0)
  0048c	d9 cb		 fxch	 ST(3)
  0048e	de e1		 fsubrp	 ST(1), ST(0)

; 253  : 		v = s_l*t_h + t_l*ss;

  00490	dc 4d e0	 fmul	 QWORD PTR _ss$1$[ebp]
  00493	d9 ca		 fxch	 ST(2)
  00495	de cb		 fmulp	 ST(3), ST(0)
  00497	d9 c9		 fxch	 ST(1)
  00499	de c2		 faddp	 ST(2), ST(0)

; 254  : 		/* 2/(3log2)*(ss+...) */
; 255  : 		p_h = u + v;

  0049b	d9 c1		 fld	 ST(1)
  0049d	d8 c1		 fadd	 ST(0), ST(1)

; 256  : 		SET_LOW_WORD(p_h, 0);

  0049f	dd 5d e8	 fstp	 QWORD PTR _sl_u$1[ebp]
  004a2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _sl_u$1[ebp], 0

; 257  : 		p_l = v - (p_h - u);
; 258  : 		z_h = cp_h*p_h;		/* cp_h+cp_l = 2/(3*log2) */

  004a9	dd 45 e8	 fld	 QWORD PTR _sl_u$1[ebp]
  004ac	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3feec709e0000000
  004b2	d8 c9		 fmul	 ST(0), ST(1)
  004b4	d9 c1		 fld	 ST(1)
  004b6	de e3		 fsubrp	 ST(3), ST(0)
  004b8	d9 cb		 fxch	 ST(3)
  004ba	de e2		 fsubrp	 ST(2), ST(0)

; 259  : 		z_l = cp_l*p_h + p_l*cp + dp_l[k];

  004bc	d9 c9		 fxch	 ST(1)
  004be	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3feec709dc3a03fd
  004c4	d9 c9		 fxch	 ST(1)
  004c6	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e3e2fe0145b01f5
  004cc	de e9		 fsubp	 ST(1), ST(0)
  004ce	dc 04 d5 00 00
	00 00		 fadd	 QWORD PTR _dp_l[edx*8]

; 260  : 		/* log2(ax) = (ss+..)*2/(3*log2) = n + dp_h + z_h + z_l */
; 261  : 		t = (double)n;

  004d5	db 45 0c	 fild	 DWORD PTR _n$[ebp]

; 262  : 		t1 = (((z_h + z_l) + dp_h[k]) + t);

  004d8	d9 c1		 fld	 ST(1)
  004da	d8 c3		 fadd	 ST(0), ST(3)
  004dc	dc 04 d5 00 00
	00 00		 fadd	 QWORD PTR _dp_h[edx*8]
  004e3	d8 c1		 fadd	 ST(0), ST(1)

; 263  : 		SET_LOW_WORD(t1, 0);

  004e5	dd 5d 08	 fstp	 QWORD PTR _sl_u$8[ebp]
  004e8	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _sl_u$8[ebp], 0
  004ef	dd 45 08	 fld	 QWORD PTR _sl_u$8[ebp]

; 264  : 		t2 = z_l - (((t1 - t) - dp_h[k]) - z_h);

  004f2	d9 c0		 fld	 ST(0)
  004f4	de e2		 fsubrp	 ST(2), ST(0)
  004f6	d9 c9		 fxch	 ST(1)
  004f8	dc 24 d5 00 00
	00 00		 fsub	 QWORD PTR _dp_h[edx*8]
  004ff	de e3		 fsubrp	 ST(3), ST(0)
  00501	d9 c9		 fxch	 ST(1)
  00503	de e2		 fsubrp	 ST(2), ST(0)
  00505	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00508	d9 e8		 fld1
  0050a	d9 ca		 fxch	 ST(2)
  0050c	d9 cb		 fxch	 ST(3)
  0050e	d9 c9		 fxch	 ST(1)
  00510	d9 ca		 fxch	 ST(2)
  00512	d9 c9		 fxch	 ST(1)
$LN58@pow:

; 265  : 	}
; 266  : 
; 267  : 	/* split up y into y1+y2 and compute (y1+y2)*(t1+t2) */
; 268  : 	y1 = y;
; 269  : 	SET_LOW_WORD(y1, 0);

  00514	d9 ca		 fxch	 ST(2)
  00516	dd 55 10	 fst	 QWORD PTR _sl_u$15[ebp]

; 270  : 	p_l = (y - y1)*t1 + y*t2;

  00519	d9 c0		 fld	 ST(0)
  0051b	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _sl_u$15[ebp], 0
  00522	dd 45 10	 fld	 QWORD PTR _sl_u$15[ebp]
  00525	dc e9		 fsub	 ST(1), ST(0)
  00527	d9 c9		 fxch	 ST(1)
  00529	d8 cd		 fmul	 ST(0), ST(5)
  0052b	d9 cc		 fxch	 ST(4)
  0052d	de ca		 fmulp	 ST(2), ST(0)
  0052f	d9 cb		 fxch	 ST(3)
  00531	de c1		 faddp	 ST(1), ST(0)

; 271  : 	p_h = y1*t1;

  00533	d9 ca		 fxch	 ST(2)
  00535	de cb		 fmulp	 ST(3), ST(0)

; 272  : 	z = p_l + p_h;

  00537	d9 c1		 fld	 ST(1)
  00539	d8 c3		 fadd	 ST(0), ST(3)

; 273  : 	EXTRACT_WORDS(j, i, z);

  0053b	dd 55 10	 fst	 QWORD PTR _ew_u$14[ebp]

; 274  : 	if (j >= 0x40900000) {				/* z >= 1024 */

  0053e	8b 7d 14	 mov	 edi, DWORD PTR _ew_u$14[ebp+4]
  00541	81 ff 00 00 90
	40		 cmp	 edi, 1083179008		; 40900000H
  00547	7c 3d		 jl	 SHORT $LN25@pow

; 275  : 		if (((j - 0x40900000) | i) != 0)			/* if z > 1024 */

  00549	8d 87 00 00 70
	bf		 lea	 eax, DWORD PTR [edi-1083179008]
  0054f	0b 45 10	 or	 eax, DWORD PTR _ew_u$14[ebp]
  00552	74 1c		 je	 SHORT $LN24@pow
  00554	dd d8		 fstp	 ST(0)
$LN300@pow:
  00556	dd da		 fstp	 ST(2)
  00558	dd d8		 fstp	 ST(0)
  0055a	dd d8		 fstp	 ST(0)

; 276  : 			return s*huge*huge;			/* overflow */

  0055c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@7e37e43c8800759c
  00562	dd 45 f0	 fld	 QWORD PTR _s$1$[ebp]
  00565	d8 c9		 fmul	 ST(0), ST(1)
  00567	5f		 pop	 edi
  00568	5e		 pop	 esi
  00569	5b		 pop	 ebx
  0056a	de c9		 fmulp	 ST(1), ST(0)

; 318  : }

  0056c	8b e5		 mov	 esp, ebp
  0056e	5d		 pop	 ebp
  0056f	c3		 ret	 0
$LN24@pow:

; 277  : 		else {
; 278  : 			if (p_l + ovt>z - p_h) return s*huge*huge;	/* overflow */

  00570	d9 c2		 fld	 ST(2)
  00572	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3c971547652b82fe
  00578	d9 c9		 fxch	 ST(1)
  0057a	d8 e4		 fsub	 ST(0), ST(4)
  0057c	d9 c9		 fxch	 ST(1)
  0057e	df f1		 fcomip	 ST(1)
  00580	dd d8		 fstp	 ST(0)
  00582	76 59		 jbe	 SHORT $LN17@pow
  00584	eb d0		 jmp	 SHORT $LN300@pow
$LN25@pow:

; 279  : 		}
; 280  : 	}
; 281  : 	else if ((j & 0x7fffffff) >= 0x4090cc00) {	/* z <= -1075 */

  00586	8b c7		 mov	 eax, edi
  00588	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  0058d	3d 00 cc 90 40	 cmp	 eax, 1083231232		; 4090cc00H
  00592	7c 47		 jl	 SHORT $LN274@pow

; 282  : 		if (((j - 0xc090cc00) | i) != 0) 		/* z < -1075 */

  00594	8d 87 00 34 6f
	3f		 lea	 eax, DWORD PTR [edi+1064252416]
  0059a	0b 45 10	 or	 eax, DWORD PTR _ew_u$14[ebp]
  0059d	74 1c		 je	 SHORT $LN19@pow

; 283  : 			return s*tiny*tiny;		/* underflow */

  0059f	dd d8		 fstp	 ST(0)
  005a1	dd da		 fstp	 ST(2)
  005a3	dd d8		 fstp	 ST(0)
  005a5	dd d8		 fstp	 ST(0)
  005a7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@01a56e1fc2f8f359
  005ad	dd 45 f0	 fld	 QWORD PTR _s$1$[ebp]
  005b0	d8 c9		 fmul	 ST(0), ST(1)
  005b2	5f		 pop	 edi
  005b3	5e		 pop	 esi
  005b4	5b		 pop	 ebx
  005b5	de c9		 fmulp	 ST(1), ST(0)

; 318  : }

  005b7	8b e5		 mov	 esp, ebp
  005b9	5d		 pop	 ebp
  005ba	c3		 ret	 0
$LN19@pow:

; 284  : 		else {
; 285  : 			if (p_l <= z - p_h) return s*tiny*tiny;	/* underflow */

  005bb	d8 e3		 fsub	 ST(0), ST(3)
  005bd	df f2		 fcomip	 ST(2)
  005bf	72 1c		 jb	 SHORT $LN17@pow
  005c1	dd da		 fstp	 ST(2)
  005c3	dd d8		 fstp	 ST(0)
  005c5	dd d8		 fstp	 ST(0)
  005c7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@01a56e1fc2f8f359
  005cd	dd 45 f0	 fld	 QWORD PTR _s$1$[ebp]
  005d0	d8 c9		 fmul	 ST(0), ST(1)
  005d2	5f		 pop	 edi
  005d3	5e		 pop	 esi
  005d4	5b		 pop	 ebx
  005d5	de c9		 fmulp	 ST(1), ST(0)

; 318  : }

  005d7	8b e5		 mov	 esp, ebp
  005d9	5d		 pop	 ebp
  005da	c3		 ret	 0
$LN274@pow:
  005db	dd d8		 fstp	 ST(0)
$LN17@pow:

; 286  : 		}
; 287  : 	}
; 288  : 	/*
; 289  : 	* compute 2**(p_h+p_l)
; 290  : 	*/
; 291  : 	i = j & 0x7fffffff;

  005dd	8b cf		 mov	 ecx, edi

; 292  : 	k = (i >> 20) - 0x3ff;
; 293  : 	n = 0;

  005df	33 f6		 xor	 esi, esi
  005e1	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 294  : 	if (i>0x3fe00000) {		/* if |z| > 0.5, set n = [z+0.5] */

  005e7	81 f9 00 00 e0
	3f		 cmp	 ecx, 1071644672		; 3fe00000H
  005ed	7e 5a		 jle	 SHORT $LN16@pow

; 295  : 		n = j + (0x00100000 >> (k + 1));
; 296  : 		k = ((n & 0x7fffffff) >> 20) - 0x3ff;	/* new k for n */
; 297  : 		t = zero;
; 298  : 		SET_HIGH_WORD(t, n&~(0x000fffff >> k));

  005ef	d9 ee		 fldz
  005f1	be 00 00 10 00	 mov	 esi, 1048576		; 00100000H
  005f6	c1 f9 14	 sar	 ecx, 20			; 00000014H
  005f9	b8 ff ff 0f 00	 mov	 eax, 1048575		; 000fffffH
  005fe	81 e9 fe 03 00
	00		 sub	 ecx, 1022		; 000003feH
  00604	d3 fe		 sar	 esi, cl
  00606	03 f7		 add	 esi, edi
  00608	8b d6		 mov	 edx, esi
  0060a	c1 fa 14	 sar	 edx, 20			; 00000014H
  0060d	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00613	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  00619	8b ca		 mov	 ecx, edx
  0061b	d3 f8		 sar	 eax, cl

; 299  : 		n = ((n & 0x000fffff) | 0x00100000) >> (20 - k);

  0061d	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00622	f7 d0		 not	 eax
  00624	2b ca		 sub	 ecx, edx
  00626	23 c6		 and	 eax, esi
  00628	81 e6 ff ff 0f
	00		 and	 esi, 1048575		; 000fffffH
  0062e	81 ce 00 00 10
	00		 or	 esi, 1048576		; 00100000H
  00634	d3 fe		 sar	 esi, cl
  00636	dd 5d 10	 fstp	 QWORD PTR _sh_u$13[ebp]
  00639	89 45 14	 mov	 DWORD PTR _sh_u$13[ebp+4], eax

; 300  : 		if (j<0) n = -n;

  0063c	85 ff		 test	 edi, edi
  0063e	79 02		 jns	 SHORT $LN12@pow
  00640	f7 de		 neg	 esi
$LN12@pow:

; 301  : 		p_h -= t;

  00642	d9 ca		 fxch	 ST(2)
  00644	dc 65 10	 fsub	 QWORD PTR _sh_u$13[ebp]
  00647	d9 ca		 fxch	 ST(2)
$LN16@pow:

; 302  : 	}
; 303  : 	t = p_l + p_h;

  00649	d9 c1		 fld	 ST(1)

; 304  : 	SET_LOW_WORD(t, 0);
; 305  : 	u = t*lg2_h;
; 306  : 	v = (p_l - (t - p_h))*lg2 + t*lg2_l;
; 307  : 	z = u + v;
; 308  : 	w = v - (z - u);
; 309  : 	t = z*z;
; 310  : 	t1 = z - t*(P1 + t*(P2 + t*(P3 + t*(P4 + t*P5))));
; 311  : 	r = (z*t1) / (t1 - two) - (w + z*w);
; 312  : 	z = one - (r - z);
; 313  : 	GET_HIGH_WORD(j, z);
; 314  : 	j += (n << 20);

  0064b	8b c6		 mov	 eax, esi
  0064d	d8 c3		 fadd	 ST(0), ST(3)
  0064f	c1 e0 14	 shl	 eax, 20			; 00000014H
  00652	dd 5d 10	 fstp	 QWORD PTR _sl_u$12[ebp]
  00655	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _sl_u$12[ebp], 0
  0065c	dd 45 10	 fld	 QWORD PTR _sl_u$12[ebp]
  0065f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe62e4300000000
  00665	d8 c9		 fmul	 ST(0), ST(1)
  00667	d9 c1		 fld	 ST(1)
  00669	de e5		 fsubrp	 ST(5), ST(0)
  0066b	d9 cb		 fxch	 ST(3)
  0066d	de e4		 fsubrp	 ST(4), ST(0)
  0066f	d9 cb		 fxch	 ST(3)
  00671	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe62e42fefa39ef
  00677	d9 cb		 fxch	 ST(3)
  00679	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e205c610ca86c39
  0067f	de eb		 fsubp	 ST(3), ST(0)
  00681	d9 c2		 fld	 ST(2)
  00683	d8 c2		 fadd	 ST(0), ST(2)
  00685	d9 c0		 fld	 ST(0)
  00687	de e3		 fsubrp	 ST(3), ST(0)
  00689	d9 cb		 fxch	 ST(3)
  0068b	de e2		 fsubrp	 ST(2), ST(0)
  0068d	d9 c2		 fld	 ST(2)
  0068f	d8 cb		 fmul	 ST(0), ST(3)
  00691	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3e66376972bea4d0
  00697	d8 c9		 fmul	 ST(0), ST(1)
  00699	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ebbbd41c5d26bf1
  0069f	d8 c9		 fmul	 ST(0), ST(1)
  006a1	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f11566aaf25de2c
  006a7	d8 c9		 fmul	 ST(0), ST(1)
  006a9	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3f66c16c16bebd93
  006af	d8 c9		 fmul	 ST(0), ST(1)
  006b1	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fc555555555553e
  006b7	de c9		 fmulp	 ST(1), ST(0)
  006b9	d8 eb		 fsubr	 ST(0), ST(3)
  006bb	d9 c0		 fld	 ST(0)
  006bd	d8 cc		 fmul	 ST(0), ST(4)
  006bf	d9 c9		 fxch	 ST(1)
  006c1	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4000000000000000
  006c7	de f9		 fdivp	 ST(1), ST(0)
  006c9	d9 c2		 fld	 ST(2)
  006cb	d8 cc		 fmul	 ST(0), ST(4)
  006cd	de c3		 faddp	 ST(3), ST(0)
  006cf	de e2		 fsubrp	 ST(2), ST(0)
  006d1	d9 c9		 fxch	 ST(1)
  006d3	de e2		 fsubrp	 ST(2), ST(0)
  006d5	de e1		 fsubrp	 ST(1), ST(0)
  006d7	dd 55 10	 fst	 QWORD PTR _gh_u$11[ebp]
  006da	03 45 14	 add	 eax, DWORD PTR _gh_u$11[ebp+4]

; 315  : 	if ((j >> 20) <= 0) z = scalbn(z, n);	/* subnormal output */

  006dd	a9 00 00 f0 ff	 test	 eax, -1048576		; fff00000H
  006e2	7f 19		 jg	 SHORT $LN3@pow
  006e4	56		 push	 esi
  006e5	83 ec 08	 sub	 esp, 8
  006e8	dd 1c 24	 fstp	 QWORD PTR [esp]
  006eb	e8 00 00 00 00	 call	 _scalbn

; 317  : 	return s*z;

  006f0	dc 4d f0	 fmul	 QWORD PTR _s$1$[ebp]
  006f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  006f6	5f		 pop	 edi
  006f7	5e		 pop	 esi
  006f8	5b		 pop	 ebx

; 318  : }

  006f9	8b e5		 mov	 esp, ebp
  006fb	5d		 pop	 ebp
  006fc	c3		 ret	 0
$LN3@pow:

; 316  : 	else SET_HIGH_WORD(z, j);

  006fd	dd 5d 10	 fstp	 QWORD PTR _sh_u$10[ebp]
  00700	5f		 pop	 edi
  00701	89 45 14	 mov	 DWORD PTR _sh_u$10[ebp+4], eax
  00704	dd 45 10	 fld	 QWORD PTR _sh_u$10[ebp]

; 317  : 	return s*z;

  00707	dc 4d f0	 fmul	 QWORD PTR _s$1$[ebp]
  0070a	5e		 pop	 esi
  0070b	5b		 pop	 ebx

; 318  : }

  0070c	8b e5		 mov	 esp, ebp
  0070e	5d		 pop	 ebp
  0070f	c3		 ret	 0
$LN102@pow:

; 119  : 		return (x + 0.0) + (y + 0.0);

  00710	d9 ee		 fldz
  00712	dc c2		 fadd	 ST(2), ST(0)
  00714	de c1		 faddp	 ST(1), ST(0)
  00716	de c1		 faddp	 ST(1), ST(0)
$LN112@pow:
  00718	5f		 pop	 edi
  00719	5e		 pop	 esi
  0071a	5b		 pop	 ebx

; 318  : }

  0071b	8b e5		 mov	 esp, ebp
  0071d	5d		 pop	 ebp
  0071e	c3		 ret	 0
_pow	ENDP
_TEXT	ENDS
END
