; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\sin.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_sin_off_tbl DQ	00000000000000000r		; 0
	DQ	0bff921fb54442d18r		; -1.5708
	DQ	00000000000000000r		; 0
	DQ	0bff921fb54442d18r		; -1.5708
_sin_sign_tbl DQ 03ff0000000000000r		; 1
	DQ	0bff0000000000000r		; -1
	DQ	0bff0000000000000r		; -1
	DQ	03ff0000000000000r		; 1
_DATA	ENDS
PUBLIC	_sinh
PUBLIC	_sin
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ca6827863b97d97
PUBLIC	__real@3d2ae7f3e733b81f
PUBLIC	__real@3da93974a8c07c9d
PUBLIC	__real@3e21eed8eff8d898
PUBLIC	__real@3e927e4fb7789f5c
PUBLIC	__real@3efa01a01a01a01a
PUBLIC	__real@3f56c16c16c16c17
PUBLIC	__real@3fa5555555555555
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe45f306dc9c883
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb54442d18
EXTRN	__CIexp:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe45f306dc9c883
CONST	SEGMENT
__real@3fe45f306dc9c883 DQ 03fe45f306dc9c883r	; 0.63662
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fa5555555555555
CONST	SEGMENT
__real@3fa5555555555555 DQ 03fa5555555555555r	; 0.0416667
CONST	ENDS
;	COMDAT __real@3f56c16c16c16c17
CONST	SEGMENT
__real@3f56c16c16c16c17 DQ 03f56c16c16c16c17r	; 0.00138889
CONST	ENDS
;	COMDAT __real@3efa01a01a01a01a
CONST	SEGMENT
__real@3efa01a01a01a01a DQ 03efa01a01a01a01ar	; 2.48016e-005
CONST	ENDS
;	COMDAT __real@3e927e4fb7789f5c
CONST	SEGMENT
__real@3e927e4fb7789f5c DQ 03e927e4fb7789f5cr	; 2.75573e-007
CONST	ENDS
;	COMDAT __real@3e21eed8eff8d898
CONST	SEGMENT
__real@3e21eed8eff8d898 DQ 03e21eed8eff8d898r	; 2.08768e-009
CONST	ENDS
;	COMDAT __real@3da93974a8c07c9d
CONST	SEGMENT
__real@3da93974a8c07c9d DQ 03da93974a8c07c9dr	; 1.14707e-011
CONST	ENDS
;	COMDAT __real@3d2ae7f3e733b81f
CONST	SEGMENT
__real@3d2ae7f3e733b81f DQ 03d2ae7f3e733b81fr	; 4.77948e-014
CONST	ENDS
;	COMDAT __real@3ca6827863b97d97
CONST	SEGMENT
__real@3ca6827863b97d97 DQ 03ca6827863b97d97r	; 1.56192e-016
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\sin.c
;	COMDAT _sin
_TEXT	SEGMENT
tv244 = 8						; size = 8
_x$ = 8							; size = 8
_quadrant$ = 12						; size = 4
_sin	PROC						; COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 22   :     int quadrant;
; 23   :     double x2, result;
; 24   : 
; 25   :     /* Calculate the quadrant */
; 26   :     quadrant = (int)(x * (2./M_PI));

  00003	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00006	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe45f306dc9c883
  0000c	d8 c9		 fmul	 ST(0), ST(1)
  0000e	e8 00 00 00 00	 call	 __ftol2_sse
  00013	89 45 0c	 mov	 DWORD PTR _quadrant$[ebp], eax

; 27   : 
; 28   :     /* Get offset inside quadrant */
; 29   :     x = x - quadrant * (M_PI/2.);
; 30   : 
; 31   :     /* Normalize quadrant to [0..3] */
; 32   :     quadrant = (quadrant - 1) & 0x3;

  00016	48		 dec	 eax
  00017	db 45 0c	 fild	 DWORD PTR _quadrant$[ebp]
  0001a	83 e0 03	 and	 eax, 3
  0001d	dd 5d 08	 fstp	 QWORD PTR tv244[ebp]
  00020	dd 45 08	 fld	 QWORD PTR tv244[ebp]
  00023	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3ff921fb54442d18
  00029	de e9		 fsubp	 ST(1), ST(0)

; 33   : 
; 34   :     /* Fixup value for the generic function */
; 35   :     x += sin_off_tbl[quadrant];

  0002b	dc 04 c5 00 00
	00 00		 fadd	 QWORD PTR _sin_off_tbl[eax*8]

; 36   : 
; 37   :     /* Calculate the negative of the square of x */
; 38   :     x2 = - (x * x);

  00032	dc c8		 fmul	 ST(0), ST(0)
  00034	d9 e0		 fchs

; 39   : 
; 40   :     /* This is an unrolled taylor series using <PRECISION> iterations
; 41   :      * Example with 4 iterations:
; 42   :      * result = 1 - x^2/2! + x^4/4! - x^6/6! + x^8/8!
; 43   :      * To save multiplications and to keep the precision high, it's performed
; 44   :      * like this:
; 45   :      * result = 1 - x^2 * (1/2! - x^2 * (1/4! - x^2 * (1/6! - x^2 * (1/8!))))
; 46   :      */
; 47   : 
; 48   :     /* Start with 0, compiler will optimize this away */
; 49   :     result = 0;
; 50   : 
; 51   : #if (PRECISION >= 10)
; 52   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20);
; 53   :     result *= x2;
; 54   : #endif
; 55   : #if (PRECISION >= 9)
; 56   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18);
; 57   :     result *= x2;

  00036	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3ca6827863b97d97
  0003c	d8 c9		 fmul	 ST(0), ST(1)

; 58   : #endif
; 59   : #if (PRECISION >= 8)
; 60   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16);

  0003e	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3d2ae7f3e733b81f

; 61   :     result *= x2;

  00044	d8 c9		 fmul	 ST(0), ST(1)

; 62   : #endif
; 63   : #if (PRECISION >= 7)
; 64   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12*13*14);

  00046	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3da93974a8c07c9d

; 65   :     result *= x2;

  0004c	d8 c9		 fmul	 ST(0), ST(1)

; 66   : #endif
; 67   : #if (PRECISION >= 6)
; 68   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12);

  0004e	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3e21eed8eff8d898

; 69   :     result *= x2;

  00054	d8 c9		 fmul	 ST(0), ST(1)

; 70   : #endif
; 71   : #if (PRECISION >= 5)
; 72   :     result += 1./(1.*2*3*4*5*6*7*8*9*10);

  00056	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3e927e4fb7789f5c

; 73   :     result *= x2;

  0005c	d8 c9		 fmul	 ST(0), ST(1)

; 74   : #endif
; 75   :     result += 1./(1.*2*3*4*5*6*7*8);

  0005e	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3efa01a01a01a01a

; 76   :     result *= x2;

  00064	d8 c9		 fmul	 ST(0), ST(1)

; 77   : 
; 78   :     result += 1./(1.*2*3*4*5*6);

  00066	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3f56c16c16c16c17

; 79   :     result *= x2;

  0006c	d8 c9		 fmul	 ST(0), ST(1)

; 80   : 
; 81   :     result += 1./(1.*2*3*4);

  0006e	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fa5555555555555

; 82   :     result *= x2;

  00074	d8 c9		 fmul	 ST(0), ST(1)

; 83   : 
; 84   :     result += 1./(1.*2);

  00076	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000

; 85   :     result *= x2;

  0007c	de c9		 fmulp	 ST(1), ST(0)

; 86   : 
; 87   :     result += 1;

  0007e	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3ff0000000000000

; 88   : 
; 89   :     /* Apply correct sign */
; 90   :     result *= sin_sign_tbl[quadrant];

  00084	dc 0c c5 00 00
	00 00		 fmul	 QWORD PTR _sin_sign_tbl[eax*8]

; 91   : 
; 92   :     return result;
; 93   : }

  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_sin	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\sin.c
;	COMDAT _sinh
_TEXT	SEGMENT
_x$ = 8							; size = 8
_sinh	PROC						; COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 101  : 	if(x >= 0.0)

  00003	d9 ee		 fldz
  00005	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00008	db f1		 fcomi	 ST(1)
  0000a	dd d9		 fstp	 ST(1)
  0000c	72 13		 jb	 SHORT $LN2@sinh

; 102  : 	{
; 103  : 		const double epos = exp(x);

  0000e	e8 00 00 00 00	 call	 __CIexp

; 104  : 		return (epos - 1.0/epos) / 2.0;

  00013	d9 e8		 fld1
  00015	d8 f1		 fdiv	 ST(0), ST(1)
  00017	de e9		 fsubp	 ST(1), ST(0)

; 109  : 		return (1.0/eneg - eneg) / 2.0;

  00019	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000

; 110  : 	}
; 111  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN2@sinh:

; 105  : 	}
; 106  : 	else
; 107  : 	{
; 108  : 		const double eneg = exp(-x);

  00021	d9 e0		 fchs
  00023	e8 00 00 00 00	 call	 __CIexp

; 109  : 		return (1.0/eneg - eneg) / 2.0;

  00028	d9 e8		 fld1
  0002a	d8 f1		 fdiv	 ST(0), ST(1)
  0002c	de e1		 fsubrp	 ST(1), ST(0)
  0002e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000

; 110  : 	}
; 111  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_sinh	ENDP
_TEXT	ENDS
END
