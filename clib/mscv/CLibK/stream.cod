; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\stdio\stream.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@		; `string'
;	COMDAT ??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@
CONST	SEGMENT
??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@ DB '(null)', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?_nullstring@?1??streamout@@9@9 DD FLAT:??_C@_06OJHGLDPL@?$CInull?$CJ?$AA@ ; `streamout'::`2'::_nullstring
_DATA	ENDS
CONST	SEGMENT
?digits_l@?1??format_float@@9@9 DB '0123456789abcdef0x', 00H ; `format_float'::`2'::digits_l
	ORG $+1
?digits_u@?1??format_float@@9@9 DB '0123456789ABCDEF0X', 00H ; `format_float'::`2'::digits_u
	ORG $+1
?_nan@?1??format_float@@9@9 DB '#QNAN', 00H		; `format_float'::`2'::_nan
	ORG $+2
?_infinity@?1??format_float@@9@9 DB '#INF', 00H		; `format_float'::`2'::_infinity
	ORG $+3
?digits_l@?1??streamout@@9@9 DB '0123456789abcdef0x', 00H ; `streamout'::`2'::digits_l
	ORG $+1
?digits_u@?1??streamout@@9@9 DB '0123456789ABCDEF0X', 00H ; `streamout'::`2'::digits_u
CONST	ENDS
PUBLIC	_format_float
PUBLIC	_streamout
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@43e0000000000000
EXTRN	__finite:PROC
EXTRN	__isnan:PROC
EXTRN	_VideoPutChar:PROC
EXTRN	__CIlog10:PROC
EXTRN	__CIpow:PROC
EXTRN	__aulldvrm:PROC
EXTRN	__aullrem:PROC
EXTRN	__ftol2:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	_floor:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+018
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _streamout
_TEXT	SEGMENT
_buffer$ = -104						; size = 50
_flags$1$ = -52						; size = 4
tv661 = -52						; size = 4
_prefixlen$1$ = -48					; size = 4
tv604 = -48						; size = 4
_prefix$ = -48						; size = 4
_digits$1$ = -44					; size = 4
tv527 = -40						; size = 8
_base$1$ = -36						; size = 4
_val64$2$ = -32						; size = 4
_written$4$ = -32					; size = 4
_val64$1$ = -28						; size = 4
_string$ = -28						; size = 4
_cnt$ = -24						; size = 4
_prefix$1$ = -20					; size = 4
_chr$ = -16						; size = 1
_padding$2$ = -12					; size = 4
_string$1$ = -8						; size = 4
_written_all$1$ = -4					; size = 4
_out$ = 8						; size = 4
_precision$2$ = 12					; size = 4
tv659 = 12						; size = 4
tv603 = 12						; size = 4
_size$ = 12						; size = 4
_format$ = 16						; size = 4
_argptr$ = 20						; size = 4
_streamout PROC						; COMDAT

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H

; 269  : 	static const char digits_l[] = "0123456789abcdef0x";
; 270  : 	static const char digits_u[] = "0123456789ABCDEF0X";
; 271  : 	static const char *_nullstring = "(null)";
; 272  : 	char buffer[BUFFER_SIZE + 1];
; 273  : 	uint32_t cnt = size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]

; 274  : 	char chr, *string;
; 275  : 	STRING *nt_string;
; 276  : 	const char *digits, *prefix;
; 277  : 	int base, fieldwidth, precision, padding;
; 278  : 	size_t prefixlen, len;
; 279  : 	int written = 1, written_all = 0;

  00009	ba 01 00 00 00	 mov	 edx, 1
  0000e	53		 push	 ebx
  0000f	56		 push	 esi

; 280  : 	unsigned int flags;
; 281  : 	unsigned __int64 val64;
; 282  : 
; 283  : 	buffer[BUFFER_SIZE] = '\0';

  00010	8b 75 10	 mov	 esi, DWORD PTR _format$[ebp]
  00013	57		 push	 edi
  00014	33 ff		 xor	 edi, edi
  00016	89 45 e8	 mov	 DWORD PTR _cnt$[ebp], eax
  00019	89 55 e0	 mov	 DWORD PTR _written$4$[ebp], edx
  0001c	89 7d fc	 mov	 DWORD PTR _written_all$1$[ebp], edi
  0001f	c6 45 c9 00	 mov	 BYTE PTR _buffer$[ebp+49], 0
$LL112@streamout:

; 286  : 	{
; 287  : 		chr = *format++;

  00023	8a 06		 mov	 al, BYTE PTR [esi]
  00025	46		 inc	 esi

; 288  : 
; 289  : 		/* Check for end of format string */
; 290  : 		if (chr == '\0') break;

  00026	84 c0		 test	 al, al
  00028	0f 84 2d 06 00
	00		 je	 $LN111@streamout

; 291  : 
; 292  : 		/* Check for 'normal' character or double % */
; 293  : 		if ((chr != ('%')) ||
; 294  : 			(chr = *format++) == ('%'))

  0002e	3c 25		 cmp	 al, 37			; 00000025H
  00030	0f 85 fc 05 00
	00		 jne	 $LN108@streamout
  00036	8a 06		 mov	 al, BYTE PTR [esi]
  00038	46		 inc	 esi
  00039	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0003c	3c 25		 cmp	 al, 37			; 00000025H
  0003e	0f 84 ee 05 00
	00		 je	 $LN108@streamout

; 299  : 			continue;
; 300  : 		}
; 301  : 
; 302  : 		/* Handle flags */
; 303  : 		flags = 0;

  00044	33 db		 xor	 ebx, ebx
$LL106@streamout:

; 304  : 		while (1)
; 305  : 		{
; 306  : 			if (chr == ('-')) flags |= FLAG_ALIGN_LEFT;

  00046	3c 2d		 cmp	 al, 45			; 0000002dH
  00048	75 0b		 jne	 SHORT $LN104@streamout

; 311  : 			else break;
; 312  : 			chr = *format++;

  0004a	8a 06		 mov	 al, BYTE PTR [esi]
  0004c	83 cb 01	 or	 ebx, 1
  0004f	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00052	46		 inc	 esi

; 313  : 		}

  00053	eb f1		 jmp	 SHORT $LL106@streamout
$LN104@streamout:

; 307  : 			else if (chr == ('+')) flags |= FLAG_FORCE_SIGN;

  00055	3c 2b		 cmp	 al, 43			; 0000002bH
  00057	75 0b		 jne	 SHORT $LN102@streamout

; 311  : 			else break;
; 312  : 			chr = *format++;

  00059	8a 06		 mov	 al, BYTE PTR [esi]
  0005b	83 cb 02	 or	 ebx, 2
  0005e	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00061	46		 inc	 esi

; 313  : 		}

  00062	eb e2		 jmp	 SHORT $LL106@streamout
$LN102@streamout:

; 308  : 			else if (chr == (' ')) flags |= FLAG_FORCE_SIGNSP;

  00064	3c 20		 cmp	 al, 32			; 00000020H
  00066	75 0b		 jne	 SHORT $LN100@streamout

; 311  : 			else break;
; 312  : 			chr = *format++;

  00068	8a 06		 mov	 al, BYTE PTR [esi]
  0006a	83 cb 04	 or	 ebx, 4
  0006d	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00070	46		 inc	 esi

; 313  : 		}

  00071	eb d3		 jmp	 SHORT $LL106@streamout
$LN100@streamout:

; 309  : 			else if (chr == ('0')) flags |= FLAG_PAD_ZERO;

  00073	3c 30		 cmp	 al, 48			; 00000030H
  00075	75 0b		 jne	 SHORT $LN98@streamout

; 311  : 			else break;
; 312  : 			chr = *format++;

  00077	8a 06		 mov	 al, BYTE PTR [esi]
  00079	83 cb 08	 or	 ebx, 8
  0007c	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0007f	46		 inc	 esi

; 313  : 		}

  00080	eb c4		 jmp	 SHORT $LL106@streamout
$LN98@streamout:

; 310  : 			else if (chr == ('#')) flags |= FLAG_SPECIAL;

  00082	3c 23		 cmp	 al, 35			; 00000023H
  00084	75 0b		 jne	 SHORT $LN96@streamout

; 311  : 			else break;
; 312  : 			chr = *format++;

  00086	8a 06		 mov	 al, BYTE PTR [esi]
  00088	83 cb 10	 or	 ebx, 16			; 00000010H
  0008b	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0008e	46		 inc	 esi

; 313  : 		}

  0008f	eb b5		 jmp	 SHORT $LL106@streamout
$LN96@streamout:

; 314  : 
; 315  : 		/* Handle field width modifier */
; 316  : 		if (chr == ('*'))

  00091	3c 2a		 cmp	 al, 42			; 0000002aH
  00093	75 23		 jne	 SHORT $LN94@streamout

; 317  : 		{
; 318  : 			fieldwidth = va_arg(argptr, int);

  00095	8b 7d 14	 mov	 edi, DWORD PTR _argptr$[ebp]
  00098	83 c7 04	 add	 edi, 4
  0009b	89 7d 14	 mov	 DWORD PTR _argptr$[ebp], edi
  0009e	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
  000a1	89 4d f4	 mov	 DWORD PTR _padding$2$[ebp], ecx

; 319  : 			if (fieldwidth < 0)

  000a4	85 c9		 test	 ecx, ecx
  000a6	79 08		 jns	 SHORT $LN93@streamout

; 320  : 			{
; 321  : 				flags |= FLAG_ALIGN_LEFT;

  000a8	83 cb 01	 or	 ebx, 1

; 322  : 				fieldwidth = -fieldwidth;

  000ab	f7 d9		 neg	 ecx
  000ad	89 4d f4	 mov	 DWORD PTR _padding$2$[ebp], ecx
$LN93@streamout:

; 323  : 			}
; 324  : 			chr = *format++;

  000b0	8a 06		 mov	 al, BYTE PTR [esi]
  000b2	46		 inc	 esi
  000b3	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al

; 325  : 		}
; 326  : 		else

  000b6	eb 29		 jmp	 SHORT $LN90@streamout
$LN94@streamout:

; 327  : 		{
; 328  : 			fieldwidth = 0;

  000b8	33 c9		 xor	 ecx, ecx
  000ba	89 4d f4	 mov	 DWORD PTR _padding$2$[ebp], ecx

; 329  : 			while (chr >= ('0') && chr <= ('9'))

  000bd	3c 30		 cmp	 al, 48			; 00000030H
  000bf	7c 1d		 jl	 SHORT $LN230@streamout
$LL91@streamout:
  000c1	3c 39		 cmp	 al, 57			; 00000039H
  000c3	7f 16		 jg	 SHORT $LN227@streamout

; 330  : 			{
; 331  : 				fieldwidth = fieldwidth * 10 + (chr - ('0'));

  000c5	0f be c0	 movsx	 eax, al
  000c8	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  000cb	8d 49 e8	 lea	 ecx, DWORD PTR [ecx-24]
  000ce	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]

; 332  : 				chr = *format++;

  000d1	8a 06		 mov	 al, BYTE PTR [esi]
  000d3	46		 inc	 esi
  000d4	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  000d7	3c 30		 cmp	 al, 48			; 00000030H
  000d9	7d e6		 jge	 SHORT $LL91@streamout
$LN227@streamout:
  000db	89 4d f4	 mov	 DWORD PTR _padding$2$[ebp], ecx
$LN230@streamout:
  000de	8b 7d 14	 mov	 edi, DWORD PTR _argptr$[ebp]
$LN90@streamout:

; 333  : 			}
; 334  : 		}
; 335  : 
; 336  : 		/* Handle precision modifier */
; 337  : 		if (chr == '.')

  000e1	3c 2e		 cmp	 al, 46			; 0000002eH
  000e3	75 4a		 jne	 SHORT $LN89@streamout

; 338  : 		{
; 339  : 			chr = *format++;

  000e5	8a 06		 mov	 al, BYTE PTR [esi]
  000e7	46		 inc	 esi
  000e8	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al

; 340  : 
; 341  : 			if (chr == ('*'))

  000eb	3c 2a		 cmp	 al, 42			; 0000002aH
  000ed	75 11		 jne	 SHORT $LN88@streamout

; 342  : 			{
; 343  : 				precision = va_arg(argptr, int);
; 344  : 				chr = *format++;

  000ef	8a 06		 mov	 al, BYTE PTR [esi]
  000f1	83 c7 04	 add	 edi, 4
  000f4	89 7d 14	 mov	 DWORD PTR _argptr$[ebp], edi
  000f7	46		 inc	 esi
  000f8	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  000fb	8b 7f fc	 mov	 edi, DWORD PTR [edi-4]

; 345  : 			}
; 346  : 			else

  000fe	eb 32		 jmp	 SHORT $LN241@streamout
$LN88@streamout:

; 347  : 			{
; 348  : 				precision = 0;

  00100	33 ff		 xor	 edi, edi
  00102	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi

; 349  : 				while (chr >= ('0') && chr <= ('9'))

  00105	3c 30		 cmp	 al, 48			; 00000030H
  00107	7c 2c		 jl	 SHORT $LL83@streamout
  00109	8d a4 24 00 00
	00 00		 npad	 7
$LL86@streamout:
  00110	3c 39		 cmp	 al, 57			; 00000039H
  00112	7f 21		 jg	 SHORT $LL83@streamout

; 350  : 				{
; 351  : 					precision = precision * 10 + (chr - ('0'));

  00114	0f be c0	 movsx	 eax, al
  00117	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  0011a	8d 79 e8	 lea	 edi, DWORD PTR [ecx-24]
  0011d	8d 3c 78	 lea	 edi, DWORD PTR [eax+edi*2]

; 352  : 					chr = *format++;

  00120	8a 06		 mov	 al, BYTE PTR [esi]
  00122	46		 inc	 esi
  00123	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi
  00126	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00129	3c 30		 cmp	 al, 48			; 00000030H
  0012b	7d e3		 jge	 SHORT $LL86@streamout

; 353  : 				}
; 354  : 			}

  0012d	eb 06		 jmp	 SHORT $LL83@streamout
$LN89@streamout:

; 355  : 		}
; 356  : 		else precision = -1;

  0012f	83 cf ff	 or	 edi, -1
$LN241@streamout:
  00132	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi
$LL83@streamout:

; 357  : 
; 358  : 		/* Handle argument size prefix */
; 359  : 		do
; 360  : 		{
; 361  : 			if (chr == ('h')) flags |= FLAG_SHORT;

  00135	3c 68		 cmp	 al, 104			; 00000068H
  00137	75 0e		 jne	 SHORT $LN80@streamout

; 385  : 				{
; 386  : 					flags |= FLAG_INTPTR;
; 387  : 				}
; 388  : 				else break;
; 389  : 			}
; 390  : 			else break;
; 391  : 			chr = *format++;

  00139	8a 06		 mov	 al, BYTE PTR [esi]
  0013b	81 cb 00 01 00
	00		 or	 ebx, 256		; 00000100H
  00141	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00144	46		 inc	 esi

; 392  : 		}
; 393  : 		while (USE_MULTISIZE);

  00145	eb ee		 jmp	 SHORT $LL83@streamout
$LN80@streamout:

; 362  : 			else if (chr == ('w')) flags |= FLAG_WIDECHAR;

  00147	3c 77		 cmp	 al, 119			; 00000077H
  00149	75 0e		 jne	 SHORT $LN78@streamout
$LN71@streamout:

; 385  : 				{
; 386  : 					flags |= FLAG_INTPTR;
; 387  : 				}
; 388  : 				else break;
; 389  : 			}
; 390  : 			else break;
; 391  : 			chr = *format++;

  0014b	8a 06		 mov	 al, BYTE PTR [esi]
  0014d	81 cb 00 02 00
	00		 or	 ebx, 512		; 00000200H
  00153	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00156	46		 inc	 esi

; 392  : 		}
; 393  : 		while (USE_MULTISIZE);

  00157	eb dc		 jmp	 SHORT $LL83@streamout
$LN78@streamout:

; 363  : 			else if (chr == ('L')) flags |= 0; // FIXME: long double

  00159	3c 4c		 cmp	 al, 76			; 0000004cH
  0015b	74 73		 je	 SHORT $LN62@streamout

; 364  : 			else if (chr == ('F')) flags |= 0; // FIXME: what is that?

  0015d	3c 46		 cmp	 al, 70			; 00000046H
  0015f	74 6f		 je	 SHORT $LN62@streamout

; 365  : 			else if (chr == ('l'))

  00161	3c 6c		 cmp	 al, 108			; 0000006cH
  00163	75 13		 jne	 SHORT $LN72@streamout

; 366  : 			{
; 367  : 				/* Check if this is the 2nd 'l' in a row */
; 368  : 				if (format[-2] == 'l') flags |= FLAG_INT64;

  00165	38 46 fe	 cmp	 BYTE PTR [esi-2], al
  00168	75 e1		 jne	 SHORT $LN71@streamout

; 385  : 				{
; 386  : 					flags |= FLAG_INTPTR;
; 387  : 				}
; 388  : 				else break;
; 389  : 			}
; 390  : 			else break;
; 391  : 			chr = *format++;

  0016a	8a 06		 mov	 al, BYTE PTR [esi]
  0016c	81 cb 00 04 00
	00		 or	 ebx, 1024		; 00000400H
  00172	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00175	46		 inc	 esi

; 392  : 		}
; 393  : 		while (USE_MULTISIZE);

  00176	eb bd		 jmp	 SHORT $LL83@streamout
$LN72@streamout:

; 369  : 				else flags |= FLAG_LONG;
; 370  : 			}
; 371  : 			else if (chr == ('I'))

  00178	3c 49		 cmp	 al, 73			; 00000049H
  0017a	75 5f		 jne	 SHORT $LN81@streamout

; 372  : 			{
; 373  : 				if (format[0] == ('3') && format[1] == ('2'))

  0017c	8a 0e		 mov	 cl, BYTE PTR [esi]
  0017e	80 f9 33	 cmp	 cl, 51			; 00000033H
  00181	75 12		 jne	 SHORT $LN67@streamout
  00183	80 7e 01 32	 cmp	 BYTE PTR [esi+1], 50	; 00000032H
  00187	75 0c		 jne	 SHORT $LN67@streamout

; 385  : 				{
; 386  : 					flags |= FLAG_INTPTR;
; 387  : 				}
; 388  : 				else break;
; 389  : 			}
; 390  : 			else break;
; 391  : 			chr = *format++;

  00189	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  0018c	83 c6 02	 add	 esi, 2
  0018f	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00192	46		 inc	 esi

; 392  : 		}
; 393  : 		while (USE_MULTISIZE);

  00193	eb a0		 jmp	 SHORT $LL83@streamout
$LN67@streamout:

; 374  : 				{
; 375  : 					format += 2;
; 376  : 				}
; 377  : 				else if (format[0] == ('6') && format[1] == ('4'))

  00195	80 f9 36	 cmp	 cl, 54			; 00000036H
  00198	75 18		 jne	 SHORT $LN65@streamout
  0019a	80 7e 01 34	 cmp	 BYTE PTR [esi+1], 52	; 00000034H
  0019e	75 12		 jne	 SHORT $LN65@streamout

; 385  : 				{
; 386  : 					flags |= FLAG_INTPTR;
; 387  : 				}
; 388  : 				else break;
; 389  : 			}
; 390  : 			else break;
; 391  : 			chr = *format++;

  001a0	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  001a3	83 c6 02	 add	 esi, 2
  001a6	81 cb 00 04 00
	00		 or	 ebx, 1024		; 00000400H
  001ac	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  001af	46		 inc	 esi

; 392  : 		}
; 393  : 		while (USE_MULTISIZE);

  001b0	eb 83		 jmp	 SHORT $LL83@streamout
$LN65@streamout:

; 378  : 				{
; 379  : 					format += 2;
; 380  : 					flags |= FLAG_INT64;
; 381  : 				}
; 382  : 				else if (format[0] == ('x') || format[0] == ('X') ||
; 383  : 					format[0] == ('d') || format[0] == ('i') ||
; 384  : 					format[0] == ('u') || format[0] == ('o'))

  001b2	80 f9 78	 cmp	 cl, 120			; 00000078H
  001b5	74 19		 je	 SHORT $LN62@streamout
  001b7	80 f9 58	 cmp	 cl, 88			; 00000058H
  001ba	74 14		 je	 SHORT $LN62@streamout
  001bc	80 f9 64	 cmp	 cl, 100			; 00000064H
  001bf	74 0f		 je	 SHORT $LN62@streamout
  001c1	80 f9 69	 cmp	 cl, 105			; 00000069H
  001c4	74 0a		 je	 SHORT $LN62@streamout
  001c6	80 f9 75	 cmp	 cl, 117			; 00000075H
  001c9	74 05		 je	 SHORT $LN62@streamout
  001cb	80 f9 6f	 cmp	 cl, 111			; 0000006fH
  001ce	75 0b		 jne	 SHORT $LN81@streamout
$LN62@streamout:

; 385  : 				{
; 386  : 					flags |= FLAG_INTPTR;
; 387  : 				}
; 388  : 				else break;
; 389  : 			}
; 390  : 			else break;
; 391  : 			chr = *format++;

  001d0	8a 06		 mov	 al, BYTE PTR [esi]
  001d2	46		 inc	 esi
  001d3	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al

; 392  : 		}
; 393  : 		while (USE_MULTISIZE);

  001d6	e9 5a ff ff ff	 jmp	 $LL83@streamout
$LN81@streamout:

; 394  : 
; 395  : 		/* Handle the format specifier */
; 396  : 		digits = digits_l;
; 397  : 		string = &buffer[BUFFER_SIZE];

  001db	8d 4d c9	 lea	 ecx, DWORD PTR _buffer$[ebp+49]

; 398  : 		base = 10;
; 399  : 		prefix = 0;
; 400  : 		switch (chr)

  001de	0f be c0	 movsx	 eax, al
  001e1	89 4d f8	 mov	 DWORD PTR _string$1$[ebp], ecx
  001e4	83 c0 bf	 add	 eax, -65		; ffffffbfH
  001e7	89 4d e4	 mov	 DWORD PTR _string$[ebp], ecx
  001ea	33 c9		 xor	 ecx, ecx
  001ec	89 75 10	 mov	 DWORD PTR _format$[ebp], esi
  001ef	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_l@?1??streamout@@9@9
  001f6	c7 45 dc 0a 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], 10 ; 0000000aH
  001fd	89 4d ec	 mov	 DWORD PTR _prefix$1$[ebp], ecx
  00200	89 4d d0	 mov	 DWORD PTR _prefix$[ebp], ecx
  00203	83 f8 37	 cmp	 eax, 55			; 00000037H
  00206	0f 87 20 04 00
	00		 ja	 $LN22@streamout
  0020c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN203@streamout[eax]
  00213	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN249@streamout[eax*4]
$LN57@streamout:

; 401  : 		{
; 402  : 		case ('n'):
; 403  : 			if (flags & FLAG_INT64)
; 404  : 				*va_arg(argptr, __int64*) = written_all;

  0021a	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  0021d	8b 7d fc	 mov	 edi, DWORD PTR _written_all$1$[ebp]
  00220	83 c1 04	 add	 ecx, 4
  00223	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00226	f7 c3 00 04 00
	00		 test	 ebx, 1024		; 00000400H
  0022c	74 13		 je	 SHORT $LN56@streamout
  0022e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00231	8b c7		 mov	 eax, edi
  00233	99		 cdq
  00234	89 01		 mov	 DWORD PTR [ecx], eax
  00236	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00239	8b 55 e0	 mov	 edx, DWORD PTR _written$4$[ebp]
  0023c	e9 12 04 00 00	 jmp	 $LN152@streamout
$LN56@streamout:

; 405  : 			else if (flags & FLAG_SHORT)
; 406  : 				*va_arg(argptr, short*) = (short)written_all;

  00241	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00244	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  0024a	74 08		 je	 SHORT $LN54@streamout
  0024c	66 89 38	 mov	 WORD PTR [eax], di

; 407  : 			else

  0024f	e9 ff 03 00 00	 jmp	 $LN152@streamout
$LN54@streamout:

; 408  : 				*va_arg(argptr, int*) = written_all;

  00254	89 38		 mov	 DWORD PTR [eax], edi

; 409  : 			continue;

  00256	e9 f8 03 00 00	 jmp	 $LN152@streamout
$LN52@streamout:

; 410  : 
; 411  : 		case ('C'):
; 412  : 			if (!(flags & FLAG_SHORT)) flags |= FLAG_WIDECHAR;

  0025b	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  00261	75 06		 jne	 SHORT $case_char$250
  00263	81 cb 00 02 00
	00		 or	 ebx, 512		; 00000200H
$case_char$250:

; 413  : 			goto case_char;
; 414  : 
; 415  : 		case ('c'):
; 416  : case_char:
; 417  : 			string = buffer;
; 418  : 			len = 1;
; 419  :  			if (flags & FLAG_WIDECHAR)
; 420  :  			{
; 421  :  				((wchar_t*)string)[0] = (wchar_t)va_arg(argptr, int);

  00269	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  0026c	8d 45 98	 lea	 eax, DWORD PTR _buffer$[ebp]
  0026f	83 c1 04	 add	 ecx, 4
  00272	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
  00275	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00278	bf 01 00 00 00	 mov	 edi, 1
  0027d	f7 c3 00 02 00
	00		 test	 ebx, 512		; 00000200H
  00283	0f 84 ec 00 00
	00		 je	 $LN49@streamout
  00289	66 8b 41 fc	 mov	 ax, WORD PTR [ecx-4]
  0028d	66 89 45 98	 mov	 WORD PTR _buffer$[ebp], ax

; 422  :  				((wchar_t*)string)[1] = (wchar_t)('\0');

  00291	33 c0		 xor	 eax, eax
  00293	66 89 45 9a	 mov	 WORD PTR _buffer$[ebp+2], ax
$LN228@streamout:
  00297	8b 4d 0c	 mov	 ecx, DWORD PTR _precision$2$[ebp]
$LN123@streamout:

; 547  : 		}
; 548  : 
; 549  : 		/* Calculate padding */
; 550  : 		prefixlen = prefix ? strlen(prefix) : 0;

  0029a	33 d2		 xor	 edx, edx
$LN245@streamout:

; 551  : 		if (precision < 0) precision = 0;

  0029c	33 c0		 xor	 eax, eax
  0029e	89 55 d0	 mov	 DWORD PTR _prefixlen$1$[ebp], edx
  002a1	85 c9		 test	 ecx, ecx
  002a3	0f 48 c8	 cmovs	 ecx, eax

; 552  : 		padding = (int)(fieldwidth - len - prefixlen - precision);

  002a6	8b 45 f4	 mov	 eax, DWORD PTR _padding$2$[ebp]
  002a9	2b c2		 sub	 eax, edx
  002ab	89 4d 0c	 mov	 DWORD PTR _precision$2$[ebp], ecx
  002ae	2b c7		 sub	 eax, edi
  002b0	2b c1		 sub	 eax, ecx

; 553  : 		if (padding < 0) padding = 0;

  002b2	b9 00 00 00 00	 mov	 ecx, 0
  002b7	0f 48 c1	 cmovs	 eax, ecx
  002ba	89 45 f4	 mov	 DWORD PTR _padding$2$[ebp], eax

; 554  : 
; 555  : 		/* Optional left space padding */
; 556  : 		if ((flags & (FLAG_ALIGN_LEFT | FLAG_PAD_ZERO)) == 0)

  002bd	f6 c3 09	 test	 bl, 9
  002c0	75 2e		 jne	 SHORT $LN16@streamout

; 557  : 		{
; 558  : 			for (; padding > 0; padding--)

  002c2	85 c0		 test	 eax, eax
  002c4	7e 2a		 jle	 SHORT $LN16@streamout
$LL18@streamout:

; 559  : 			{
; 560  : 				if ((written = streamout_char(out, &cnt, (' '))) == 0) return -1;

  002c6	6a 20		 push	 32			; 00000020H
  002c8	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  002cb	50		 push	 eax
  002cc	ff 75 08	 push	 DWORD PTR _out$[ebp]
  002cf	e8 00 00 00 00	 call	 _streamout_char
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d7	85 c0		 test	 eax, eax
  002d9	0f 84 8d 03 00
	00		 je	 $LN143@streamout

; 561  : 				written_all += written;

  002df	01 45 fc	 add	 DWORD PTR _written_all$1$[ebp], eax
  002e2	8b 45 f4	 mov	 eax, DWORD PTR _padding$2$[ebp]
  002e5	48		 dec	 eax
  002e6	89 45 f4	 mov	 DWORD PTR _padding$2$[ebp], eax
  002e9	85 c0		 test	 eax, eax
  002eb	7f d9		 jg	 SHORT $LL18@streamout
  002ed	8b 55 d0	 mov	 edx, DWORD PTR _prefixlen$1$[ebp]
$LN16@streamout:

; 562  : 			}
; 563  : 		}
; 564  : 
; 565  : 		/* Optional prefix */
; 566  : 		if (prefix)

  002f0	8b 4d ec	 mov	 ecx, DWORD PTR _prefix$1$[ebp]
  002f3	85 c9		 test	 ecx, ecx
  002f5	74 1d		 je	 SHORT $LN14@streamout

; 567  : 		{
; 568  : 			written = streamout_string(out, &cnt, prefix, prefixlen);

  002f7	52		 push	 edx
  002f8	51		 push	 ecx
  002f9	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  002fc	50		 push	 eax
  002fd	ff 75 08	 push	 DWORD PTR _out$[ebp]
  00300	e8 00 00 00 00	 call	 _streamout_astring
  00305	83 c4 10	 add	 esp, 16			; 00000010H

; 569  : 			if (written == -1) return -1;

  00308	83 f8 ff	 cmp	 eax, -1
  0030b	0f 84 5b 03 00
	00		 je	 $LN143@streamout

; 570  : 			written_all += written;

  00311	01 45 fc	 add	 DWORD PTR _written_all$1$[ebp], eax
$LN14@streamout:

; 571  : 		}
; 572  : 
; 573  : 		/* Optional left '0' padding */
; 574  : 		if ((flags & FLAG_ALIGN_LEFT) == 0) precision += padding;

  00314	8b c3		 mov	 eax, ebx
  00316	83 e0 01	 and	 eax, 1
  00319	89 45 cc	 mov	 DWORD PTR tv661[ebp], eax
  0031c	8b 45 0c	 mov	 eax, DWORD PTR _precision$2$[ebp]
  0031f	75 03		 jne	 SHORT $LN135@streamout
  00321	03 45 f4	 add	 eax, DWORD PTR _padding$2$[ebp]
$LN135@streamout:

; 575  : 		while (precision-- > 0)

  00324	85 c0		 test	 eax, eax
  00326	7e 27		 jle	 SHORT $LN148@streamout
$LL11@streamout:
  00328	48		 dec	 eax
  00329	89 45 0c	 mov	 DWORD PTR _precision$2$[ebp], eax

; 576  : 		{
; 577  : 			if ((written = streamout_char(out, &cnt, ('0'))) == 0) return -1;

  0032c	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  0032f	6a 30		 push	 48			; 00000030H
  00331	50		 push	 eax
  00332	ff 75 08	 push	 DWORD PTR _out$[ebp]
  00335	e8 00 00 00 00	 call	 _streamout_char
  0033a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033d	85 c0		 test	 eax, eax
  0033f	0f 84 27 03 00
	00		 je	 $LN143@streamout

; 578  : 			written_all += written;

  00345	01 45 fc	 add	 DWORD PTR _written_all$1$[ebp], eax
  00348	8b 45 0c	 mov	 eax, DWORD PTR _precision$2$[ebp]
  0034b	85 c0		 test	 eax, eax
  0034d	7f d9		 jg	 SHORT $LL11@streamout
$LN148@streamout:

; 579  : 		}
; 580  : 
; 581  : 		/* Output the string */
; 582  : 		if (flags & FLAG_WIDECHAR)
; 583  : 			written = streamout_wstring(out, &cnt, (wchar_t*)string, len);

  0034f	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  00352	57		 push	 edi
  00353	ff 75 f8	 push	 DWORD PTR _string$1$[ebp]
  00356	50		 push	 eax
  00357	ff 75 08	 push	 DWORD PTR _out$[ebp]
  0035a	f7 c3 00 02 00
	00		 test	 ebx, 512		; 00000200H
  00360	0f 84 79 02 00
	00		 je	 $LN8@streamout
  00366	e8 00 00 00 00	 call	 _streamout_wstring
  0036b	8b d0		 mov	 edx, eax
  0036d	89 55 e0	 mov	 DWORD PTR _written$4$[ebp], edx

; 584  : 		else

  00370	e9 74 02 00 00	 jmp	 $LN246@streamout
$LN49@streamout:

; 423  :  			}
; 424  :  			else
; 425  :  			{
; 426  : 				((char*)string)[0] = (char)va_arg(argptr, int);

  00375	8a 41 fc	 mov	 al, BYTE PTR [ecx-4]
  00378	88 45 98	 mov	 BYTE PTR _buffer$[ebp], al

; 427  : 				((char*)string)[1] = (char)('\0');

  0037b	c6 45 99 00	 mov	 BYTE PTR _buffer$[ebp+1], 0

; 428  : 			}
; 429  : 			break;

  0037f	e9 13 ff ff ff	 jmp	 $LN228@streamout
$LN47@streamout:

; 430  : 
; 431  : 		case ('Z'):
; 432  : 			nt_string = va_arg(argptr, void*);

  00384	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  00387	83 c1 04	 add	 ecx, 4
  0038a	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  0038d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]

; 433  : 			if (nt_string && (string = nt_string->Buffer))

  00390	85 c9		 test	 ecx, ecx
  00392	74 52		 je	 SHORT $LN191@streamout
  00394	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00397	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
  0039a	85 c0		 test	 eax, eax
  0039c	74 48		 je	 SHORT $LN191@streamout

; 434  : 			{
; 435  : 				len = nt_string->Length;

  0039e	0f b7 39	 movzx	 edi, WORD PTR [ecx]

; 436  : 				if (flags & FLAG_WIDECHAR) len /= sizeof(wchar_t);

  003a1	f7 c3 00 02 00
	00		 test	 ebx, 512		; 00000200H
  003a7	0f 84 ea fe ff
	ff		 je	 $LN228@streamout
  003ad	d1 ef		 shr	 edi, 1

; 437  : 				break;

  003af	e9 e3 fe ff ff	 jmp	 $LN228@streamout
$LN44@streamout:

; 438  : 			}
; 439  : 			string = 0;
; 440  : 			goto case_string;
; 441  : 
; 442  : 		case ('S'):
; 443  : 			string = va_arg(argptr, void*);

  003b4	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  003b7	83 c1 04	 add	 ecx, 4
  003ba	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  003bd	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  003c0	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax

; 444  : 			if (!(flags & FLAG_SHORT)) flags |= FLAG_WIDECHAR;

  003c3	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  003c9	75 17		 jne	 SHORT $case_string$251
  003cb	81 cb 00 02 00
	00		 or	 ebx, 512		; 00000200H

; 445  : 			goto case_string;

  003d1	eb 0f		 jmp	 SHORT $case_string$251
$LN42@streamout:

; 446  : 
; 447  : 		case ('s'):
; 448  : 			string = va_arg(argptr, void*);

  003d3	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  003d6	83 c1 04	 add	 ecx, 4
  003d9	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  003dc	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  003df	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
$case_string$251:

; 449  : 
; 450  : case_string:
; 451  : 			if (!string)

  003e2	85 c0		 test	 eax, eax
  003e4	75 0e		 jne	 SHORT $LN41@streamout
$LN191@streamout:

; 452  : 			{
; 453  : 				string = (char*)_nullstring;

  003e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_nullstring@?1??streamout@@9@9

; 454  : 				flags &= ~FLAG_WIDECHAR;

  003eb	81 e3 ff fd ff
	ff		 and	 ebx, -513		; fffffdffH
  003f1	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
$LN41@streamout:

; 455  : 			}
; 456  : 
; 457  : // 			if (flags & FLAG_WIDECHAR)
; 458  : // 				len = wcsnlen((wchar_t*)string, (unsigned)precision);
; 459  : // 			else
; 460  : 				len = strlen((char*)string);

  003f4	8b f8		 mov	 edi, eax
  003f6	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  003f9	8d a4 24 00 00
	00 00		 npad	 7
$LL204@streamout:
  00400	8a 07		 mov	 al, BYTE PTR [edi]
  00402	47		 inc	 edi
  00403	84 c0		 test	 al, al
  00405	75 f9		 jne	 SHORT $LL204@streamout
  00407	2b f9		 sub	 edi, ecx

; 461  : 			precision = 0;

  00409	33 c9		 xor	 ecx, ecx

; 462  : 			break;

  0040b	e9 8a fe ff ff	 jmp	 $LN123@streamout
$LN40@streamout:

; 463  : 
; 464  : 		case ('G'):
; 465  : 		case ('E'):
; 466  : 		case ('A'):
; 467  : 		case ('g'):
; 468  : 		case ('e'):
; 469  : 		case ('a'):
; 470  : 		case ('f'):
; 471  : #ifdef _UNICODE
; 472  : 			flags |= FLAG_WIDECHAR;
; 473  : #else
; 474  : 			flags &= ~FLAG_WIDECHAR;
; 475  : #endif
; 476  : 			/* Use external function, one for kernel one for user mode */
; 477  : 			format_float(chr, flags, precision, &string, &prefix, &argptr);

  00410	8d 45 14	 lea	 eax, DWORD PTR _argptr$[ebp]
  00413	81 e3 ff fd ff
	ff		 and	 ebx, -513		; fffffdffH
  00419	50		 push	 eax
  0041a	8d 45 d0	 lea	 eax, DWORD PTR _prefix$[ebp]
  0041d	50		 push	 eax
  0041e	8d 45 e4	 lea	 eax, DWORD PTR _string$[ebp]
  00421	50		 push	 eax
  00422	57		 push	 edi
  00423	53		 push	 ebx
  00424	ff 75 f0	 push	 DWORD PTR _chr$[ebp]
  00427	e8 00 00 00 00	 call	 _format_float

; 478  : 			len = strlen(string);

  0042c	8b 45 e4	 mov	 eax, DWORD PTR _string$[ebp]
  0042f	83 c4 18	 add	 esp, 24			; 00000018H
  00432	8b f8		 mov	 edi, eax
  00434	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
  00437	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0043a	8d 9b 00 00 00
	00		 npad	 6
$LL205@streamout:
  00440	8a 07		 mov	 al, BYTE PTR [edi]
  00442	47		 inc	 edi
  00443	84 c0		 test	 al, al
  00445	75 f9		 jne	 SHORT $LL205@streamout

; 479  : 			precision = 0;
; 480  : 			break;

  00447	8b 45 d0	 mov	 eax, DWORD PTR _prefix$[ebp]
  0044a	2b f9		 sub	 edi, ecx
  0044c	33 c9		 xor	 ecx, ecx
  0044e	89 45 ec	 mov	 DWORD PTR _prefix$1$[ebp], eax
  00451	e9 69 01 00 00	 jmp	 $LN58@streamout
$LN39@streamout:

; 481  : 
; 482  : 		case ('d'):
; 483  : 		case ('i'):
; 484  : 			val64 = (__int64)va_arg_f(argptr, flags);

  00456	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  00459	f7 c3 00 04 00
	00		 test	 ebx, 1024		; 00000400H
  0045f	74 0d		 je	 SHORT $LN117@streamout
  00461	8b 01		 mov	 eax, DWORD PTR [ecx]
  00463	83 c1 08	 add	 ecx, 8
  00466	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00469	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0046c	eb 18		 jmp	 SHORT $LN242@streamout
$LN117@streamout:
  0046e	83 c1 04	 add	 ecx, 4
  00471	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00474	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  0047a	74 06		 je	 SHORT $LN115@streamout
  0047c	0f bf 41 fc	 movsx	 eax, WORD PTR [ecx-4]
  00480	eb 03		 jmp	 SHORT $LN116@streamout
$LN115@streamout:
  00482	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
$LN116@streamout:
  00485	99		 cdq
$LN242@streamout:
  00486	89 55 e0	 mov	 DWORD PTR _val64$2$[ebp], edx
  00489	89 45 e4	 mov	 DWORD PTR _val64$1$[ebp], eax

; 485  : 
; 486  : 			if ((__int64)val64 < 0)

  0048c	85 d2		 test	 edx, edx
  0048e	7f 19		 jg	 SHORT $LN38@streamout
  00490	7c 04		 jl	 SHORT $LN206@streamout
  00492	85 c0		 test	 eax, eax
  00494	73 13		 jae	 SHORT $LN38@streamout
$LN206@streamout:

; 487  : 			{
; 488  : 				val64 = -(__int64)val64;

  00496	f7 d8		 neg	 eax

; 489  : 				prefix = ("-");

  00498	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _prefix$1$[ebp], OFFSET ??_C@_01JOAMLHOP@?9?$AA@
  0049f	83 d2 00	 adc	 edx, 0
  004a2	f7 da		 neg	 edx
  004a4	e9 97 00 00 00	 jmp	 $LN247@streamout
$LN38@streamout:

; 490  : 			}
; 491  : 			else if (flags & FLAG_FORCE_SIGN)

  004a9	f6 c3 02	 test	 bl, 2
  004ac	74 0d		 je	 SHORT $LN36@streamout

; 492  : 				prefix = ("+");

  004ae	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
  004b3	89 4d ec	 mov	 DWORD PTR _prefix$1$[ebp], ecx
  004b6	e9 8b 00 00 00	 jmp	 $case_number$252
$LN36@streamout:

; 493  : 			else if (flags & FLAG_FORCE_SIGNSP)

  004bb	f6 c3 04	 test	 bl, 4
  004be	0f 84 82 00 00
	00		 je	 $case_number$252

; 494  : 				prefix = (" ");

  004c4	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  004c9	89 4d ec	 mov	 DWORD PTR _prefix$1$[ebp], ecx

; 495  : 
; 496  : 			goto case_number;

  004cc	eb 78		 jmp	 SHORT $case_number$252
$LN33@streamout:

; 497  : 
; 498  : 		case ('o'):
; 499  : 			base = 8;

  004ce	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], 8

; 500  : 			if (flags & FLAG_SPECIAL)

  004d5	f6 c3 10	 test	 bl, 16			; 00000010H
  004d8	74 35		 je	 SHORT $case_unsigned$253

; 501  : 			{
; 502  : 				prefix = ("0");

  004da	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _prefix$1$[ebp], OFFSET ??_C@_01GBGANLPD@0?$AA@

; 503  : 				if (precision > 0) precision--;

  004e1	85 ff		 test	 edi, edi
  004e3	7e 2a		 jle	 SHORT $case_unsigned$253
  004e5	4f		 dec	 edi

; 504  : 			}
; 505  : 			goto case_unsigned;

  004e6	eb 27		 jmp	 SHORT $case_unsigned$253
$LN30@streamout:

; 506  : 
; 507  : 		case ('p'):
; 508  : 			precision = 2 * sizeof(void*);

  004e8	bf 08 00 00 00	 mov	 edi, 8

; 509  : 			flags &= ~FLAG_PAD_ZERO;

  004ed	83 e3 f7	 and	 ebx, -9			; fffffff7H
$LN29@streamout:

; 510  : 			flags |= FLAG_INTPTR;
; 511  : 			/* Fall through */
; 512  : 
; 513  : 		case ('X'):
; 514  : 			digits = digits_u;

  004f0	b8 00 00 00 00	 mov	 eax, OFFSET ?digits_u@?1??streamout@@9@9
  004f5	89 45 d4	 mov	 DWORD PTR _digits$1$[ebp], eax
  004f8	eb 03		 jmp	 SHORT $LN28@streamout
$LN231@streamout:
  004fa	8b 45 d4	 mov	 eax, DWORD PTR _digits$1$[ebp]
$LN28@streamout:

; 515  : 			/* Fall through */
; 516  : 
; 517  : 		case ('x'):
; 518  : 			base = 16;

  004fd	c7 45 dc 10 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], 16 ; 00000010H

; 519  : 			if (flags & FLAG_SPECIAL)

  00504	f6 c3 10	 test	 bl, 16			; 00000010H
  00507	74 06		 je	 SHORT $case_unsigned$253

; 520  : 			{
; 521  : 				prefix = &digits[16];

  00509	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  0050c	89 4d ec	 mov	 DWORD PTR _prefix$1$[ebp], ecx
$case_unsigned$253:

; 522  : 			}
; 523  : 
; 524  : 		case ('u'):
; 525  : case_unsigned:
; 526  : 			val64 = va_arg_fu(argptr, flags);

  0050f	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  00512	f7 c3 00 04 00
	00		 test	 ebx, 1024		; 00000400H
  00518	74 0d		 je	 SHORT $LN121@streamout
  0051a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0051c	83 c1 08	 add	 ecx, 8
  0051f	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00522	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00525	eb 19		 jmp	 SHORT $LN247@streamout
$LN121@streamout:
  00527	83 c1 04	 add	 ecx, 4
  0052a	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  0052d	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  00533	74 06		 je	 SHORT $LN119@streamout
  00535	0f b7 41 fc	 movzx	 eax, WORD PTR [ecx-4]
  00539	eb 03		 jmp	 SHORT $LN244@streamout
$LN119@streamout:
  0053b	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
$LN244@streamout:
  0053e	33 d2		 xor	 edx, edx
$LN247@streamout:
  00540	89 45 e4	 mov	 DWORD PTR _val64$1$[ebp], eax
  00543	89 55 e0	 mov	 DWORD PTR _val64$2$[ebp], edx
$case_number$252:

; 527  : 
; 528  : case_number:
; 529  : 			flags &= ~FLAG_WIDECHAR;

  00546	81 e3 ff fd ff
	ff		 and	 ebx, -513		; fffffdffH

; 530  : 			if (precision < 0) precision = 1;

  0054c	b9 01 00 00 00	 mov	 ecx, 1
  00551	85 ff		 test	 edi, edi
  00553	89 5d cc	 mov	 DWORD PTR _flags$1$[ebp], ebx
  00556	0f 48 f9	 cmovs	 edi, ecx

; 531  : 
; 532  : 			/* Gather digits in reverse order */
; 533  : 			while (val64)

  00559	0b c2		 or	 eax, edx
  0055b	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi
  0055e	74 47		 je	 SHORT $LN23@streamout
  00560	8b 45 dc	 mov	 eax, DWORD PTR _base$1$[ebp]
  00563	8b 75 f8	 mov	 esi, DWORD PTR _string$1$[ebp]
  00566	8b 5d e4	 mov	 ebx, DWORD PTR _val64$1$[ebp]
  00569	99		 cdq
  0056a	8b c8		 mov	 ecx, eax
  0056c	8b c2		 mov	 eax, edx
  0056e	8b 55 e0	 mov	 edx, DWORD PTR _val64$2$[ebp]
  00571	89 4d d0	 mov	 DWORD PTR tv604[ebp], ecx
  00574	89 45 0c	 mov	 DWORD PTR tv603[ebp], eax
$LL24@streamout:

; 534  : 			{
; 535  : 				*--string = digits[val64 % base];

  00577	50		 push	 eax
  00578	51		 push	 ecx
  00579	52		 push	 edx
  0057a	53		 push	 ebx
  0057b	4e		 dec	 esi
  0057c	e8 00 00 00 00	 call	 __aulldvrm
  00581	89 5d dc	 mov	 DWORD PTR tv527[ebp+4], ebx

; 536  : 				val64 /= base;
; 537  : 				precision--;

  00584	4f		 dec	 edi
  00585	8b d8		 mov	 ebx, eax
  00587	8b 45 d4	 mov	 eax, DWORD PTR _digits$1$[ebp]
  0058a	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]
  0058d	8b 4d d0	 mov	 ecx, DWORD PTR tv604[ebp]
  00590	88 06		 mov	 BYTE PTR [esi], al
  00592	8b c3		 mov	 eax, ebx
  00594	0b c2		 or	 eax, edx
  00596	8b 45 0c	 mov	 eax, DWORD PTR tv603[ebp]
  00599	75 dc		 jne	 SHORT $LL24@streamout
  0059b	8b 5d cc	 mov	 ebx, DWORD PTR _flags$1$[ebp]
  0059e	89 75 f8	 mov	 DWORD PTR _string$1$[ebp], esi
  005a1	8b 75 10	 mov	 esi, DWORD PTR _format$[ebp]
  005a4	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi
$LN23@streamout:

; 538  : 			}
; 539  : 
; 540  : 			len = strlen(string);

  005a7	8b 7d f8	 mov	 edi, DWORD PTR _string$1$[ebp]
  005aa	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  005ad	8d 49 00	 npad	 3
$LL207@streamout:
  005b0	8a 07		 mov	 al, BYTE PTR [edi]
  005b2	47		 inc	 edi
  005b3	84 c0		 test	 al, al
  005b5	75 f9		 jne	 SHORT $LL207@streamout
  005b7	8b 45 ec	 mov	 eax, DWORD PTR _prefix$1$[ebp]
  005ba	2b f9		 sub	 edi, ecx
  005bc	8b 4d 0c	 mov	 ecx, DWORD PTR _precision$2$[ebp]
$LN58@streamout:

; 547  : 		}
; 548  : 
; 549  : 		/* Calculate padding */
; 550  : 		prefixlen = prefix ? strlen(prefix) : 0;

  005bf	85 c0		 test	 eax, eax
  005c1	0f 84 d3 fc ff
	ff		 je	 $LN123@streamout
  005c7	8b d0		 mov	 edx, eax
  005c9	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  005cc	89 45 0c	 mov	 DWORD PTR tv659[ebp], eax
  005cf	90		 npad	 1
$LL208@streamout:
  005d0	8a 02		 mov	 al, BYTE PTR [edx]
  005d2	42		 inc	 edx
  005d3	84 c0		 test	 al, al
  005d5	75 f9		 jne	 SHORT $LL208@streamout
  005d7	2b 55 0c	 sub	 edx, DWORD PTR tv659[ebp]
  005da	e9 bd fc ff ff	 jmp	 $LN245@streamout
$LN8@streamout:

; 585  : 			written = streamout_astring(out, &cnt, (char*)string, len);

  005df	e8 00 00 00 00	 call	 _streamout_astring
  005e4	8b d0		 mov	 edx, eax
  005e6	89 45 e0	 mov	 DWORD PTR _written$4$[ebp], eax
$LN246@streamout:
  005e9	83 c4 10	 add	 esp, 16			; 00000010H

; 586  : 		if (written == -1) return -1;

  005ec	83 fa ff	 cmp	 edx, -1
  005ef	74 7b		 je	 SHORT $LN143@streamout

; 587  : 		written_all += written;

  005f1	8b 7d fc	 mov	 edi, DWORD PTR _written_all$1$[ebp]
  005f4	03 fa		 add	 edi, edx

; 588  : 
; 589  : #if 0 && SUPPORT_FLOAT
; 590  : 		/* Optional right '0' padding */
; 591  : 		while (precision-- > 0)
; 592  : 		{
; 593  : 			if ((written = streamout_char(out, &cnt, ('0'))) == 0) return -1;
; 594  : 			written_all += written;
; 595  : 			len++;
; 596  : 		}
; 597  : #endif
; 598  : 
; 599  : 		/* Optional right padding */
; 600  : 		if (flags & FLAG_ALIGN_LEFT)

  005f6	83 7d cc 00	 cmp	 DWORD PTR tv661[ebp], 0
  005fa	89 7d fc	 mov	 DWORD PTR _written_all$1$[ebp], edi
  005fd	74 54		 je	 SHORT $LN152@streamout

; 601  : 		{
; 602  : 			while (padding-- > 0)

  005ff	8b 5d f4	 mov	 ebx, DWORD PTR _padding$2$[ebp]
  00602	85 db		 test	 ebx, ebx
  00604	7e 4d		 jle	 SHORT $LN152@streamout
$LL4@streamout:

; 603  : 			{
; 604  : 				if ((written = streamout_char(out, &cnt, (' '))) == 0) return -1;

  00606	6a 20		 push	 32			; 00000020H
  00608	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  0060b	4b		 dec	 ebx
  0060c	50		 push	 eax
  0060d	ff 75 08	 push	 DWORD PTR _out$[ebp]
  00610	e8 00 00 00 00	 call	 _streamout_char
  00615	8b d0		 mov	 edx, eax
  00617	83 c4 0c	 add	 esp, 12			; 0000000cH
  0061a	89 55 e0	 mov	 DWORD PTR _written$4$[ebp], edx
  0061d	85 d2		 test	 edx, edx
  0061f	74 4b		 je	 SHORT $LN143@streamout

; 605  : 				written_all += written;

  00621	03 fa		 add	 edi, edx
  00623	89 7d fc	 mov	 DWORD PTR _written_all$1$[ebp], edi
  00626	85 db		 test	 ebx, ebx
  00628	7f dc		 jg	 SHORT $LL4@streamout

; 606  : 			}
; 607  : 		}
; 608  : 
; 609  : 	}

  0062a	eb 27		 jmp	 SHORT $LN152@streamout
$LN22@streamout:

; 541  : 			break;
; 542  : 
; 543  : 		default:
; 544  : 			/* Treat anything else as a new character */
; 545  : 			format--;
; 546  : 			continue;

  0062c	8b 7d fc	 mov	 edi, DWORD PTR _written_all$1$[ebp]
  0062f	4e		 dec	 esi
  00630	eb 21		 jmp	 SHORT $LN152@streamout
$LN108@streamout:

; 295  : 		{
; 296  : 			/* Write the character to the stream */
; 297  : 			if ((written = streamout_char(out, &cnt, chr)) == 0) return -1;

  00632	0f be c0	 movsx	 eax, al
  00635	50		 push	 eax
  00636	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  00639	50		 push	 eax
  0063a	ff 75 08	 push	 DWORD PTR _out$[ebp]
  0063d	e8 00 00 00 00	 call	 _streamout_char
  00642	8b d0		 mov	 edx, eax
  00644	83 c4 0c	 add	 esp, 12			; 0000000cH
  00647	89 55 e0	 mov	 DWORD PTR _written$4$[ebp], edx
  0064a	85 d2		 test	 edx, edx
  0064c	74 1e		 je	 SHORT $LN143@streamout

; 298  : 			written_all += written;

  0064e	03 fa		 add	 edi, edx
  00650	89 7d fc	 mov	 DWORD PTR _written_all$1$[ebp], edi
$LN152@streamout:

; 284  : 
; 285  : 	while (written >= 0)

  00653	85 d2		 test	 edx, edx
  00655	0f 89 c8 f9 ff
	ff		 jns	 $LL112@streamout
$LN111@streamout:

; 610  : 
; 611  : 	if (written == -1) return -1;

  0065b	83 c8 ff	 or	 eax, -1
  0065e	3b d0		 cmp	 edx, eax
  00660	0f 44 f8	 cmove	 edi, eax
  00663	8b c7		 mov	 eax, edi
  00665	5f		 pop	 edi
  00666	5e		 pop	 esi
  00667	5b		 pop	 ebx

; 612  : 
; 613  : 	return written_all;
; 614  : }

  00668	8b e5		 mov	 esp, ebp
  0066a	5d		 pop	 ebp
  0066b	c3		 ret	 0
$LN143@streamout:
  0066c	5f		 pop	 edi
  0066d	5e		 pop	 esi

; 295  : 		{
; 296  : 			/* Write the character to the stream */
; 297  : 			if ((written = streamout_char(out, &cnt, chr)) == 0) return -1;

  0066e	83 c8 ff	 or	 eax, -1
  00671	5b		 pop	 ebx

; 612  : 
; 613  : 	return written_all;
; 614  : }

  00672	8b e5		 mov	 esp, ebp
  00674	5d		 pop	 ebp
  00675	c3		 ret	 0
  00676	8b ff		 npad	 2
$LN249@streamout:
  00678	00 00 00 00	 DD	 $LN40@streamout
  0067c	00 00 00 00	 DD	 $LN52@streamout
  00680	00 00 00 00	 DD	 $LN44@streamout
  00684	00 00 00 00	 DD	 $LN29@streamout
  00688	00 00 00 00	 DD	 $LN47@streamout
  0068c	00 00 00 00	 DD	 $case_char$250
  00690	00 00 00 00	 DD	 $LN39@streamout
  00694	00 00 00 00	 DD	 $LN57@streamout
  00698	00 00 00 00	 DD	 $LN33@streamout
  0069c	00 00 00 00	 DD	 $LN30@streamout
  006a0	00 00 00 00	 DD	 $LN42@streamout
  006a4	00 00 00 00	 DD	 $case_unsigned$253
  006a8	00 00 00 00	 DD	 $LN231@streamout
  006ac	00 00 00 00	 DD	 $LN22@streamout
$LN203@streamout:
  006b0	00		 DB	 0
  006b1	0d		 DB	 13			; 0000000dH
  006b2	01		 DB	 1
  006b3	0d		 DB	 13			; 0000000dH
  006b4	00		 DB	 0
  006b5	0d		 DB	 13			; 0000000dH
  006b6	00		 DB	 0
  006b7	0d		 DB	 13			; 0000000dH
  006b8	0d		 DB	 13			; 0000000dH
  006b9	0d		 DB	 13			; 0000000dH
  006ba	0d		 DB	 13			; 0000000dH
  006bb	0d		 DB	 13			; 0000000dH
  006bc	0d		 DB	 13			; 0000000dH
  006bd	0d		 DB	 13			; 0000000dH
  006be	0d		 DB	 13			; 0000000dH
  006bf	0d		 DB	 13			; 0000000dH
  006c0	0d		 DB	 13			; 0000000dH
  006c1	0d		 DB	 13			; 0000000dH
  006c2	02		 DB	 2
  006c3	0d		 DB	 13			; 0000000dH
  006c4	0d		 DB	 13			; 0000000dH
  006c5	0d		 DB	 13			; 0000000dH
  006c6	0d		 DB	 13			; 0000000dH
  006c7	03		 DB	 3
  006c8	0d		 DB	 13			; 0000000dH
  006c9	04		 DB	 4
  006ca	0d		 DB	 13			; 0000000dH
  006cb	0d		 DB	 13			; 0000000dH
  006cc	0d		 DB	 13			; 0000000dH
  006cd	0d		 DB	 13			; 0000000dH
  006ce	0d		 DB	 13			; 0000000dH
  006cf	0d		 DB	 13			; 0000000dH
  006d0	00		 DB	 0
  006d1	0d		 DB	 13			; 0000000dH
  006d2	05		 DB	 5
  006d3	06		 DB	 6
  006d4	00		 DB	 0
  006d5	00		 DB	 0
  006d6	00		 DB	 0
  006d7	0d		 DB	 13			; 0000000dH
  006d8	06		 DB	 6
  006d9	0d		 DB	 13			; 0000000dH
  006da	0d		 DB	 13			; 0000000dH
  006db	0d		 DB	 13			; 0000000dH
  006dc	0d		 DB	 13			; 0000000dH
  006dd	07		 DB	 7
  006de	08		 DB	 8
  006df	09		 DB	 9
  006e0	0d		 DB	 13			; 0000000dH
  006e1	0d		 DB	 13			; 0000000dH
  006e2	0a		 DB	 10			; 0000000aH
  006e3	0d		 DB	 13			; 0000000dH
  006e4	0b		 DB	 11			; 0000000bH
  006e5	0d		 DB	 13			; 0000000dH
  006e6	0d		 DB	 13			; 0000000dH
  006e7	0c		 DB	 12			; 0000000cH
_streamout ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _format_float
_TEXT	SEGMENT
tv680 = -48						; size = 8
tv564 = -48						; size = 8
tv557 = -48						; size = 8
tv489 = -48						; size = 8
tv351 = -48						; size = 8
tv344 = -48						; size = 8
tv482 = -40						; size = 8
tv467 = -40						; size = 8
tv418 = -40						; size = 8
tv394 = -40						; size = 8
tv387 = -40						; size = 8
tv378 = -40						; size = 8
_fpval$1$ = -32						; size = 8
_padding$1$ = -24					; size = 4
_exponent$1$ = -20					; size = 4
_fpval2$1$ = -16					; size = 8
_sign$ = -12						; size = 4
_digits$1$ = -8						; size = 4
_precision$1$ = -4					; size = 4
tv769 = 8						; size = 4
tv681 = 8						; size = 4
_chr$ = 8						; size = 1
_flags$ = 12						; size = 4
tv781 = 16						; size = 4
tv685 = 16						; size = 4
tv483 = 16						; size = 4
tv468 = 16						; size = 4
tv379 = 16						; size = 4
tv322 = 16						; size = 4
_num_digits$2$ = 16					; size = 4
_num_digits$1$ = 16					; size = 4
_precision$ = 16					; size = 4
_string$ = 20						; size = 4
_prefix$ = 24						; size = 4
_argptr$ = 28						; size = 4
_format_float PROC					; COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	53		 push	 ebx

; 128  : 	static const char digits_l[] = ("0123456789abcdef0x");
; 129  : 	static const char digits_u[] = ("0123456789ABCDEF0X");
; 130  : 	static const char _nan[] = ("#QNAN");
; 131  : 	static const char _infinity[] = ("#INF");
; 132  : 	const char *digits = digits_l;
; 133  : 	int exponent = 0, sign;
; 134  : 	long double fpval, fpval2;
; 135  : 	int padding = 0, num_digits, val32, base = 10;

  00007	33 db		 xor	 ebx, ebx
  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_l@?1??format_float@@9@9
  00010	89 5d e8	 mov	 DWORD PTR _padding$1$[ebp], ebx

; 136  : 
; 137  : 	/* Normalize the precision */
; 138  : 	if (precision < 0) precision = 6;

  00013	8b 5d 10	 mov	 ebx, DWORD PTR _precision$[ebp]
  00016	89 5d fc	 mov	 DWORD PTR _precision$1$[ebp], ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	85 db		 test	 ebx, ebx
  0001d	79 07		 jns	 SHORT $LN37@format_flo
  0001f	bb 06 00 00 00	 mov	 ebx, 6
  00024	eb 10		 jmp	 SHORT $LN174@format_flo
$LN37@format_flo:

; 139  : 	else if (precision > 17)

  00026	83 fb 11	 cmp	 ebx, 17			; 00000011H
  00029	7e 11		 jle	 SHORT $LN35@format_flo

; 140  : 	{
; 141  : 		padding = precision - 17;

  0002b	83 c3 ef	 add	 ebx, -17		; ffffffefH
  0002e	89 5d e8	 mov	 DWORD PTR _padding$1$[ebp], ebx

; 142  : 		precision = 17;

  00031	bb 11 00 00 00	 mov	 ebx, 17			; 00000011H
$LN174@format_flo:
  00036	89 5d 10	 mov	 DWORD PTR _precision$[ebp], ebx
  00039	89 5d fc	 mov	 DWORD PTR _precision$1$[ebp], ebx
$LN35@format_flo:

; 143  : 	}
; 144  : 
; 145  : 	/* Get the float value and calculate the exponent */
; 146  : 	fpval = va_arg_ffp(*argptr, flags);

  0003c	8b 45 1c	 mov	 eax, DWORD PTR _argptr$[ebp]
  0003f	83 00 08	 add	 DWORD PTR [eax], 8
  00042	8b 00		 mov	 eax, DWORD PTR [eax]
  00044	dd 40 f8	 fld	 QWORD PTR [eax-8]
  00047	dd 55 e0	 fst	 QWORD PTR _fpval$1$[ebp]

; 147  : 	exponent = get_exp((double)fpval);

  0004a	d9 ee		 fldz
  0004c	d9 c9		 fxch	 ST(1)
  0004e	db e9		 fucomi	 ST(1)
  00050	9f		 lahf
  00051	f6 c4 44	 test	 ah, 68			; 00000044H
  00054	7a 04		 jp	 SHORT $LN44@format_flo
  00056	dd d8		 fstp	 ST(0)
  00058	eb 0d		 jmp	 SHORT $LN43@format_flo
$LN44@format_flo:
  0005a	db f1		 fcomi	 ST(1)
  0005c	dd d9		 fstp	 ST(1)
  0005e	73 02		 jae	 SHORT $LN175@format_flo
  00060	d9 e0		 fchs
$LN175@format_flo:
  00062	e8 00 00 00 00	 call	 __CIlog10
$LN43@format_flo:
  00067	83 ec 08	 sub	 esp, 8
  0006a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0006d	e8 00 00 00 00	 call	 _floor
  00072	83 c4 08	 add	 esp, 8
  00075	e8 00 00 00 00	 call	 __ftol2_sse

; 148  : 	sign = fpval < 0 ? -1 : 1;

  0007a	dd 45 e0	 fld	 QWORD PTR _fpval$1$[ebp]
  0007d	8b f0		 mov	 esi, eax
  0007f	d9 ee		 fldz
  00081	df f1		 fcomip	 ST(1)
  00083	89 75 ec	 mov	 DWORD PTR _exponent$1$[ebp], esi
  00086	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _sign$[ebp], -1
  0008d	77 07		 ja	 SHORT $LN47@format_flo
  0008f	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _sign$[ebp], 1
$LN47@format_flo:

; 149  : 
; 150  : 	switch (chr)

  00096	8b 45 08	 mov	 eax, DWORD PTR _chr$[ebp]
  00099	8b 7d 14	 mov	 edi, DWORD PTR _string$[ebp]
  0009c	0f be c0	 movsx	 eax, al
  0009f	83 c0 bf	 add	 eax, -65		; ffffffbfH
  000a2	83 f8 26	 cmp	 eax, 38			; 00000026H
  000a5	0f 87 4e 02 00
	00		 ja	 $LN102@format_flo
  000ab	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN84@format_flo[eax]
  000b2	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN179@format_flo[eax*4]
$LN32@format_flo:

; 151  : 	{
; 152  : 	case ('G'):
; 153  : 		digits = digits_u;

  000b9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_u@?1??format_float@@9@9
$LN31@format_flo:

; 154  : 	case ('g'):
; 155  : 		if (precision > 0) precision--;

  000c0	85 db		 test	 ebx, ebx
  000c2	7e 07		 jle	 SHORT $LN30@format_flo
  000c4	4b		 dec	 ebx
  000c5	89 5d fc	 mov	 DWORD PTR _precision$1$[ebp], ebx
  000c8	89 5d 10	 mov	 DWORD PTR _precision$[ebp], ebx
$LN30@format_flo:

; 156  : 		if (exponent < -4 || exponent >= precision) goto case_e;

  000cb	83 fe fc	 cmp	 esi, -4			; fffffffcH
  000ce	0f 8c b5 00 00
	00		 jl	 $case_e$180
  000d4	3b f3		 cmp	 esi, ebx
  000d6	0f 8d ad 00 00
	00		 jge	 $case_e$180

; 157  : 
; 158  : 		/* Shift the decimal point and round */
; 159  : 		fpval2 = round(sign * (double)fpval * pow(10., precision));

  000dc	dd d8		 fstp	 ST(0)
  000de	db 45 10	 fild	 DWORD PTR _precision$[ebp]
  000e1	dd 5d d0	 fstp	 QWORD PTR tv564[ebp]
  000e4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  000ea	dd 45 d0	 fld	 QWORD PTR tv564[ebp]
  000ed	e8 00 00 00 00	 call	 __CIpow
  000f2	db 45 f4	 fild	 DWORD PTR _sign$[ebp]
  000f5	83 ec 08	 sub	 esp, 8
  000f8	dd 5d d0	 fstp	 QWORD PTR tv557[ebp]
  000fb	dd 45 d0	 fld	 QWORD PTR tv557[ebp]
  000fe	dc 4d e0	 fmul	 QWORD PTR _fpval$1$[ebp]
  00101	de c9		 fmulp	 ST(1), ST(0)
  00103	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00109	dd 1c 24	 fstp	 QWORD PTR [esp]
  0010c	e8 00 00 00 00	 call	 _floor
  00111	83 c4 08	 add	 esp, 8
  00114	dd 55 f0	 fst	 QWORD PTR _fpval2$1$[ebp]

; 160  : 
; 161  : 		/* Skip trailing zeroes */
; 162  : 		while (precision && (unsigned __int64)fpval2 % 10 == 0)

  00117	85 db		 test	 ebx, ebx
  00119	0f 84 19 02 00
	00		 je	 $LN176@format_flo
  0011f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@43e0000000000000
  00125	eb 02		 jmp	 SHORT $LN27@format_flo
$LN139@format_flo:
  00127	d9 c9		 fxch	 ST(1)
$LN27@format_flo:
  00129	33 c9		 xor	 ecx, ecx
  0012b	d9 c1		 fld	 ST(1)
  0012d	33 f6		 xor	 esi, esi
  0012f	89 4d 10	 mov	 DWORD PTR tv781[ebp], ecx
  00132	db f1		 fcomi	 ST(1)
  00134	72 15		 jb	 SHORT $LN85@format_flo
  00136	d8 e1		 fsub	 ST(0), ST(1)
  00138	d9 c9		 fxch	 ST(1)
  0013a	db f1		 fcomi	 ST(1)
  0013c	76 0b		 jbe	 SHORT $LN133@format_flo
  0013e	03 f1		 add	 esi, ecx
  00140	81 d1 00 00 00
	80		 adc	 ecx, -2147483648	; 80000000H
  00146	89 4d 10	 mov	 DWORD PTR tv781[ebp], ecx
$LN133@format_flo:
  00149	d9 c9		 fxch	 ST(1)
$LN85@format_flo:
  0014b	e8 00 00 00 00	 call	 __ftol2
  00150	03 c6		 add	 eax, esi
  00152	6a 00		 push	 0
  00154	13 55 10	 adc	 edx, DWORD PTR tv781[ebp]
  00157	6a 0a		 push	 10			; 0000000aH
  00159	52		 push	 edx
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 __aullrem
  00160	0b c2		 or	 eax, edx
  00162	0f 85 ce 01 00
	00		 jne	 $LN135@format_flo

; 163  : 		{
; 164  : 			precision--;
; 165  : 			fpval2 /= 10;

  00168	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  0016e	4b		 dec	 ebx
  0016f	de fa		 fdivp	 ST(2), ST(0)
  00171	d9 c9		 fxch	 ST(1)
  00173	89 5d fc	 mov	 DWORD PTR _precision$1$[ebp], ebx
  00176	dd 55 f0	 fst	 QWORD PTR _fpval2$1$[ebp]
  00179	75 ac		 jne	 SHORT $LN139@format_flo
  0017b	dd d8		 fstp	 ST(0)

; 166  : 		}
; 167  : 		break;

  0017d	e9 b6 01 00 00	 jmp	 $LN176@format_flo
$LN25@format_flo:

; 168  : 
; 169  : 	case ('E'):
; 170  : 		digits = digits_u;

  00182	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_u@?1??format_float@@9@9
$case_e$180:

; 171  : 	case ('e'):
; 172  : case_e:
; 173  : 		/* Shift the decimal point and round */
; 174  : 		fpval2 = round(sign * (double)fpval * pow(10., precision - exponent));

  00189	db 45 f4	 fild	 DWORD PTR _sign$[ebp]
  0018c	8b c3		 mov	 eax, ebx
  0018e	2b c6		 sub	 eax, esi
  00190	89 45 10	 mov	 DWORD PTR tv483[ebp], eax
  00193	dd 5d d0	 fstp	 QWORD PTR tv489[ebp]
  00196	dc 4d d0	 fmul	 QWORD PTR tv489[ebp]
  00199	dd 5d d0	 fstp	 QWORD PTR tv680[ebp]
  0019c	db 45 10	 fild	 DWORD PTR tv483[ebp]
  0019f	dd 5d d8	 fstp	 QWORD PTR tv482[ebp]
  001a2	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  001a8	dd 45 d8	 fld	 QWORD PTR tv482[ebp]
  001ab	e8 00 00 00 00	 call	 __CIpow
  001b0	dc 4d d0	 fmul	 QWORD PTR tv680[ebp]
  001b3	83 ec 08	 sub	 esp, 8
  001b6	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  001bc	dd 1c 24	 fstp	 QWORD PTR [esp]
  001bf	e8 00 00 00 00	 call	 _floor
  001c4	dd 5d f0	 fstp	 QWORD PTR _fpval2$1$[ebp]

; 175  : 
; 176  : 		/* Compensate for changed exponent through rounding */
; 177  : 		if (fpval2 >= (unsigned __int64)pow(10., precision + 1))

  001c7	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  001ca	83 c4 08	 add	 esp, 8
  001cd	89 45 10	 mov	 DWORD PTR tv468[ebp], eax
  001d0	db 45 10	 fild	 DWORD PTR tv468[ebp]
  001d3	dd 5d d8	 fstp	 QWORD PTR tv467[ebp]
  001d6	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  001dc	dd 45 d8	 fld	 QWORD PTR tv467[ebp]
  001df	e8 00 00 00 00	 call	 __CIpow
  001e4	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@43e0000000000000
  001ea	33 c9		 xor	 ecx, ecx
  001ec	33 d2		 xor	 edx, edx
  001ee	89 4d 10	 mov	 DWORD PTR tv685[ebp], ecx
  001f1	d9 c9		 fxch	 ST(1)
  001f3	89 55 08	 mov	 DWORD PTR tv681[ebp], edx
  001f6	db f1		 fcomi	 ST(1)
  001f8	72 18		 jb	 SHORT $LN116@format_flo
  001fa	d8 e1		 fsub	 ST(0), ST(1)
  001fc	d9 c9		 fxch	 ST(1)
  001fe	df f1		 fcomip	 ST(1)
  00200	76 12		 jbe	 SHORT $LN86@format_flo
  00202	03 c9		 add	 ecx, ecx
  00204	89 4d 10	 mov	 DWORD PTR tv685[ebp], ecx
  00207	81 d2 00 00 00
	80		 adc	 edx, -2147483648	; 80000000H
  0020d	89 55 08	 mov	 DWORD PTR tv681[ebp], edx
  00210	eb 02		 jmp	 SHORT $LN86@format_flo
$LN116@format_flo:
  00212	dd d9		 fstp	 ST(1)
$LN86@format_flo:
  00214	e8 00 00 00 00	 call	 __ftol2
  00219	03 45 10	 add	 eax, DWORD PTR tv685[ebp]
  0021c	89 45 d8	 mov	 DWORD PTR tv418[ebp], eax
  0021f	13 55 08	 adc	 edx, DWORD PTR tv681[ebp]
  00222	8b c2		 mov	 eax, edx
  00224	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0022a	89 55 dc	 mov	 DWORD PTR tv418[ebp+4], edx
  0022d	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00232	df 6d d8	 fild	 QWORD PTR tv418[ebp]
  00235	89 45 dc	 mov	 DWORD PTR tv394[ebp+4], eax
  00238	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv394[ebp], 0
  0023f	df 6d d8	 fild	 QWORD PTR tv394[ebp]
  00242	d9 e0		 fchs
  00244	de c1		 faddp	 ST(1), ST(0)
  00246	dd 5d d8	 fstp	 QWORD PTR tv387[ebp]
  00249	dd 45 d8	 fld	 QWORD PTR tv387[ebp]
  0024c	dd 45 f0	 fld	 QWORD PTR _fpval2$1$[ebp]
  0024f	df f1		 fcomip	 ST(1)
  00251	dd d8		 fstp	 ST(0)
  00253	72 39		 jb	 SHORT $LN23@format_flo

; 178  : 		{
; 179  : 			exponent++;

  00255	46		 inc	 esi

; 180  : 			fpval2 = round(sign * (double)fpval * pow(10., precision - exponent));

  00256	8b c3		 mov	 eax, ebx
  00258	2b c6		 sub	 eax, esi
  0025a	89 75 ec	 mov	 DWORD PTR _exponent$1$[ebp], esi
  0025d	89 45 10	 mov	 DWORD PTR tv379[ebp], eax
  00260	db 45 10	 fild	 DWORD PTR tv379[ebp]
  00263	dd 5d d8	 fstp	 QWORD PTR tv378[ebp]
  00266	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  0026c	dd 45 d8	 fld	 QWORD PTR tv378[ebp]
  0026f	e8 00 00 00 00	 call	 __CIpow
  00274	dc 4d d0	 fmul	 QWORD PTR tv680[ebp]
  00277	83 ec 08	 sub	 esp, 8
  0027a	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00280	dd 1c 24	 fstp	 QWORD PTR [esp]
  00283	e8 00 00 00 00	 call	 _floor
  00288	dd 5d f0	 fstp	 QWORD PTR _fpval2$1$[ebp]
  0028b	83 c4 08	 add	 esp, 8
$LN23@format_flo:

; 181  : 		}
; 182  : 
; 183  : 		val32 = exponent >= 0 ? exponent : -exponent;

  0028e	8b c6		 mov	 eax, esi
  00290	99		 cdq
  00291	8b d8		 mov	 ebx, eax

; 184  : 
; 185  : 		// FIXME: handle length of exponent field:
; 186  : 		// http://msdn.microsoft.com/de-de/library/0fatw238%28VS.80%29.aspx
; 187  : 		num_digits = 3;
; 188  : 		while (num_digits--)

  00293	b8 03 00 00 00	 mov	 eax, 3
  00298	33 da		 xor	 ebx, edx
  0029a	2b da		 sub	 ebx, edx
  0029c	8d 64 24 00	 npad	 4
$LL22@format_flo:
  002a0	48		 dec	 eax

; 189  : 		{
; 190  : 			*--(*string) = digits[val32 % 10];

  002a1	ff 0f		 dec	 DWORD PTR [edi]
  002a3	89 45 10	 mov	 DWORD PTR _num_digits$1$[ebp], eax
  002a6	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  002ab	8b 37		 mov	 esi, DWORD PTR [edi]
  002ad	f7 eb		 imul	 ebx
  002af	c1 fa 02	 sar	 edx, 2
  002b2	8b ca		 mov	 ecx, edx
  002b4	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  002b7	03 ca		 add	 ecx, edx
  002b9	8b 55 f8	 mov	 edx, DWORD PTR _digits$1$[ebp]
  002bc	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  002bf	03 c0		 add	 eax, eax
  002c1	2b d8		 sub	 ebx, eax
  002c3	8a 04 13	 mov	 al, BYTE PTR [ebx+edx]

; 191  : 			val32 /= 10;

  002c6	8b d9		 mov	 ebx, ecx
  002c8	88 06		 mov	 BYTE PTR [esi], al
  002ca	8b 45 10	 mov	 eax, DWORD PTR _num_digits$1$[ebp]
  002cd	85 c0		 test	 eax, eax
  002cf	75 cf		 jne	 SHORT $LL22@format_flo

; 192  : 		}
; 193  : 
; 194  : 		/* Sign for the exponent */
; 195  : 		*--(*string) = (exponent >= 0 ? ('+') : ('-'));

  002d1	ff 0f		 dec	 DWORD PTR [edi]
  002d3	39 45 ec	 cmp	 DWORD PTR _exponent$1$[ebp], eax
  002d6	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 196  : 
; 197  : 		/* Add 'e' or 'E' separator */
; 198  : 		*--(*string) = digits[0xe];
; 199  : 		break;

  002d8	8b 5d fc	 mov	 ebx, DWORD PTR _precision$1$[ebp]
  002db	0f 9c c0	 setl	 al
  002de	8d 04 45 2b 00
	00 00		 lea	 eax, DWORD PTR [eax*2+43]
  002e5	88 01		 mov	 BYTE PTR [ecx], al
  002e7	ff 0f		 dec	 DWORD PTR [edi]
  002e9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  002eb	8a 42 0e	 mov	 al, BYTE PTR [edx+14]
  002ee	88 01		 mov	 BYTE PTR [ecx], al
  002f0	eb 48		 jmp	 SHORT $LN33@format_flo
$LN103@format_flo:

; 200  : 
; 201  : 	case ('A'):
; 202  : 		digits = digits_u;

  002f2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_u@?1??format_float@@9@9
$LN102@format_flo:
  002f9	dd d8		 fstp	 ST(0)

; 203  : 	case ('a'):
; 204  : 		//            base = 16;
; 205  : 		// FIXME: TODO
; 206  : 
; 207  : 	case ('f'):
; 208  : 	default:
; 209  : 		/* Shift the decimal point and round */
; 210  : 		fpval2 = round(sign * (double)fpval * pow(10., precision));

  002fb	db 45 10	 fild	 DWORD PTR _precision$[ebp]
  002fe	dd 5d d0	 fstp	 QWORD PTR tv351[ebp]
  00301	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  00307	dd 45 d0	 fld	 QWORD PTR tv351[ebp]
  0030a	e8 00 00 00 00	 call	 __CIpow
  0030f	db 45 f4	 fild	 DWORD PTR _sign$[ebp]
  00312	83 ec 08	 sub	 esp, 8
  00315	dd 5d d0	 fstp	 QWORD PTR tv344[ebp]
  00318	dd 45 d0	 fld	 QWORD PTR tv344[ebp]
  0031b	dc 4d e0	 fmul	 QWORD PTR _fpval$1$[ebp]
  0031e	de c9		 fmulp	 ST(1), ST(0)
  00320	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00326	dd 1c 24	 fstp	 QWORD PTR [esp]
  00329	e8 00 00 00 00	 call	 _floor
  0032e	dd 5d f0	 fstp	 QWORD PTR _fpval2$1$[ebp]
  00331	83 c4 08	 add	 esp, 8
  00334	eb 04		 jmp	 SHORT $LN33@format_flo
$LN135@format_flo:
  00336	dd d9		 fstp	 ST(1)
$LN176@format_flo:
  00338	dd d8		 fstp	 ST(0)
$LN33@format_flo:

; 211  : 		break;
; 212  : 	}
; 213  : 
; 214  : 	/* Handle sign */
; 215  : 	if (fpval < 0)

  0033a	dd 45 e0	 fld	 QWORD PTR _fpval$1$[ebp]
  0033d	d9 ee		 fldz
  0033f	df f1		 fcomip	 ST(1)
  00341	76 0b		 jbe	 SHORT $LN18@format_flo

; 216  : 	{
; 217  : 		*prefix = ("-");

  00343	8b 45 18	 mov	 eax, DWORD PTR _prefix$[ebp]
  00346	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_C@_01JOAMLHOP@?9?$AA@
  0034c	eb 1f		 jmp	 SHORT $LN14@format_flo
$LN18@format_flo:

; 218  : 	}
; 219  : 	else if (flags & FLAG_FORCE_SIGN)

  0034e	8b 45 0c	 mov	 eax, DWORD PTR _flags$[ebp]
  00351	a8 02		 test	 al, 2
  00353	74 0b		 je	 SHORT $LN16@format_flo

; 220  : 		*prefix = ("+");

  00355	8b 45 18	 mov	 eax, DWORD PTR _prefix$[ebp]
  00358	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
  0035e	eb 0d		 jmp	 SHORT $LN14@format_flo
$LN16@format_flo:

; 221  : 	else if (flags & FLAG_FORCE_SIGNSP)

  00360	a8 04		 test	 al, 4
  00362	74 09		 je	 SHORT $LN14@format_flo

; 222  : 		*prefix = (" ");

  00364	8b 45 18	 mov	 eax, DWORD PTR _prefix$[ebp]
  00367	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_C@_01CLKCMJKC@?5?$AA@
$LN14@format_flo:

; 223  : 
; 224  : 	/* Handle special cases first */
; 225  : 	if (_isnan((double)fpval))

  0036d	83 ec 08	 sub	 esp, 8
  00370	dd 1c 24	 fstp	 QWORD PTR [esp]
  00373	e8 00 00 00 00	 call	 __isnan
  00378	83 c4 08	 add	 esp, 8
  0037b	85 c0		 test	 eax, eax
  0037d	74 26		 je	 SHORT $LN13@format_flo

; 226  : 	{
; 227  : 		(*string) -= sizeof(_nan) / sizeof(char) - 1;

  0037f	83 07 fb	 add	 DWORD PTR [edi], -5	; fffffffbH

; 228  : 		strcpy((*string), _nan);

  00382	b9 00 00 00 00	 mov	 ecx, OFFSET ?_nan@?1??format_float@@9@9
  00387	8b 17		 mov	 edx, DWORD PTR [edi]
  00389	8d a4 24 00 00
	00 00		 npad	 7
$LL48@format_flo:
  00390	8a 01		 mov	 al, BYTE PTR [ecx]
  00392	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00395	88 02		 mov	 BYTE PTR [edx], al
  00397	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0039a	84 c0		 test	 al, al
  0039c	75 f2		 jne	 SHORT $LL48@format_flo

; 229  : 		fpval2 = 1;

  0039e	d9 e8		 fld1
  003a0	e9 ac 00 00 00	 jmp	 $LN177@format_flo
$LN13@format_flo:

; 230  : 	}
; 231  : 	else if (!_finite((double)fpval))

  003a5	dd 45 e0	 fld	 QWORD PTR _fpval$1$[ebp]
  003a8	83 ec 08	 sub	 esp, 8
  003ab	dd 1c 24	 fstp	 QWORD PTR [esp]
  003ae	e8 00 00 00 00	 call	 __finite
  003b3	83 c4 08	 add	 esp, 8
  003b6	85 c0		 test	 eax, eax
  003b8	75 1c		 jne	 SHORT $LN54@format_flo

; 232  : 	{
; 233  : 		(*string) -= sizeof(_infinity) / sizeof(char) - 1;

  003ba	83 07 fc	 add	 DWORD PTR [edi], -4	; fffffffcH

; 234  : 		strcpy((*string), _infinity);

  003bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?_infinity@?1??format_float@@9@9
  003c2	8b 17		 mov	 edx, DWORD PTR [edi]
$LL49@format_flo:
  003c4	8a 01		 mov	 al, BYTE PTR [ecx]
  003c6	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  003c9	88 02		 mov	 BYTE PTR [edx], al
  003cb	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  003ce	84 c0		 test	 al, al
  003d0	75 f2		 jne	 SHORT $LL49@format_flo

; 235  : 		fpval2 = 1;

  003d2	d9 e8		 fld1

; 236  : 	}
; 237  : 	else

  003d4	eb 7b		 jmp	 SHORT $LN177@format_flo
$LN54@format_flo:

; 238  : 	{
; 239  : 		/* Zero padding */
; 240  : 		while (padding-- > 0) *--(*string) = ('0');

  003d6	8b 4d e8	 mov	 ecx, DWORD PTR _padding$1$[ebp]
  003d9	85 c9		 test	 ecx, ecx
  003db	7e 0f		 jle	 SHORT $LN60@format_flo
  003dd	8d 49 00	 npad	 3
$LL9@format_flo:
  003e0	ff 0f		 dec	 DWORD PTR [edi]
  003e2	49		 dec	 ecx
  003e3	8b 07		 mov	 eax, DWORD PTR [edi]
  003e5	c6 00 30	 mov	 BYTE PTR [eax], 48	; 00000030H
  003e8	85 c9		 test	 ecx, ecx
  003ea	7f f4		 jg	 SHORT $LL9@format_flo
$LN60@format_flo:

; 241  : 
; 242  : 		/* Digits after the decimal point */
; 243  : 		num_digits = precision;

  003ec	89 5d 10	 mov	 DWORD PTR _num_digits$2$[ebp], ebx

; 244  : 		while (num_digits-- > 0)

  003ef	85 db		 test	 ebx, ebx
  003f1	7e 65		 jle	 SHORT $LN82@format_flo
  003f3	dd 45 f0	 fld	 QWORD PTR _fpval2$1$[ebp]
$LN7@format_flo:

; 245  : 		{
; 246  : 			*--(*string) = digits[(unsigned __int64)fpval2 % 10];

  003f6	ff 0f		 dec	 DWORD PTR [edi]
  003f8	d9 c0		 fld	 ST(0)
  003fa	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@43e0000000000000
  00400	33 c9		 xor	 ecx, ecx
  00402	d9 c9		 fxch	 ST(1)
  00404	89 4d 10	 mov	 DWORD PTR tv322[ebp], ecx
  00407	4b		 dec	 ebx
  00408	33 f6		 xor	 esi, esi
  0040a	db f1		 fcomi	 ST(1)
  0040c	72 15		 jb	 SHORT $LN151@format_flo
  0040e	d8 e1		 fsub	 ST(0), ST(1)
  00410	d9 c9		 fxch	 ST(1)
  00412	df f1		 fcomip	 ST(1)
  00414	76 0f		 jbe	 SHORT $LN87@format_flo
  00416	03 f1		 add	 esi, ecx
  00418	81 d1 00 00 00
	80		 adc	 ecx, -2147483648	; 80000000H
  0041e	89 4d 10	 mov	 DWORD PTR tv322[ebp], ecx
  00421	eb 02		 jmp	 SHORT $LN87@format_flo
$LN151@format_flo:
  00423	dd d9		 fstp	 ST(1)
$LN87@format_flo:
  00425	e8 00 00 00 00	 call	 __ftol2
  0042a	03 c6		 add	 eax, esi
  0042c	6a 00		 push	 0
  0042e	13 55 10	 adc	 edx, DWORD PTR tv322[ebp]
  00431	6a 0a		 push	 10			; 0000000aH
  00433	52		 push	 edx
  00434	50		 push	 eax
  00435	e8 00 00 00 00	 call	 __aullrem
  0043a	8b 4d f8	 mov	 ecx, DWORD PTR _digits$1$[ebp]

; 247  : 			fpval2 /= base;

  0043d	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  00443	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  00446	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00448	88 01		 mov	 BYTE PTR [ecx], al
  0044a	85 db		 test	 ebx, ebx
  0044c	7f a8		 jg	 SHORT $LN7@format_flo
  0044e	8b 5d fc	 mov	 ebx, DWORD PTR _precision$1$[ebp]
$LN177@format_flo:
  00451	dd 5d f0	 fstp	 QWORD PTR _fpval2$1$[ebp]

; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	if (precision > 0 || flags & FLAG_SPECIAL)

  00454	85 db		 test	 ebx, ebx
  00456	7f 06		 jg	 SHORT $LN4@format_flo
$LN82@format_flo:
  00458	f6 45 0c 10	 test	 BYTE PTR _flags$[ebp], 16 ; 00000010H
  0045c	74 07		 je	 SHORT $LN83@format_flo
$LN4@format_flo:

; 252  : 		*--(*string) = ('.');

  0045e	ff 0f		 dec	 DWORD PTR [edi]
  00460	8b 07		 mov	 eax, DWORD PTR [edi]
  00462	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
$LN83@format_flo:
  00465	dd 45 f0	 fld	 QWORD PTR _fpval2$1$[ebp]
  00468	33 f6		 xor	 esi, esi
  0046a	d9 c0		 fld	 ST(0)
  0046c	33 db		 xor	 ebx, ebx
  0046e	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@43e0000000000000
  00474	d9 c9		 fxch	 ST(1)
  00476	db f1		 fcomi	 ST(1)
  00478	72 12		 jb	 SHORT $LN88@format_flo
  0047a	d8 e1		 fsub	 ST(0), ST(1)
  0047c	d9 c9		 fxch	 ST(1)
  0047e	db f1		 fcomi	 ST(1)
  00480	76 08		 jbe	 SHORT $LN163@format_flo
  00482	03 f3		 add	 esi, ebx
  00484	81 d3 00 00 00
	80		 adc	 ebx, -2147483648	; 80000000H
$LN163@format_flo:
  0048a	d9 c9		 fxch	 ST(1)
$LN88@format_flo:
  0048c	e8 00 00 00 00	 call	 __ftol2
  00491	8b c8		 mov	 ecx, eax
  00493	03 ce		 add	 ecx, esi
  00495	13 d3		 adc	 edx, ebx
$LN3@format_flo:

; 253  : 
; 254  : 	/* Digits before the decimal point */
; 255  : 	do
; 256  : 	{
; 257  : 		*--(*string) = digits[(unsigned __int64)fpval2 % base];

  00497	ff 0f		 dec	 DWORD PTR [edi]
  00499	8b 37		 mov	 esi, DWORD PTR [edi]
  0049b	6a 00		 push	 0
  0049d	6a 0a		 push	 10			; 0000000aH
  0049f	52		 push	 edx
  004a0	51		 push	 ecx
  004a1	e8 00 00 00 00	 call	 __aullrem

; 258  : 		fpval2 /= base;

  004a6	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000

; 259  : 	}
; 260  : 	while ((unsigned __int64)fpval2);

  004ac	33 db		 xor	 ebx, ebx
  004ae	de fa		 fdivp	 ST(2), ST(0)
  004b0	8b 4d f8	 mov	 ecx, DWORD PTR _digits$1$[ebp]
  004b3	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  004b6	88 06		 mov	 BYTE PTR [esi], al
  004b8	33 f6		 xor	 esi, esi
  004ba	d9 c1		 fld	 ST(1)
  004bc	db f1		 fcomi	 ST(1)
  004be	72 12		 jb	 SHORT $LN89@format_flo
  004c0	d8 e1		 fsub	 ST(0), ST(1)
  004c2	d9 c9		 fxch	 ST(1)
  004c4	db f1		 fcomi	 ST(1)
  004c6	76 08		 jbe	 SHORT $LN171@format_flo
  004c8	03 f3		 add	 esi, ebx
  004ca	81 d3 00 00 00
	80		 adc	 ebx, -2147483648	; 80000000H
$LN171@format_flo:
  004d0	d9 c9		 fxch	 ST(1)
$LN89@format_flo:
  004d2	e8 00 00 00 00	 call	 __ftol2
  004d7	8b c8		 mov	 ecx, eax
  004d9	03 ce		 add	 ecx, esi
  004db	8b c1		 mov	 eax, ecx
  004dd	13 d3		 adc	 edx, ebx
  004df	0b c2		 or	 eax, edx
  004e1	75 b4		 jne	 SHORT $LN3@format_flo
  004e3	5f		 pop	 edi
  004e4	dd d9		 fstp	 ST(1)
  004e6	5e		 pop	 esi
  004e7	dd d8		 fstp	 ST(0)
  004e9	5b		 pop	 ebx

; 261  : 
; 262  : }

  004ea	8b e5		 mov	 esp, ebp
  004ec	5d		 pop	 ebp
  004ed	c3		 ret	 0
  004ee	8b ff		 npad	 2
$LN179@format_flo:
  004f0	00 00 00 00	 DD	 $LN103@format_flo
  004f4	00 00 00 00	 DD	 $LN25@format_flo
  004f8	00 00 00 00	 DD	 $LN32@format_flo
  004fc	00 00 00 00	 DD	 $case_e$180
  00500	00 00 00 00	 DD	 $LN31@format_flo
  00504	00 00 00 00	 DD	 $LN102@format_flo
$LN84@format_flo:
  00508	00		 DB	 0
  00509	05		 DB	 5
  0050a	05		 DB	 5
  0050b	05		 DB	 5
  0050c	01		 DB	 1
  0050d	05		 DB	 5
  0050e	02		 DB	 2
  0050f	05		 DB	 5
  00510	05		 DB	 5
  00511	05		 DB	 5
  00512	05		 DB	 5
  00513	05		 DB	 5
  00514	05		 DB	 5
  00515	05		 DB	 5
  00516	05		 DB	 5
  00517	05		 DB	 5
  00518	05		 DB	 5
  00519	05		 DB	 5
  0051a	05		 DB	 5
  0051b	05		 DB	 5
  0051c	05		 DB	 5
  0051d	05		 DB	 5
  0051e	05		 DB	 5
  0051f	05		 DB	 5
  00520	05		 DB	 5
  00521	05		 DB	 5
  00522	05		 DB	 5
  00523	05		 DB	 5
  00524	05		 DB	 5
  00525	05		 DB	 5
  00526	05		 DB	 5
  00527	05		 DB	 5
  00528	05		 DB	 5
  00529	05		 DB	 5
  0052a	05		 DB	 5
  0052b	05		 DB	 5
  0052c	03		 DB	 3
  0052d	05		 DB	 5
  0052e	04		 DB	 4
_format_float ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _streamout_wstring
_TEXT	SEGMENT
_out$ = 8						; size = 4
_cnt$ = 12						; size = 4
_string$ = 16						; size = 4
_count$ = 20						; size = 4
_streamout_wstring PROC					; COMDAT

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 110  : 	wchar_t chr;
; 111  : 	int written = 0;
; 112  : 
; 113  : 	while (count--)

  00005	8b 75 14	 mov	 esi, DWORD PTR _count$[ebp]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	85 f6		 test	 esi, esi
  0000d	74 22		 je	 SHORT $LN8@streamout_
  0000f	8b 5d 10	 mov	 ebx, DWORD PTR _string$[ebp]
$LL3@streamout_:

; 114  : 	{
; 115  : 		chr = *string++;

  00012	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00015	8d 5b 02	 lea	 ebx, DWORD PTR [ebx+2]

; 116  : 		{
; 117  : 			if (streamout_char(out, cnt, chr) == 0) return -1;

  00018	50		 push	 eax
  00019	ff 75 0c	 push	 DWORD PTR _cnt$[ebp]
  0001c	4e		 dec	 esi
  0001d	ff 75 08	 push	 DWORD PTR _out$[ebp]
  00020	e8 00 00 00 00	 call	 _streamout_char
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	85 c0		 test	 eax, eax
  0002a	74 0c		 je	 SHORT $LN7@streamout_

; 118  : 			written++;

  0002c	47		 inc	 edi
  0002d	85 f6		 test	 esi, esi
  0002f	75 e1		 jne	 SHORT $LL3@streamout_
$LN8@streamout_:

; 119  : 		}
; 120  : 	}
; 121  : 
; 122  : 	return written;

  00031	8b c7		 mov	 eax, edi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx

; 123  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN7@streamout_:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 116  : 		{
; 117  : 			if (streamout_char(out, cnt, chr) == 0) return -1;

  0003a	83 c8 ff	 or	 eax, -1
  0003d	5b		 pop	 ebx

; 123  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_streamout_wstring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _streamout_astring
_TEXT	SEGMENT
_out$ = 8						; size = 4
_cnt$ = 12						; size = 4
_string$ = 16						; size = 4
_count$ = 20						; size = 4
_streamout_astring PROC					; COMDAT

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 95   : 	char chr;
; 96   : 	int written = 0;
; 97   : 
; 98   : 	while (count--)

  00005	8b 75 14	 mov	 esi, DWORD PTR _count$[ebp]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	85 f6		 test	 esi, esi
  0000d	74 24		 je	 SHORT $LN8@streamout_
  0000f	8b 5d 10	 mov	 ebx, DWORD PTR _string$[ebp]
$LL3@streamout_:

; 99   : 	{
; 100  : 		chr = *string++;

  00012	8a 03		 mov	 al, BYTE PTR [ebx]
  00014	8d 5b 01	 lea	 ebx, DWORD PTR [ebx+1]

; 101  : 		if (streamout_char(out, cnt, chr) == 0) return -1;

  00017	0f be c0	 movsx	 eax, al
  0001a	4e		 dec	 esi
  0001b	50		 push	 eax
  0001c	ff 75 0c	 push	 DWORD PTR _cnt$[ebp]
  0001f	ff 75 08	 push	 DWORD PTR _out$[ebp]
  00022	e8 00 00 00 00	 call	 _streamout_char
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	85 c0		 test	 eax, eax
  0002c	74 0c		 je	 SHORT $LN7@streamout_

; 102  : 		written++;

  0002e	47		 inc	 edi
  0002f	85 f6		 test	 esi, esi
  00031	75 df		 jne	 SHORT $LL3@streamout_
$LN8@streamout_:

; 103  : 	}
; 104  : 
; 105  : 	return written;

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx

; 106  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN7@streamout_:
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 101  : 		if (streamout_char(out, cnt, chr) == 0) return -1;

  0003c	83 c8 ff	 or	 eax, -1
  0003f	5b		 pop	 ebx

; 106  : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_streamout_astring ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _streamout_char
_TEXT	SEGMENT
_out$ = 8						; size = 4
_cnt$ = 12						; size = 4
_c$ = 16						; size = 4
_streamout_char PROC					; COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 73   : 	/* Sanity */
; 74   : 	if(*cnt == 0)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _cnt$[ebp]
  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	75 05		 jne	 SHORT $LN3@streamout_

; 75   : 		return 0;

  0000c	33 c0		 xor	 eax, eax
  0000e	5e		 pop	 esi

; 89   : #endif
; 90   : 	}
; 91   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN3@streamout_:

; 76   : 
; 77   : 	if (out) {

  00011	8b 55 08	 mov	 edx, DWORD PTR _out$[ebp]
  00014	85 d2		 test	 edx, edx
  00016	74 0e		 je	 SHORT $LN2@streamout_

; 78   : 		**out = (char)c;

  00018	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001a	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  0001d	88 01		 mov	 BYTE PTR [ecx], al

; 79   : 		++(*out);

  0001f	ff 02		 inc	 DWORD PTR [edx]

; 80   : 		*cnt -= 1;

  00021	ff 0e		 dec	 DWORD PTR [esi]
  00023	5e		 pop	 esi

; 89   : #endif
; 90   : 	}
; 91   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN2@streamout_:

; 81   : 		return c;
; 82   : 	}
; 83   : 	else 
; 84   : 	{
; 85   : #ifndef LIBC_KERNEL
; 86   : 		return putchar(c);
; 87   : #else
; 88   : 		return VideoPutChar(c);

  00026	ff 75 10	 push	 DWORD PTR _c$[ebp]
  00029	e8 00 00 00 00	 call	 _VideoPutChar
  0002e	83 c4 04	 add	 esp, 4
  00031	5e		 pop	 esi

; 89   : #endif
; 90   : 	}
; 91   : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_streamout_char ENDP
_TEXT	ENDS
END
