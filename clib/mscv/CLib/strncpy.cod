; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\string\strncpy.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strncpy
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File c:\users\phail\documents\github\mollenos\clib\src\string\strncpy.c
;	COMDAT _strncpy
_TEXT	SEGMENT
_destination$ = 8					; size = 4
_source$ = 12						; size = 4
_num$ = 16						; size = 4
_strncpy PROC						; COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 24   : 	char *dst = destination;
; 25   : 	const char *src = source;

  00004	8b 75 0c	 mov	 esi, DWORD PTR _source$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _destination$[ebp]

; 26   : 	long *aligned_dst;
; 27   : 	const long *aligned_src;
; 28   : 
; 29   : 	/* If SRC and DEST is aligned and count large enough, then copy words.  */
; 30   : 	if (!UNALIGNED (src, dst) && !TOO_SMALL (num))

  0000b	8b cf		 mov	 ecx, edi
  0000d	0b ce		 or	 ecx, esi
  0000f	f6 c1 03	 test	 cl, 3
  00012	8b 4d 10	 mov	 ecx, DWORD PTR _num$[ebp]
  00015	8b c7		 mov	 eax, edi
  00017	75 35		 jne	 SHORT $LN12@strncpy
  00019	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0001c	72 30		 jb	 SHORT $LN12@strncpy

; 31   : 	{
; 32   : 		aligned_dst = (long*)dst;
; 33   : 		aligned_src = (long*)src;
; 34   : 
; 35   : 		/* SRC and DEST are both "long int" aligned, try to do "long int"
; 36   : 		sized copies.  */
; 37   : 		while (num >= sizeof (long int) && !DETECTNULL(*aligned_src))

  0001e	83 f9 04	 cmp	 ecx, 4
  00021	72 2b		 jb	 SHORT $LN12@strncpy
  00023	53		 push	 ebx
$LL7@strncpy:
  00024	8b 16		 mov	 edx, DWORD PTR [esi]
  00026	8b da		 mov	 ebx, edx
  00028	8d ba ff fe fe
	fe		 lea	 edi, DWORD PTR [edx-16843009]
  0002e	f7 d3		 not	 ebx
  00030	23 fb		 and	 edi, ebx
  00032	f7 c7 80 80 80
	80		 test	 edi, -2139062144	; 80808080H
  00038	75 10		 jne	 SHORT $LN21@strncpy

; 38   : 	{
; 39   : 		num -= sizeof (long int);

  0003a	83 e9 04	 sub	 ecx, 4

; 40   : 		*aligned_dst++ = *aligned_src++;

  0003d	89 10		 mov	 DWORD PTR [eax], edx
  0003f	83 c0 04	 add	 eax, 4
  00042	83 c6 04	 add	 esi, 4
  00045	83 f9 04	 cmp	 ecx, 4
  00048	73 da		 jae	 SHORT $LL7@strncpy
$LN21@strncpy:

; 31   : 	{
; 32   : 		aligned_dst = (long*)dst;
; 33   : 		aligned_src = (long*)src;
; 34   : 
; 35   : 		/* SRC and DEST are both "long int" aligned, try to do "long int"
; 36   : 		sized copies.  */
; 37   : 		while (num >= sizeof (long int) && !DETECTNULL(*aligned_src))

  0004a	8b 7d 08	 mov	 edi, DWORD PTR _destination$[ebp]
  0004d	5b		 pop	 ebx
$LN12@strncpy:

; 41   : 	}
; 42   : 
; 43   : 		dst = (char*)aligned_dst;
; 44   : 		src = (char*)aligned_src;
; 45   : 	}
; 46   : 
; 47   : 	while (num > 0)

  0004e	85 c9		 test	 ecx, ecx
  00050	74 27		 je	 SHORT $LN19@strncpy
  00052	2b f0		 sub	 esi, eax
$LL5@strncpy:

; 48   : 	{
; 49   : 		--num;
; 50   : 		if ((*dst++ = *src++) == '\0')

  00054	8a 14 06	 mov	 dl, BYTE PTR [esi+eax]
  00057	88 10		 mov	 BYTE PTR [eax], dl
  00059	49		 dec	 ecx
  0005a	40		 inc	 eax
  0005b	84 d2		 test	 dl, dl
  0005d	74 0a		 je	 SHORT $LN14@strncpy

; 41   : 	}
; 42   : 
; 43   : 		dst = (char*)aligned_dst;
; 44   : 		src = (char*)aligned_src;
; 45   : 	}
; 46   : 
; 47   : 	while (num > 0)

  0005f	85 c9		 test	 ecx, ecx
  00061	75 f1		 jne	 SHORT $LL5@strncpy

; 55   : 	*dst++ = '\0';
; 56   : 
; 57   : 	return destination;

  00063	8b c7		 mov	 eax, edi
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 58   : }

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
$LN14@strncpy:

; 51   : 	break;
; 52   : 	}
; 53   : 
; 54   : 	while (num-- > 0)

  00069	85 c9		 test	 ecx, ecx
  0006b	74 0c		 je	 SHORT $LN19@strncpy
  0006d	51		 push	 ecx
  0006e	6a 00		 push	 0
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _memset
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@strncpy:

; 55   : 	*dst++ = '\0';
; 56   : 
; 57   : 	return destination;

  00079	8b c7		 mov	 eax, edi
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 58   : }

  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_strncpy ENDP
_TEXT	ENDS
END
