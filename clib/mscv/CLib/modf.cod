; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\modf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_one	DQ	03ff0000000000000r		; 1
CONST	ENDS
PUBLIC	___fpclassifyl
PUBLIC	___fpclassifyf
PUBLIC	___fpclassify
PUBLIC	___isnan
PUBLIC	___isnanf
PUBLIC	___isnanl
PUBLIC	___signbit
PUBLIC	___signbitf
PUBLIC	___signbitl
PUBLIC	_logb
PUBLIC	_logbf
PUBLIC	_logbl
PUBLIC	_rint
PUBLIC	_rintf
PUBLIC	_rintl
PUBLIC	_lrint
PUBLIC	_lrintf
PUBLIC	_lrintl
PUBLIC	_llrint
PUBLIC	_llrintf
PUBLIC	_llrintl
PUBLIC	_modf
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\modf.c
;	COMDAT _modf
_TEXT	SEGMENT
_iw_u$1 = 8						; size = 8
_iw_u$2 = 8						; size = 8
_gh_u$3 = 8						; size = 8
_iw_u$4 = 8						; size = 8
_iw_u$5 = 8						; size = 8
_gh_u$6 = 8						; size = 8
_iw_u$7 = 8						; size = 8
_ew_u$8 = 8						; size = 8
_x$ = 8							; size = 8
_iptr$ = 16						; size = 4
_modf	PROC						; COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   : 	__int32_t i0,i1,j_0;
; 90   : 	__uint32_t i;
; 91   : 	EXTRACT_WORDS(i0,i1,x);

  00003	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00006	dd 55 08	 fst	 QWORD PTR _ew_u$8[ebp]

; 92   : 	j_0 = ((i0>>20)&0x7ff)-0x3ff;	/* exponent of x */

  00009	8b 55 0c	 mov	 edx, DWORD PTR _ew_u$8[ebp+4]
  0000c	8b ca		 mov	 ecx, edx
  0000e	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00011	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  00017	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH

; 93   : 	if(j_0<20) {			/* integer part in high x */

  0001d	83 f9 14	 cmp	 ecx, 20			; 00000014H
  00020	7d 63		 jge	 SHORT $LN37@modf

; 94   : 		if(j_0<0) {			/* |x|<1 */

  00022	85 c9		 test	 ecx, ecx
  00024	79 1a		 jns	 SHORT $LN36@modf

; 95   : 			INSERT_WORDS(*iptr,i0&0x80000000U,0);	/* *iptr = +-0 */

  00026	8b 45 10	 mov	 eax, DWORD PTR _iptr$[ebp]
  00029	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  0002f	89 55 0c	 mov	 DWORD PTR _iw_u$7[ebp+4], edx
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iw_u$7[ebp], 0
  00039	dd 45 08	 fld	 QWORD PTR _iw_u$7[ebp]
  0003c	dd 18		 fstp	 QWORD PTR [eax]

; 127  : 		}
; 128  : 	}
; 129  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN36@modf:
  00040	56		 push	 esi

; 96   : 			return x;
; 97   : 		} else {
; 98   : 			i = (0x000fffff)>>j_0;

  00041	be ff ff 0f 00	 mov	 esi, 1048575		; 000fffffH
  00046	d3 fe		 sar	 esi, cl

; 99   : 			if(((i0&i)|i1)==0) {		/* x is integral */

  00048	8b c6		 mov	 eax, esi
  0004a	23 c2		 and	 eax, edx
  0004c	0b 45 08	 or	 eax, DWORD PTR _ew_u$8[ebp]

; 100  : 				__uint32_t high;
; 101  : 				*iptr = x;

  0004f	8b 45 10	 mov	 eax, DWORD PTR _iptr$[ebp]
  00052	75 19		 jne	 SHORT $LN23@modf
  00054	dd 10		 fst	 QWORD PTR [eax]

; 102  : 				GET_HIGH_WORD(high,x);

  00056	dd 5d 08	 fstp	 QWORD PTR _gh_u$6[ebp]

; 103  : 				INSERT_WORDS(x,high&0x80000000U,0);	/* return +-0 */

  00059	81 65 0c 00 00
	00 80		 and	 DWORD PTR _gh_u$6[ebp+4], -2147483648 ; 80000000H
  00060	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iw_u$5[ebp], 0

; 104  : 				return x;

  00067	dd 45 08	 fld	 QWORD PTR _iw_u$5[ebp]
  0006a	5e		 pop	 esi

; 127  : 		}
; 128  : 	}
; 129  : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN23@modf:

; 105  : 			} else {
; 106  : 				INSERT_WORDS(*iptr,i0&(~i),0);

  0006d	f7 d6		 not	 esi
  0006f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iw_u$4[ebp], 0
  00076	23 f2		 and	 esi, edx
  00078	89 75 0c	 mov	 DWORD PTR _iw_u$4[ebp+4], esi
  0007b	dd 45 08	 fld	 QWORD PTR _iw_u$4[ebp]
  0007e	dd 10		 fst	 QWORD PTR [eax]

; 107  : 				return x - *iptr;

  00080	de e9		 fsubp	 ST(1), ST(0)
  00082	5e		 pop	 esi

; 127  : 		}
; 128  : 	}
; 129  : }

  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN37@modf:

; 108  : 			}
; 109  : 		}
; 110  : 	} else if (j_0>51) {		/* no fraction part */

  00085	83 f9 33	 cmp	 ecx, 51			; 00000033H
  00088	7e 1b		 jle	 SHORT $LN19@modf
$LN59@modf:

; 111  : 		__uint32_t high;
; 112  : 		*iptr = x*one;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _iptr$[ebp]
  0008d	dd 10		 fst	 QWORD PTR [eax]

; 113  : 		GET_HIGH_WORD(high,x);

  0008f	dd 5d 08	 fstp	 QWORD PTR _gh_u$3[ebp]

; 114  : 		INSERT_WORDS(x,high&0x80000000U,0);	/* return +-0 */

  00092	81 65 0c 00 00
	00 80		 and	 DWORD PTR _gh_u$3[ebp+4], -2147483648 ; 80000000H
  00099	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iw_u$2[ebp], 0

; 115  : 		return x;

  000a0	dd 45 08	 fld	 QWORD PTR _iw_u$2[ebp]

; 127  : 		}
; 128  : 	}
; 129  : }

  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN19@modf:

; 116  : 	} else {			/* fraction part in low x */
; 117  : 		i = ((__uint32_t)(0xffffffffU))>>(j_0-20);

  000a5	83 c1 ec	 add	 ecx, -20		; ffffffecH
  000a8	83 c8 ff	 or	 eax, -1
  000ab	d3 e8		 shr	 eax, cl

; 118  : 		if((i1&i)==0) { 		/* x is integral */

  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _ew_u$8[ebp]
  000b0	85 c1		 test	 eax, ecx
  000b2	74 d6		 je	 SHORT $LN59@modf

; 119  : 			__uint32_t high;
; 120  : 			*iptr = x;
; 121  : 			GET_HIGH_WORD(high,x);
; 122  : 			INSERT_WORDS(x,high&0x80000000U,0);	/* return +-0 */
; 123  : 			return x;
; 124  : 		} else {
; 125  : 			INSERT_WORDS(*iptr,i0,i1&(~i));

  000b4	f7 d0		 not	 eax
  000b6	89 55 0c	 mov	 DWORD PTR _iw_u$1[ebp+4], edx
  000b9	23 c1		 and	 eax, ecx
  000bb	89 45 08	 mov	 DWORD PTR _iw_u$1[ebp], eax
  000be	8b 45 10	 mov	 eax, DWORD PTR _iptr$[ebp]
  000c1	dd 45 08	 fld	 QWORD PTR _iw_u$1[ebp]
  000c4	dd 10		 fst	 QWORD PTR [eax]

; 126  : 			return x - *iptr;

  000c6	de e9		 fsubp	 ST(1), ST(0)

; 127  : 		}
; 128  : 	}
; 129  : }

  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
_modf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _llrintl
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 8
_llrintl PROC						; COMDAT

; 600  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 601  : 	long long retval = 0ll;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0
  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp+4], 0

; 602  : #if defined(_MSC_VER)
; 603  : 	_asm {
; 604  : 		fld [x];

  00014	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 605  : 		fistp [retval];

  00017	df 7d f8	 fistp	 QWORD PTR _retval$[ebp]

; 606  : 	}
; 607  : #else
; 608  : 	__asm__ __volatile__("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
; 609  : #endif
; 610  : 	return retval;

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _retval$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _retval$[ebp+4]

; 611  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_llrintl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _llrintf
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 4
_llrintf PROC						; COMDAT

; 586  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 587  : 	long long retval = 0ll;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0
  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp+4], 0

; 588  : #if defined(_MSC_VER)
; 589  : 	_asm {
; 590  : 		fld [x];

  00014	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 591  : 		fistp [retval];

  00017	df 7d f8	 fistp	 QWORD PTR _retval$[ebp]

; 592  : 	}
; 593  : #else
; 594  : 	__asm__ __volatile__("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
; 595  : #endif
; 596  : 	return retval;

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _retval$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _retval$[ebp+4]

; 597  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_llrintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _llrint
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 8
_llrint	PROC						; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 573  : 	long long retval = 0ll;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0
  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp+4], 0

; 574  : #if defined(_MSC_VER)
; 575  : 	_asm {
; 576  : 		fld [x];

  00014	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 577  : 		fistp [retval];

  00017	df 7d f8	 fistp	 QWORD PTR _retval$[ebp]

; 578  : 	}
; 579  : #else
; 580  : 	__asm__ __volatile__("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
; 581  : #endif
; 582  : 	return retval;

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _retval$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _retval$[ebp+4]

; 583  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_llrint	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _lrintl
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_x$ = 8							; size = 8
_lrintl	PROC						; COMDAT

; 559  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 560  : 	long retval = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0

; 561  : #if defined(_MSC_VER)
; 562  : 	_asm {
; 563  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 564  : 		fistp [retval];

  0000e	db 5d fc	 fistp	 DWORD PTR _retval$[ebp]

; 565  : 	}
; 566  : #else
; 567  : 	__asm__ __volatile__("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
; 568  : #endif
; 569  : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_lrintl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _lrintf
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_x$ = 8							; size = 4
_lrintf	PROC						; COMDAT

; 545  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 546  : 	long retval = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0

; 547  : #if defined(_MSC_VER)
; 548  : 	_asm {
; 549  : 		fld [x];

  0000b	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 550  : 		fistp [retval];

  0000e	db 5d fc	 fistp	 DWORD PTR _retval$[ebp]

; 551  : 	}
; 552  : #else
; 553  : 	__asm__ __volatile__("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
; 554  : #endif
; 555  : 	return retval;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _retval$[ebp]

; 556  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_lrintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _lrint
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_x$ = 8							; size = 8
_lrint	PROC						; COMDAT

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 532  : 	long retval = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0

; 533  : #if defined(_MSC_VER)
; 534  : 	_asm {
; 535  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 536  : 		fistp [retval];

  0000e	db 5d fc	 fistp	 DWORD PTR _retval$[ebp]

; 537  : 	}
; 538  : #else
; 539  : 	__asm__ __volatile__("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
; 540  : #endif
; 541  : 	return retval;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _retval$[ebp]

; 542  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_lrint	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _rintl
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 8
_rintl	PROC						; COMDAT

; 516  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 517  : 	long double retval = 0.0l;

  00006	d9 ee		 fldz
  00008	dd 5d f8	 fstp	 QWORD PTR _retval$[ebp]

; 518  : #if defined(_MSC_VER)
; 519  : 	_asm {
; 520  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 521  : 		frndint;

  0000e	d9 fc		 frndint

; 522  : 		fstp [retval];

  00010	dd 5d f8	 fstp	 QWORD PTR _retval$[ebp]

; 523  : 	}
; 524  : #else
; 525  : 	__asm__ __volatile__("frndint;": "=t" (retval) : "0" (x));
; 526  : #endif
; 527  : 	return retval;

  00013	dd 45 f8	 fld	 QWORD PTR _retval$[ebp]

; 528  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_rintl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _rintf
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_x$ = 8							; size = 4
_rintf	PROC						; COMDAT

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 502  : 	float retval = 0.0;

  00004	d9 ee		 fldz
  00006	d9 5d fc	 fstp	 DWORD PTR _retval$[ebp]

; 503  : #if defined(_MSC_VER)
; 504  : 	_asm {
; 505  : 		fld [x];

  00009	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 506  : 		frndint;

  0000c	d9 fc		 frndint

; 507  : 		fstp [retval];

  0000e	d9 5d fc	 fstp	 DWORD PTR _retval$[ebp]

; 508  : 	}
; 509  : #else
; 510  : 	__asm__ __volatile__("frndint;": "=t" (retval) : "0" (x));
; 511  : #endif
; 512  : 	return retval;

  00011	d9 45 fc	 fld	 DWORD PTR _retval$[ebp]

; 513  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_rintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _rint
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 8
_rint	PROC						; COMDAT

; 486  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 487  : 	double retval = 0.0;

  00006	d9 ee		 fldz
  00008	dd 5d f8	 fstp	 QWORD PTR _retval$[ebp]

; 488  : #if defined(_MSC_VER)
; 489  : 	_asm {
; 490  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 491  : 		frndint;

  0000e	d9 fc		 frndint

; 492  : 		fstp [retval];

  00010	dd 5d f8	 fstp	 QWORD PTR _retval$[ebp]

; 493  : 	}
; 494  : #else
; 495  : 	__asm__ __volatile__("frndint;": "=t" (retval) : "0" (x));
; 496  : #endif
; 497  : 	return retval;

  00013	dd 45 f8	 fld	 QWORD PTR _retval$[ebp]

; 498  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_rint	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _logbl
_TEXT	SEGMENT
_res$ = -8						; size = 8
_x$ = 8							; size = 8
_logbl	PROC						; COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 390  : 	long double res = 0.0l;

  00006	d9 ee		 fldz
  00008	dd 5d f8	 fstp	 QWORD PTR _res$[ebp]

; 391  : #if defined(_MSC_VER)
; 392  : 	_asm {
; 393  : 		fld[x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 394  : 		fxtract;

  0000e	d9 f4		 fxtract

; 395  : 		fstp[res];

  00010	dd 5d f8	 fstp	 QWORD PTR _res$[ebp]

; 396  : 	}
; 397  : #else
; 398  : 	__asm__ __volatile__("fxtract\n\t"
; 399  : 		"fstp	%%st" : "=t" (res) : "0" (x));
; 400  : #endif
; 401  : 	return res;

  00013	dd 45 f8	 fld	 QWORD PTR _res$[ebp]

; 402  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_logbl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _logbf
_TEXT	SEGMENT
_res$ = -4						; size = 4
_x$ = 8							; size = 4
_logbf	PROC						; COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 374  : 	float res = 0.0F;

  00004	d9 ee		 fldz
  00006	d9 5d fc	 fstp	 DWORD PTR _res$[ebp]

; 375  : #if defined(_MSC_VER)
; 376  : 	_asm {
; 377  : 		fld[x];

  00009	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 378  : 		fxtract;

  0000c	d9 f4		 fxtract

; 379  : 		fstp[res];

  0000e	d9 5d fc	 fstp	 DWORD PTR _res$[ebp]

; 380  : 	}
; 381  : #else
; 382  : 	__asm__ __volatile__("fxtract\n\t"
; 383  : 		"fstp	%%st" : "=t" (res) : "0" (x));
; 384  : #endif
; 385  : 	return res;

  00011	d9 45 fc	 fld	 DWORD PTR _res$[ebp]

; 386  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_logbf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _logb
_TEXT	SEGMENT
_res$ = -8						; size = 8
_x$ = 8							; size = 8
_logb	PROC						; COMDAT

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 358  : 	double res = 0.0;

  00006	d9 ee		 fldz
  00008	dd 5d f8	 fstp	 QWORD PTR _res$[ebp]

; 359  : #if defined(_MSC_VER)
; 360  : 	_asm {
; 361  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 362  : 		fxtract;

  0000e	d9 f4		 fxtract

; 363  : 		fstp [res];

  00010	dd 5d f8	 fstp	 QWORD PTR _res$[ebp]

; 364  : 	}
; 365  : #else
; 366  : 	__asm__ __volatile__("fxtract\n\t"
; 367  : 		"fstp	%%st" : "=t" (res) : "0" (x));
; 368  : #endif
; 369  : 	return res;

  00013	dd 45 f8	 fld	 QWORD PTR _res$[ebp]

; 370  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_logb	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbitl
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 8
___signbitl PROC					; COMDAT

; 271  : __CRT_INLINE int __cdecl __signbitl(long double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 272  : 	unsigned short stw;
; 273  : #if defined(_MSC_VER)
; 274  : 	_asm {
; 275  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 276  : 		fxam;

  00007	d9 e5		 fxam

; 277  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 278  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 279  : 	}
; 280  : #else
; 281  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 282  : #endif
; 283  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 284  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbitl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbitf
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 4
___signbitf PROC					; COMDAT

; 256  : __CRT_INLINE int __cdecl __signbitf(float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 257  : 	unsigned short stw;
; 258  : #if defined(_MSC_VER)
; 259  : 	_asm {
; 260  : 		fld [x];

  00004	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 261  : 		fxam;

  00007	d9 e5		 fxam

; 262  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 263  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 264  : 	}
; 265  : #else
; 266  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 267  : #endif
; 268  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 269  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbitf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbit
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 8
___signbit PROC						; COMDAT

; 241  : __CRT_INLINE int __cdecl __signbit(double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 242  : 	unsigned short stw;
; 243  : #if defined(_MSC_VER)
; 244  : 	_asm {
; 245  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 246  : 		fxam;

  00007	d9 e5		 fxam

; 247  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 248  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 249  : 	}
; 250  : #else
; 251  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 252  : #endif
; 253  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 254  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnanl
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 8
___isnanl PROC						; COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 212  : 	unsigned short sw;
; 213  : #if defined(_MSC_VER)
; 214  : 	_asm {
; 215  : 		fld [_x];

  00004	dd 45 08	 fld	 QWORD PTR __x$[ebp]

; 216  : 		fxam;

  00007	d9 e5		 fxam

; 217  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 218  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 219  : 	}
; 220  : #else
; 221  : 	__asm__ __volatile__("fxam;"
; 222  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 223  : #endif
; 224  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 225  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 226  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnanl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnanf
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 4
___isnanf PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 194  : 	unsigned short sw;
; 195  : #if defined(_MSC_VER)
; 196  : 	_asm {
; 197  : 		fld [_x];

  00004	d9 45 08	 fld	 DWORD PTR __x$[ebp]

; 198  : 		fxam;

  00007	d9 e5		 fxam

; 199  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 200  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 201  : 	}
; 202  : #else
; 203  : 	__asm__ __volatile__("fxam;"
; 204  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 205  : #endif
; 206  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 207  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 208  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnanf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnan
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 8
___isnan PROC						; COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 176  : 	unsigned short sw;
; 177  : #if defined(_MSC_VER)
; 178  : 	_asm {
; 179  : 		fld [_x];

  00004	dd 45 08	 fld	 QWORD PTR __x$[ebp]

; 180  : 		fxam;

  00007	d9 e5		 fxam

; 181  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 182  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 183  : 	}
; 184  : #else
; 185  : 	__asm__ __volatile__("fxam;"
; 186  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 187  : #endif
; 188  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 189  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 190  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnan ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassify
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 8
___fpclassify PROC					; COMDAT

; 125  : __CRT_INLINE int __cdecl __fpclassify(double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 126  : 	unsigned short sw;
; 127  : #if defined(_MSC_VER)
; 128  : 	_asm {
; 129  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 130  : 		fxam;

  00007	d9 e5		 fxam

; 131  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 132  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 133  : 	}
; 134  : #else
; 135  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 136  : #endif
; 137  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 138  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassify ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassifyf
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 4
___fpclassifyf PROC					; COMDAT

; 139  : __CRT_INLINE int __cdecl __fpclassifyf(float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 140  : 	unsigned short sw;
; 141  : #if defined(_MSC_VER)
; 142  : 	_asm {
; 143  : 		fld [x];

  00004	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 144  : 		fxam;

  00007	d9 e5		 fxam

; 145  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 146  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 147  : 	}
; 148  : #else
; 149  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 150  : #endif
; 151  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 152  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassifyf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassifyl
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 8
___fpclassifyl PROC					; COMDAT

; 111  : __CRT_INLINE int __cdecl __fpclassifyl(long double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 112  : 	unsigned short sw;
; 113  : #if defined(_MSC_VER)
; 114  : 	_asm {
; 115  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 116  : 		fxam;

  00007	d9 e5		 fxam

; 117  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 118  : 		mov word ptr [sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 119  : 	}
; 120  : #else
; 121  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 122  : #endif
; 123  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 124  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassifyl ENDP
_TEXT	ENDS
END
