; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\modf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_one	DQ	03ff0000000000000r		; 1
CONST	ENDS
PUBLIC	_modf
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\modf.c
;	COMDAT _modf
_TEXT	SEGMENT
_iw_u$1 = -8						; size = 8
_iw_u$2 = -8						; size = 8
_iw_u$3 = -8						; size = 8
_ew_u$4 = -8						; size = 8
_iw_u$5 = 8						; size = 8
_gh_u$6 = 8						; size = 8
_iw_u$7 = 8						; size = 8
_gh_u$8 = 8						; size = 8
_x$ = 8							; size = 8
_iptr$ = 16						; size = 4
_modf	PROC						; COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 89   : 	__int32_t i0,i1,j_0;
; 90   : 	__uint32_t i;
; 91   : 	EXTRACT_WORDS(i0,i1,x);

  00006	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  0000b	f2 0f 11 45 f8	 movsd	 QWORD PTR _ew_u$4[ebp], xmm0

; 92   : 	j_0 = ((i0>>20)&0x7ff)-0x3ff;	/* exponent of x */

  00010	8b 55 fc	 mov	 edx, DWORD PTR _ew_u$4[ebp+4]
  00013	8b ca		 mov	 ecx, edx
  00015	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00018	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  0001e	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH

; 93   : 	if(j_0<20) {			/* integer part in high x */

  00024	83 f9 14	 cmp	 ecx, 20			; 00000014H
  00027	7d 7c		 jge	 SHORT $LN37@modf

; 94   : 		if(j_0<0) {			/* |x|<1 */

  00029	85 c9		 test	 ecx, ecx
  0002b	79 23		 jns	 SHORT $LN36@modf

; 95   : 			INSERT_WORDS(*iptr,i0&0x80000000U,0);	/* *iptr = +-0 */

  0002d	8b 45 10	 mov	 eax, DWORD PTR _iptr$[ebp]
  00030	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H

; 96   : 			return x;

  00036	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00039	89 55 fc	 mov	 DWORD PTR _iw_u$3[ebp+4], edx
  0003c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iw_u$3[ebp], 0
  00043	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _iw_u$3[ebp]
  00048	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 127  : 		}
; 128  : 	}
; 129  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN36@modf:
  00050	56		 push	 esi

; 97   : 		} else {
; 98   : 			i = (0x000fffff)>>j_0;

  00051	be ff ff 0f 00	 mov	 esi, 1048575		; 000fffffH
  00056	d3 fe		 sar	 esi, cl

; 99   : 			if(((i0&i)|i1)==0) {		/* x is integral */

  00058	8b c6		 mov	 eax, esi
  0005a	23 c2		 and	 eax, edx
  0005c	0b 45 f8	 or	 eax, DWORD PTR _ew_u$4[ebp]

; 100  : 				__uint32_t high;
; 101  : 				*iptr = x;

  0005f	8b 45 10	 mov	 eax, DWORD PTR _iptr$[ebp]
  00062	75 1f		 jne	 SHORT $LN23@modf

; 102  : 				GET_HIGH_WORD(high,x);

  00064	f2 0f 11 45 08	 movsd	 QWORD PTR _gh_u$8[ebp], xmm0

; 103  : 				INSERT_WORDS(x,high&0x80000000U,0);	/* return +-0 */

  00069	81 65 0c 00 00
	00 80		 and	 DWORD PTR _gh_u$8[ebp+4], -2147483648 ; 80000000H
  00070	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iw_u$7[ebp], 0

; 104  : 				return x;

  00077	dd 45 08	 fld	 QWORD PTR _iw_u$7[ebp]
  0007a	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  0007e	5e		 pop	 esi

; 127  : 		}
; 128  : 	}
; 129  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN23@modf:

; 105  : 			} else {
; 106  : 				INSERT_WORDS(*iptr,i0&(~i),0);
; 107  : 				return x - *iptr;

  00083	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00086	f7 d6		 not	 esi
  00088	23 f2		 and	 esi, edx
  0008a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iw_u$2[ebp], 0
  00091	89 75 fc	 mov	 DWORD PTR _iw_u$2[ebp+4], esi
  00094	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _iw_u$2[ebp]
  00099	dc 65 f8	 fsub	 QWORD PTR _iw_u$2[ebp]
  0009c	5e		 pop	 esi
  0009d	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 127  : 		}
; 128  : 	}
; 129  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN37@modf:

; 108  : 			}
; 109  : 		}
; 110  : 	} else if (j_0>51) {		/* no fraction part */

  000a5	83 f9 33	 cmp	 ecx, 51			; 00000033H
  000a8	7e 21		 jle	 SHORT $LN19@modf
$LN44@modf:

; 111  : 		__uint32_t high;
; 112  : 		*iptr = x*one;

  000aa	8b 45 10	 mov	 eax, DWORD PTR _iptr$[ebp]

; 113  : 		GET_HIGH_WORD(high,x);

  000ad	f2 0f 11 45 08	 movsd	 QWORD PTR _gh_u$6[ebp], xmm0

; 114  : 		INSERT_WORDS(x,high&0x80000000U,0);	/* return +-0 */

  000b2	81 65 0c 00 00
	00 80		 and	 DWORD PTR _gh_u$6[ebp+4], -2147483648 ; 80000000H
  000b9	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iw_u$5[ebp], 0

; 115  : 		return x;

  000c0	dd 45 08	 fld	 QWORD PTR _iw_u$5[ebp]
  000c3	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 127  : 		}
; 128  : 	}
; 129  : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
$LN19@modf:

; 116  : 	} else {			/* fraction part in low x */
; 117  : 		i = ((__uint32_t)(0xffffffffU))>>(j_0-20);

  000cb	83 c1 ec	 add	 ecx, -20		; ffffffecH
  000ce	83 c8 ff	 or	 eax, -1
  000d1	d3 e8		 shr	 eax, cl

; 118  : 		if((i1&i)==0) { 		/* x is integral */

  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _ew_u$4[ebp]
  000d6	85 c1		 test	 eax, ecx
  000d8	74 d0		 je	 SHORT $LN44@modf

; 119  : 			__uint32_t high;
; 120  : 			*iptr = x;
; 121  : 			GET_HIGH_WORD(high,x);
; 122  : 			INSERT_WORDS(x,high&0x80000000U,0);	/* return +-0 */
; 123  : 			return x;
; 124  : 		} else {
; 125  : 			INSERT_WORDS(*iptr,i0,i1&(~i));
; 126  : 			return x - *iptr;

  000da	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000dd	f7 d0		 not	 eax
  000df	23 c1		 and	 eax, ecx
  000e1	89 55 fc	 mov	 DWORD PTR _iw_u$1[ebp+4], edx
  000e4	89 45 f8	 mov	 DWORD PTR _iw_u$1[ebp], eax
  000e7	8b 45 10	 mov	 eax, DWORD PTR _iptr$[ebp]
  000ea	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _iw_u$1[ebp]
  000ef	dc 65 f8	 fsub	 QWORD PTR _iw_u$1[ebp]
  000f2	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0

; 127  : 		}
; 128  : 	}
; 129  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
_modf	ENDP
_TEXT	ENDS
END
