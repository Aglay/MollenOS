; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strcasecmp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strcasecmp
PUBLIC	___tolower
EXTRN	___osctype:BYTE
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h
;	COMDAT ___tolower
_TEXT	SEGMENT
_c$ = 8							; size = 1
___tolower PROC						; COMDAT

; 65   : __inline unsigned char __tolower(unsigned char c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	return (isupper(c) && isalpha(c)) ? c - ('A' - 'a') : c;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00006	0f b6 c0	 movzx	 eax, al
  00009	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ___osctype[eax]
  0000f	f6 c1 01	 test	 cl, 1
  00012	74 08		 je	 SHORT $LN4@tolower
  00014	f6 c1 03	 test	 cl, 3
  00017	74 03		 je	 SHORT $LN4@tolower
  00019	83 c0 20	 add	 eax, 32			; 00000020H
$LN4@tolower:

; 67   : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
___tolower ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strcasecmp.c
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h
; File c:\users\philip\documents\github\mollenos\clib\src\string\strcasecmp.c
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h
; File c:\users\philip\documents\github\mollenos\clib\src\string\strcasecmp.c
;	COMDAT _strcasecmp
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_strcasecmp PROC					; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 11   : 	const unsigned char *ucs1 = (const unsigned char *) s1;

  00004	8b 75 08	 mov	 esi, DWORD PTR _s1$[ebp]
  00007	57		 push	 edi

; 12   : 	const unsigned char *ucs2 = (const unsigned char *) s2;

  00008	8b 7d 0c	 mov	 edi, DWORD PTR _s2$[ebp]
  0000b	eb 03 8d 49 00	 npad	 5
$LL4@strcasecmp:
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h

; 66   : 	return (isupper(c) && isalpha(c)) ? c - ('A' - 'a') : c;

  00010	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00013	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ___osctype[eax]
  00019	f6 c1 01	 test	 cl, 1
  0001c	74 08		 je	 SHORT $LN9@strcasecmp
  0001e	f6 c1 03	 test	 cl, 3
  00021	74 03		 je	 SHORT $LN9@strcasecmp
  00023	83 c0 20	 add	 eax, 32			; 00000020H
$LN9@strcasecmp:
; File c:\users\philip\documents\github\mollenos\clib\src\string\strcasecmp.c

; 16   : 		const int c1 = tolower(*ucs1++);

  00026	0f b6 d0	 movzx	 edx, al
  00029	46		 inc	 esi
; File c:\users\philip\documents\github\mollenos\clib\include\ctype.h

; 66   : 	return (isupper(c) && isalpha(c)) ? c - ('A' - 'a') : c;

  0002a	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0002d	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ___osctype[eax]
  00033	f6 c1 01	 test	 cl, 1
  00036	74 08		 je	 SHORT $LN13@strcasecmp
  00038	f6 c1 03	 test	 cl, 3
  0003b	74 03		 je	 SHORT $LN13@strcasecmp
  0003d	83 c0 20	 add	 eax, 32			; 00000020H
$LN13@strcasecmp:
; File c:\users\philip\documents\github\mollenos\clib\src\string\strcasecmp.c

; 17   : 		const int c2 = tolower(*ucs2++);

  00040	0f b6 c8	 movzx	 ecx, al
  00043	47		 inc	 edi

; 18   : 		
; 19   : 		if (((d = c1 - c2) != 0) || (c2 == '\0'))

  00044	2b d1		 sub	 edx, ecx
  00046	75 04		 jne	 SHORT $LN19@strcasecmp
  00048	84 c0		 test	 al, al
  0004a	75 c4		 jne	 SHORT $LL4@strcasecmp
$LN19@strcasecmp:
  0004c	5f		 pop	 edi

; 20   : 			break;
; 21   : 	}
; 22   : 	return d;

  0004d	8b c2		 mov	 eax, edx
  0004f	5e		 pop	 esi

; 23   : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_strcasecmp ENDP
_TEXT	ENDS
END
