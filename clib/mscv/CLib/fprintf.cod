; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\stdio\fprintf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_fprintf
EXTRN	_vsprintf:PROC
EXTRN	_vprintf:PROC
EXTRN	_fwrite:PROC
EXTRN	___errno:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\fprintf.c
;	COMDAT _fprintf
_TEXT	SEGMENT
_Out$ = -256						; size = 256
_stream$ = 8						; size = 4
_format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	56		 push	 esi

; 34   : 	/* Variables */
; 35   : 	va_list Arguments;
; 36   : 	int RetVal;
; 37   : 	char Out[256];
; 38   : 
; 39   : 	/* Sanitize input */
; 40   : 	if (stream == NULL
; 41   : 		|| stream == stdin) {

  0000a	8b 75 08	 mov	 esi, DWORD PTR _stream$[ebp]
  0000d	85 f6		 test	 esi, esi
  0000f	74 76		 je	 SHORT $LN3@fprintf
  00011	83 fe 02	 cmp	 esi, 2
  00014	74 71		 je	 SHORT $LN3@fprintf

; 44   : 	}
; 45   : 
; 46   : 	/* Sanity */
; 47   : 	if (stream == stdout
; 48   : 		|| stream == stderr) 

  00016	83 fe 01	 cmp	 esi, 1
  00019	74 58		 je	 SHORT $LN1@fprintf
  0001b	83 fe 03	 cmp	 esi, 3
  0001e	74 53		 je	 SHORT $LN1@fprintf

; 54   : 		va_end(Arguments);
; 55   : 
; 56   : 		/* Done! */
; 57   : 		return RetVal;
; 58   : 	}
; 59   : 
; 60   : 	/* Reset buffer */
; 61   : 	memset(&Out[0], 0, sizeof(Out));

  00020	68 00 01 00 00	 push	 256			; 00000100H
  00025	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _Out$[ebp]
  0002b	6a 00		 push	 0
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _memset

; 62   : 
; 63   : 	/* Build buffer */
; 64   : 	va_start(Arguments, format);
; 65   : 	RetVal = vsprintf(&Out[0], format, Arguments);

  00033	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  00036	50		 push	 eax
  00037	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  0003a	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _Out$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _vsprintf

; 66   : 	va_end(Arguments);
; 67   : 
; 68   : 	/* Write to stream */
; 69   : 	return fwrite(&Out[0], strlen(&Out[0]), 1, stream);

  00046	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _Out$[ebp]
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL7@fprintf:
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	41		 inc	 ecx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL7@fprintf
  00059	56		 push	 esi
  0005a	2b ca		 sub	 ecx, edx
  0005c	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _Out$[ebp]
  00062	6a 01		 push	 1
  00064	51		 push	 ecx
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _fwrite
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	5e		 pop	 esi

; 70   : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN1@fprintf:

; 49   : 	{
; 50   : 		/* Redirect the call to vprintf instead
; 51   : 		 * as the output goes to screen instead */
; 52   : 		va_start(Arguments, format);
; 53   : 		RetVal = vprintf(format, Arguments);

  00073	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  00076	50		 push	 eax
  00077	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  0007a	e8 00 00 00 00	 call	 _vprintf
  0007f	83 c4 08	 add	 esp, 8
  00082	5e		 pop	 esi

; 70   : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN3@fprintf:

; 42   : 		_set_errno(EINVAL);

  00087	e8 00 00 00 00	 call	 ___errno
  0008c	5e		 pop	 esi
  0008d	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H

; 43   : 		return -1;

  00093	83 c8 ff	 or	 eax, -1

; 70   : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
END
