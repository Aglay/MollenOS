; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\string\memset.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_memset
; Function compile flags: /Ogtp
; File c:\users\phail\documents\github\mollenos\clib\src\string\memset.c
;	COMDAT _memset
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_c$ = 12						; size = 4
_count$ = 16						; size = 4
_memset	PROC						; COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 15   : 	char *s = (char *)dest;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00006	53		 push	 ebx

; 16   : 	int i;
; 17   : 	unsigned long buffer;
; 18   : 	unsigned long *aligned_addr;
; 19   : 	unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an

  00007	8a 5d 0c	 mov	 bl, BYTE PTR _c$[ebp]
  0000a	56		 push	 esi

; 20   : 					unsigned variable.  */
; 21   : 
; 22   : 	while (UNALIGNED (s))

  0000b	8b 75 10	 mov	 esi, DWORD PTR _count$[ebp]
  0000e	57		 push	 edi
  0000f	8b d0		 mov	 edx, eax
  00011	0f b6 cb	 movzx	 ecx, bl
  00014	a8 03		 test	 al, 3
  00016	74 13		 je	 SHORT $LN13@memset
$LL14@memset:

; 23   : 	{
; 24   : 		if (count--)

  00018	8b fe		 mov	 edi, esi
  0001a	4e		 dec	 esi
  0001b	85 ff		 test	 edi, edi
  0001d	0f 84 7d 00 00
	00		 je	 $LN15@memset

; 25   : 			*s++ = (char) c;

  00023	88 1a		 mov	 BYTE PTR [edx], bl
  00025	42		 inc	 edx
  00026	f6 c2 03	 test	 dl, 3
  00029	75 ed		 jne	 SHORT $LL14@memset
$LN13@memset:

; 26   : 		else
; 27   : 			return dest;
; 28   : 	}
; 29   : 
; 30   : 	if (!TOO_SMALL (count))

  0002b	83 fe 04	 cmp	 esi, 4
  0002e	72 4c		 jb	 SHORT $LN21@memset

; 34   : 
; 35   : 		/* Store D into each char sized location in BUFFER so that
; 36   : 			we can set large blocks quickly.  */
; 37   : 		buffer = (d << 8) | d;

  00030	8b c1		 mov	 eax, ecx
  00032	c1 e0 08	 shl	 eax, 8
  00035	0b c1		 or	 eax, ecx

; 38   : 		buffer |= (buffer << 16);

  00037	8b c8		 mov	 ecx, eax
  00039	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0003c	0b c1		 or	 eax, ecx

; 39   : 		for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
; 40   : 			buffer = (buffer << i) | buffer;
; 41   : 
; 42   : 		/* Unroll the loop.  */
; 43   : 		while (count >= LBLOCKSIZE*4)

  0003e	83 fe 10	 cmp	 esi, 16			; 00000010H
  00041	72 19		 jb	 SHORT $LN20@memset

; 31   : 	{
; 32   : 		/* If we get this far, we know that n is large and s is word-aligned. */
; 33   : 		aligned_addr = (unsigned long *) s;

  00043	8b ce		 mov	 ecx, esi
  00045	c1 e9 04	 shr	 ecx, 4
$LL6@memset:

; 44   : 		{
; 45   : 			*aligned_addr++ = buffer;

  00048	89 02		 mov	 DWORD PTR [edx], eax

; 46   : 			*aligned_addr++ = buffer;

  0004a	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 47   : 			*aligned_addr++ = buffer;

  0004d	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 48   : 			*aligned_addr++ = buffer;

  00050	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00053	83 c2 10	 add	 edx, 16			; 00000010H

; 49   : 			count -= 4*LBLOCKSIZE;

  00056	83 ee 10	 sub	 esi, 16			; 00000010H
  00059	49		 dec	 ecx
  0005a	75 ec		 jne	 SHORT $LL6@memset
$LN20@memset:

; 50   : 		}
; 51   : 
; 52   : 		while (count >= LBLOCKSIZE)

  0005c	83 fe 04	 cmp	 esi, 4
  0005f	72 18		 jb	 SHORT $LN3@memset
  00061	8b de		 mov	 ebx, esi
  00063	c1 eb 02	 shr	 ebx, 2
  00066	8b fa		 mov	 edi, edx
  00068	8b cb		 mov	 ecx, ebx
  0006a	f3 ab		 rep stosd
  0006c	8d 14 9a	 lea	 edx, DWORD PTR [edx+ebx*4]
  0006f	90		 npad	 1
$LL4@memset:

; 53   : 		{
; 54   : 			*aligned_addr++ = buffer;
; 55   : 			count -= LBLOCKSIZE;

  00070	83 ee 04	 sub	 esi, 4
  00073	4b		 dec	 ebx
  00074	75 fa		 jne	 SHORT $LL4@memset

; 50   : 		}
; 51   : 
; 52   : 		while (count >= LBLOCKSIZE)

  00076	8a 5d 0c	 mov	 bl, BYTE PTR _c$[ebp]
$LN3@memset:

; 56   : 		}
; 57   : 		/* Pick up the remainder with a bytewise loop.  */
; 58   : 		s = (char*)aligned_addr;

  00079	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
$LN21@memset:

; 59   : 	}
; 60   : 
; 61   : 	while (count--)

  0007c	85 f6		 test	 esi, esi
  0007e	74 20		 je	 SHORT $LN15@memset
  00080	8a c3		 mov	 al, bl
  00082	0f b6 c0	 movzx	 eax, al
  00085	69 c0 01 01 01
	01		 imul	 eax, 16843009		; 01010101H
  0008b	8b ce		 mov	 ecx, esi
  0008d	8b fa		 mov	 edi, edx
  0008f	8b d1		 mov	 edx, ecx
  00091	c1 e9 02	 shr	 ecx, 2
  00094	f3 ab		 rep stosd
  00096	8b ca		 mov	 ecx, edx
  00098	83 e1 03	 and	 ecx, 3
  0009b	f3 aa		 rep stosb
  0009d	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
$LN15@memset:
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 62   : 		*s++ = (char) c;
; 63   : 
; 64   : 	return dest;
; 65   : }

  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_memset	ENDP
_TEXT	ENDS
END
