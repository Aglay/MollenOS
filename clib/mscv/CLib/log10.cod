; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\math\log10.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_zero	DQ	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_two54	DQ	04350000000000000r		; 1.80144e+016
_ivln10	DQ	03fdbcb7b1526e50er		; 0.434294
_log10_2hi DQ	03fd34413509f6000r		; 0.30103
_log10_2lo DQ	03d59fef311f12b36r		; 3.69424e-013
CONST	ENDS
PUBLIC	__real@c350000000000000
PUBLIC	_log10
EXTRN	__fltused:DWORD
EXTRN	__CIlog:PROC
;	COMDAT __real@c350000000000000
; File c:\users\phail\documents\github\mollenos\clib\src\math\log10.c
CONST	SEGMENT
__real@c350000000000000 DQ 0c350000000000000r	; -1.80144e+016
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _log10
_TEXT	SEGMENT
_y$ = -8						; size = 8
tv216 = -4						; size = 4
_x$ = 8							; size = 8
_log10	PROC						; COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	double y,z;
; 64   : 	int i,k,hx;
; 65   : 	unsigned lx;
; 66   : 
; 67   : 	hx = __HI(x);	/* high word of x */
; 68   : 	lx = __LO(x);	/* low word of x */
; 69   : 
; 70   :         k=0;
; 71   :         if (hx < 0x00100000) {                  /* x < 2**-1022  */

  00003	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00006	83 ec 08	 sub	 esp, 8
  00009	33 c9		 xor	 ecx, ecx
  0000b	3d 00 00 10 00	 cmp	 eax, 1048576		; 00100000H
  00010	7d 43		 jge	 SHORT $LN7@log10

; 72   :             if (((hx&0x7fffffff)|lx)==0)

  00012	8b c8		 mov	 ecx, eax
  00014	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0001a	0b 4d 08	 or	 ecx, DWORD PTR _x$[ebp]
  0001d	75 10		 jne	 SHORT $LN3@log10

; 73   :                 return -two54/zero;             /* log(+-0)=-inf */

  0001f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c350000000000000
  00025	dc 35 00 00 00
	00		 fdiv	 QWORD PTR _zero

; 86   : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN3@log10:

; 74   :             if (hx<0) return (x-x)/zero;        /* log(-#) = NaN */

  0002f	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00032	85 c0		 test	 eax, eax
  00034	79 0c		 jns	 SHORT $LN2@log10
  00036	dc e0		 fsubr	 ST(0), ST(0)
  00038	dc 35 00 00 00
	00		 fdiv	 QWORD PTR _zero

; 86   : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN2@log10:

; 75   :             k -= 54; x *= two54; /* subnormal number, scale up x */

  00042	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _two54
  00048	b9 ca ff ff ff	 mov	 ecx, -54		; ffffffcaH
  0004d	dd 55 08	 fst	 QWORD PTR _x$[ebp]
  00050	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00053	eb 03		 jmp	 SHORT $LN4@log10
$LN7@log10:
  00055	dd 45 08	 fld	 QWORD PTR _x$[ebp]
$LN4@log10:

; 76   :             hx = __HI(x);                /* high word of x */
; 77   :         }
; 78   : 	if (hx >= 0x7ff00000) return x+x;

  00058	3d 00 00 f0 7f	 cmp	 eax, 2146435072		; 7ff00000H
  0005d	7c 06		 jl	 SHORT $LN10@log10
  0005f	dc c0		 fadd	 ST(0), ST(0)

; 86   : }

  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN10@log10:

; 79   : 	k += (hx>>20)-1023;

  00065	8b d0		 mov	 edx, eax
  00067	dd d8		 fstp	 ST(0)
  00069	c1 fa 14	 sar	 edx, 20			; 00000014H
  0006c	8d 94 11 01 fc
	ff ff		 lea	 edx, DWORD PTR [ecx+edx-1023]

; 80   : 	i  = ((unsigned)k&0x80000000)>>31;

  00073	8b ca		 mov	 ecx, edx
  00075	c1 e9 1f	 shr	 ecx, 31			; 0000001fH

; 81   :         hx = (hx&0x000fffff)|((0x3ff-i)<<20);
; 82   :         y  = (double)(k+i);

  00078	03 d1		 add	 edx, ecx
  0007a	89 55 fc	 mov	 DWORD PTR tv216[ebp], edx
  0007d	db 45 fc	 fild	 DWORD PTR tv216[ebp]

; 83   :         __HI(x) = hx;

  00080	ba ff 03 00 00	 mov	 edx, 1023		; 000003ffH
  00085	2b d1		 sub	 edx, ecx
  00087	c1 e2 14	 shl	 edx, 20			; 00000014H
  0008a	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  0008f	dd 5d f8	 fstp	 QWORD PTR _y$[ebp]
  00092	0b d0		 or	 edx, eax
  00094	89 55 0c	 mov	 DWORD PTR _x$[ebp+4], edx

; 84   : 	z  = y*log10_2lo + ivln10*log(x);

  00097	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0009a	e8 00 00 00 00	 call	 __CIlog
  0009f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ivln10
  000a5	dd 45 f8	 fld	 QWORD PTR _y$[ebp]
  000a8	dd 05 00 00 00
	00		 fld	 QWORD PTR _log10_2lo
  000ae	d8 c9		 fmul	 ST(0), ST(1)
  000b0	de c2		 faddp	 ST(2), ST(0)

; 85   : 	return  z+y*log10_2hi;

  000b2	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _log10_2hi
  000b8	de c1		 faddp	 ST(1), ST(0)

; 86   : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_log10	ENDP
_TEXT	ENDS
END
