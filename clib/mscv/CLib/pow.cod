; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\math\pow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_bp	DQ	03ff0000000000000r		; 1
	DQ	03ff8000000000000r		; 1.5
_dp_h	DQ	00000000000000000r		; 0
	DQ	03fe2b80340000000r		; 0.584962
_dp_l	DQ	00000000000000000r		; 0
	DQ	03e4cfdeb43cfd006r		; 1.35004e-008
_zero	DQ	00000000000000000r		; 0
_one	DQ	03ff0000000000000r		; 1
_two	DQ	04000000000000000r		; 2
_two53	DQ	04340000000000000r		; 9.0072e+015
_huge	DQ	07e37e43c8800759cr		; 1e+300
_tiny	DQ	001a56e1fc2f8f359r		; 1e-300
_L1	DQ	03fe3333333333303r		; 0.6
_L2	DQ	03fdb6db6db6fabffr		; 0.428571
_L3	DQ	03fd55555518f264dr		; 0.333333
_L4	DQ	03fd17460a91d4101r		; 0.272728
_L5	DQ	03fcd864a93c9db65r		; 0.230661
_L6	DQ	03fca7e284a454eefr		; 0.206975
_P1	DQ	03fc555555555553er		; 0.166667
_P2	DQ	0bf66c16c16bebd93r		; -0.00277778
_P3	DQ	03f11566aaf25de2cr		; 6.61376e-005
_P4	DQ	0bebbbd41c5d26bf1r		; -1.65339e-006
_P5	DQ	03e66376972bea4d0r		; 4.13814e-008
_lg2	DQ	03fe62e42fefa39efr		; 0.693147
_lg2_h	DQ	03fe62e4300000000r		; 0.693147
_lg2_l	DQ	0be205c610ca86c39r		; -1.90465e-009
_ovt	DQ	03c971547652b82fer		; 8.00857e-017
_cp	DQ	03feec709dc3a03fdr		; 0.961797
_cp_h	DQ	03feec709e0000000r		; 0.961797
_cp_l	DQ	0be3e2fe0145b01f5r		; -7.02846e-009
_ivln2	DQ	03ff71547652b82fer		; 1.4427
_ivln2_h DQ	03ff7154760000000r		; 1.4427
_ivln2_l DQ	03e54ae0bf85ddf44r		; 1.92596e-008
CONST	ENDS
_DATA	SEGMENT
_sccsid	DB	'@(#)e_pow.c 1.5 04/04/22 SMI', 00H
_DATA	ENDS
PUBLIC	_pow
PUBLIC	__real@01a56e1fc2f8f359
PUBLIC	__real@3c971547652b82fe
PUBLIC	__real@3e205c610ca86c39
PUBLIC	__real@3e3e2fe0145b01f5
PUBLIC	__real@3e54ae0bf85ddf44
PUBLIC	__real@3e66376972bea4d0
PUBLIC	__real@3ebbbd41c5d26bf1
PUBLIC	__real@3f11566aaf25de2c
PUBLIC	__real@3f66c16c16bebd93
PUBLIC	__real@3fc555555555553e
PUBLIC	__real@3fca7e284a454eef
PUBLIC	__real@3fcd864a93c9db65
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd17460a91d4101
PUBLIC	__real@3fd55555518f264d
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fdb6db6db6fabff
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333303
PUBLIC	__real@3fe62e42fefa39ef
PUBLIC	__real@3fe62e4300000000
PUBLIC	__real@3feec709dc3a03fd
PUBLIC	__real@3feec709e0000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff7154760000000
PUBLIC	__real@3ff71547652b82fe
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4340000000000000
PUBLIC	__real@7e37e43c8800759c
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	_scalbn:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@7e37e43c8800759c
CONST	SEGMENT
__real@7e37e43c8800759c DQ 07e37e43c8800759cr	; 1e+300
CONST	ENDS
;	COMDAT __real@4340000000000000
CONST	SEGMENT
__real@4340000000000000 DQ 04340000000000000r	; 9.0072e+015
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff71547652b82fe
CONST	SEGMENT
__real@3ff71547652b82fe DQ 03ff71547652b82fer	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff7154760000000
CONST	SEGMENT
__real@3ff7154760000000 DQ 03ff7154760000000r	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feec709e0000000
CONST	SEGMENT
__real@3feec709e0000000 DQ 03feec709e0000000r	; 0.961797
CONST	ENDS
;	COMDAT __real@3feec709dc3a03fd
CONST	SEGMENT
__real@3feec709dc3a03fd DQ 03feec709dc3a03fdr	; 0.961797
CONST	ENDS
;	COMDAT __real@3fe62e4300000000
CONST	SEGMENT
__real@3fe62e4300000000 DQ 03fe62e4300000000r	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe62e42fefa39ef
CONST	SEGMENT
__real@3fe62e42fefa39ef DQ 03fe62e42fefa39efr	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe3333333333303
CONST	SEGMENT
__real@3fe3333333333303 DQ 03fe3333333333303r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdb6db6db6fabff
CONST	SEGMENT
__real@3fdb6db6db6fabff DQ 03fdb6db6db6fabffr	; 0.428571
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd55555518f264d
CONST	SEGMENT
__real@3fd55555518f264d DQ 03fd55555518f264dr	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd17460a91d4101
CONST	SEGMENT
__real@3fd17460a91d4101 DQ 03fd17460a91d4101r	; 0.272728
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcd864a93c9db65
CONST	SEGMENT
__real@3fcd864a93c9db65 DQ 03fcd864a93c9db65r	; 0.230661
CONST	ENDS
;	COMDAT __real@3fca7e284a454eef
CONST	SEGMENT
__real@3fca7e284a454eef DQ 03fca7e284a454eefr	; 0.206975
CONST	ENDS
;	COMDAT __real@3fc555555555553e
CONST	SEGMENT
__real@3fc555555555553e DQ 03fc555555555553er	; 0.166667
CONST	ENDS
;	COMDAT __real@3f66c16c16bebd93
CONST	SEGMENT
__real@3f66c16c16bebd93 DQ 03f66c16c16bebd93r	; 0.00277778
CONST	ENDS
;	COMDAT __real@3f11566aaf25de2c
CONST	SEGMENT
__real@3f11566aaf25de2c DQ 03f11566aaf25de2cr	; 6.61376e-005
CONST	ENDS
;	COMDAT __real@3ebbbd41c5d26bf1
CONST	SEGMENT
__real@3ebbbd41c5d26bf1 DQ 03ebbbd41c5d26bf1r	; 1.65339e-006
CONST	ENDS
;	COMDAT __real@3e66376972bea4d0
CONST	SEGMENT
__real@3e66376972bea4d0 DQ 03e66376972bea4d0r	; 4.13814e-008
CONST	ENDS
;	COMDAT __real@3e54ae0bf85ddf44
CONST	SEGMENT
__real@3e54ae0bf85ddf44 DQ 03e54ae0bf85ddf44r	; 1.92596e-008
CONST	ENDS
;	COMDAT __real@3e3e2fe0145b01f5
CONST	SEGMENT
__real@3e3e2fe0145b01f5 DQ 03e3e2fe0145b01f5r	; 7.02846e-009
CONST	ENDS
;	COMDAT __real@3e205c610ca86c39
CONST	SEGMENT
__real@3e205c610ca86c39 DQ 03e205c610ca86c39r	; 1.90465e-009
CONST	ENDS
;	COMDAT __real@3c971547652b82fe
CONST	SEGMENT
__real@3c971547652b82fe DQ 03c971547652b82fer	; 8.00857e-017
CONST	ENDS
;	COMDAT __real@01a56e1fc2f8f359
CONST	SEGMENT
__real@01a56e1fc2f8f359 DQ 001a56e1fc2f8f359r	; 1e-300
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\phail\documents\github\mollenos\clib\src\math\pow.c
;	COMDAT _pow
_TEXT	SEGMENT
_n$1$ = -24						; size = 4
_j$2$ = -24						; size = 4
_j$1$ = -24						; size = 4
_t_h$1 = -24						; size = 8
_t1$ = -24						; size = 8
_t$ = -24						; size = 8
_z$ = -24						; size = 8
_s$1$ = -16						; size = 8
_t2$1$ = -8						; size = 8
tv1042 = -8						; size = 8
tv1032 = -8						; size = 8
tv1027 = -8						; size = 8
tv1023 = -8						; size = 8
tv1005 = -8						; size = 8
tv939 = -8						; size = 8
tv933 = -8						; size = 8
tv929 = -8						; size = 8
tv924 = -8						; size = 8
tv890 = -8						; size = 8
tv886 = -8						; size = 8
_y1$ = -8						; size = 8
_p_h$ = -8						; size = 8
_s_h$2 = -8						; size = 8
tv211 = -8						; size = 8
tv204 = -8						; size = 8
tv197 = -8						; size = 8
tv192 = -8						; size = 8
tv144 = -8						; size = 8
tv141 = -8						; size = 8
_ax$ = -8						; size = 8
_x$ = 8							; size = 8
_y$ = 16						; size = 8
_pow	PROC						; COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 104  : 	double z,ax,z_h,z_l,p_h,p_l;
; 105  : 	double y1,t1,t2,r,s,t,u,v,w;
; 106  : 	int i0,i1,i,j,k,yisint,n;
; 107  : 	int hx,hy,ix,iy;
; 108  : 	unsigned lx,ly;
; 109  : 
; 110  : 	i0 = ((*(int*)&one)>>29)^1; i1=1-i0;
; 111  : 	hx = __HI(x); lx = __LO(x);
; 112  : 	hy = __HI(y); ly = __LO(y);
; 113  : 	ix = hx&0x7fffffff;  iy = hy&0x7fffffff;

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00009	83 ec 18	 sub	 esp, 24			; 00000018H
  0000c	8b d1		 mov	 edx, ecx
  0000e	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 14	 mov	 edi, DWORD PTR _y$[ebp+4]
  00019	8b f7		 mov	 esi, edi
  0001b	81 e6 ff ff ff
	7f		 and	 esi, 2147483647		; 7fffffffH

; 114  : 
; 115  :     /* y==zero: x**0 = 1 */
; 116  : 	if((iy|ly)==0) return one; 	

  00021	8b c6		 mov	 eax, esi
  00023	0b 45 10	 or	 eax, DWORD PTR _y$[ebp]
  00026	75 08		 jne	 SHORT $LN60@pow
  00028	d9 e8		 fld1

; 306  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN60@pow:

; 117  : 
; 118  :     /* +-NaN return x+y */
; 119  : 	if(ix > 0x7ff00000 || ((ix==0x7ff00000)&&(lx!=0)) ||
; 120  : 	   iy > 0x7ff00000 || ((iy==0x7ff00000)&&(ly!=0))) 

  00030	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  00036	0f 8f 4d 09 00
	00		 jg	 $LN58@pow
  0003c	75 0a		 jne	 SHORT $LN57@pow
  0003e	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00042	0f 85 41 09 00
	00		 jne	 $LN58@pow
$LN57@pow:
  00048	81 fe 00 00 f0
	7f		 cmp	 esi, 2146435072		; 7ff00000H
  0004e	0f 8f 35 09 00
	00		 jg	 $LN58@pow
  00054	75 0a		 jne	 SHORT $LN59@pow
  00056	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  0005a	0f 85 29 09 00
	00		 jne	 $LN58@pow
$LN59@pow:

; 122  : 
; 123  :     /* determine if y is an odd int when x < 0
; 124  :      * yisint = 0	... y is not an integer
; 125  :      * yisint = 1	... y is an odd int
; 126  :      * yisint = 2	... y is an even int
; 127  :      */
; 128  : 	yisint  = 0;
; 129  : 	if(hx<0) {	

  00060	85 c9		 test	 ecx, ecx
  00062	0f 89 80 00 00
	00		 jns	 $LN80@pow

; 130  : 	    if(iy>=0x43400000) yisint = 2; /* even integer y */

  00068	81 fe 00 00 40
	43		 cmp	 esi, 1128267776		; 43400000H
  0006e	7c 07		 jl	 SHORT $LN55@pow
  00070	b9 02 00 00 00	 mov	 ecx, 2
  00075	eb 73		 jmp	 SHORT $LN48@pow
$LN55@pow:

; 131  : 	    else if(iy>=0x3ff00000) {

  00077	81 fe 00 00 f0
	3f		 cmp	 esi, 1072693248		; 3ff00000H
  0007d	7c 69		 jl	 SHORT $LN80@pow

; 132  : 		k = (iy>>20)-0x3ff;	   /* exponent */

  0007f	8b c6		 mov	 eax, esi
  00081	c1 f8 14	 sar	 eax, 20			; 00000014H
  00084	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH

; 133  : 		if(k>20) {

  00089	83 f8 14	 cmp	 eax, 20			; 00000014H
  0008c	7e 29		 jle	 SHORT $LN52@pow

; 134  : 		    j = ly>>(52-k);

  0008e	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00093	2b c8		 sub	 ecx, eax
  00095	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00098	d3 e8		 shr	 eax, cl
  0009a	89 44 24 08	 mov	 DWORD PTR _j$1$[esp+32], eax

; 135  : 		    if((j<<(52-k))== (int)ly) yisint = 2-(j&1);

  0009e	d3 e0		 shl	 eax, cl
  000a0	3b 45 10	 cmp	 eax, DWORD PTR _y$[ebp]
  000a3	75 43		 jne	 SHORT $LN80@pow
  000a5	8b 4c 24 08	 mov	 ecx, DWORD PTR _j$1$[esp+32]
  000a9	b8 02 00 00 00	 mov	 eax, 2
  000ae	83 e1 01	 and	 ecx, 1
  000b1	2b c1		 sub	 eax, ecx

; 136  : 		} else if(ly==0) {

  000b3	8b c8		 mov	 ecx, eax
  000b5	eb 33		 jmp	 SHORT $LN48@pow
$LN52@pow:
  000b7	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  000bb	0f 85 4b 01 00
	00		 jne	 $LN76@pow

; 137  : 		    j = iy>>(20-k);

  000c1	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000c6	2b c8		 sub	 ecx, eax
  000c8	8b c6		 mov	 eax, esi
  000ca	d3 f8		 sar	 eax, cl
  000cc	89 44 24 08	 mov	 DWORD PTR _j$2$[esp+32], eax

; 138  : 		    if((j<<(20-k))==iy) yisint = 2-(j&1);

  000d0	d3 e0		 shl	 eax, cl
  000d2	3b c6		 cmp	 eax, esi
  000d4	75 20		 jne	 SHORT $LN77@pow
  000d6	8b 4c 24 08	 mov	 ecx, DWORD PTR _j$2$[esp+32]
  000da	b8 02 00 00 00	 mov	 eax, 2
  000df	83 e1 01	 and	 ecx, 1
  000e2	2b c1		 sub	 eax, ecx

; 139  : 		}
; 140  : 	    }		
; 141  : 	} 
; 142  : 
; 143  :     /* special value of y */
; 144  : 	if(ly==0) { 	

  000e4	8b c8		 mov	 ecx, eax
  000e6	eb 10		 jmp	 SHORT $LN75@pow
$LN80@pow:
  000e8	33 c9		 xor	 ecx, ecx
$LN48@pow:
  000ea	83 7d 10 00	 cmp	 DWORD PTR _y$[ebp], 0
  000ee	0f 85 1a 01 00
	00		 jne	 $LN81@pow
  000f4	eb 02		 jmp	 SHORT $LN75@pow
$LN77@pow:
  000f6	33 c9		 xor	 ecx, ecx
$LN75@pow:

; 145  : 	    if (iy==0x7ff00000) {	/* y is +-inf */

  000f8	81 fe 00 00 f0
	7f		 cmp	 esi, 2146435072		; 7ff00000H
  000fe	0f 85 8c 00 00
	00		 jne	 $LN42@pow

; 146  : 	        if(((ix-0x3ff00000)|lx)==0)

  00104	8d 82 00 00 10
	c0		 lea	 eax, DWORD PTR [edx-1072693248]
  0010a	0b 45 08	 or	 eax, DWORD PTR _x$[ebp]
  0010d	75 19		 jne	 SHORT $LN45@pow

; 147  : 		    return  y - y;	/* inf**+-1 is NaN */

  0010f	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _y$[ebp]
  00114	f2 0f 5c c0	 subsd	 xmm0, xmm0
  00118	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv1042[esp+32], xmm0
  0011e	dd 44 24 18	 fld	 QWORD PTR tv1042[esp+32]

; 306  : }

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
$LN45@pow:

; 148  : 	        else if (ix >= 0x3ff00000)/* (|x|>1)**+-inf = inf,0 */

  00128	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  0012e	7c 2c		 jl	 SHORT $LN43@pow

; 149  : 		    return (hy>=0)? y: zero;

  00130	85 ff		 test	 edi, edi
  00132	78 15		 js	 SHORT $LN63@pow
  00134	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _y$[ebp]
  00139	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv141[esp+32], xmm0
  0013f	dd 44 24 18	 fld	 QWORD PTR tv141[esp+32]

; 306  : }

  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c3		 ret	 0
$LN63@pow:
  00149	0f 57 c0	 xorps	 xmm0, xmm0

; 149  : 		    return (hy>=0)? y: zero;

  0014c	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv141[esp+32], xmm0
  00152	dd 44 24 18	 fld	 QWORD PTR tv141[esp+32]

; 306  : }

  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c3		 ret	 0
$LN43@pow:

; 150  : 	        else			/* (|x|<1)**-,+inf = inf,0 */
; 151  : 		    return (hy<0)?-y: zero;

  0015c	85 ff		 test	 edi, edi
  0015e	79 1d		 jns	 SHORT $LN65@pow
  00160	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _y$[ebp]
  00165	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0016d	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv144[esp+32], xmm0
  00173	dd 44 24 18	 fld	 QWORD PTR tv144[esp+32]

; 306  : }

  00177	5f		 pop	 edi
  00178	5e		 pop	 esi
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c3		 ret	 0
$LN65@pow:
  0017d	0f 57 c0	 xorps	 xmm0, xmm0

; 150  : 	        else			/* (|x|<1)**-,+inf = inf,0 */
; 151  : 		    return (hy<0)?-y: zero;

  00180	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv144[esp+32], xmm0
  00186	dd 44 24 18	 fld	 QWORD PTR tv144[esp+32]

; 306  : }

  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c3		 ret	 0
$LN42@pow:

; 152  : 	    } 
; 153  : 	    if(iy==0x3ff00000) {	/* y is  +-1 */

  00190	81 fe 00 00 f0
	3f		 cmp	 esi, 1072693248		; 3ff00000H
  00196	75 2a		 jne	 SHORT $LN39@pow

; 154  : 		if(hy<0) return one/x; else return x;

  00198	85 ff		 test	 edi, edi
  0019a	79 1d		 jns	 SHORT $LN40@pow
  0019c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  001a4	f2 0f 5e 45 08	 divsd	 xmm0, QWORD PTR _x$[ebp]
  001a9	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv1032[esp+32], xmm0
  001af	dd 44 24 18	 fld	 QWORD PTR tv1032[esp+32]

; 306  : }

  001b3	5f		 pop	 edi
  001b4	5e		 pop	 esi
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
$LN40@pow:

; 154  : 		if(hy<0) return one/x; else return x;

  001b9	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 306  : }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c3		 ret	 0
$LN39@pow:

; 155  : 	    }
; 156  : 	    if(hy==0x40000000) return x*x; /* y is  2 */

  001c2	81 ff 00 00 00
	40		 cmp	 edi, 1073741824		; 40000000H
  001c8	75 19		 jne	 SHORT $LN38@pow
  001ca	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  001cf	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  001d3	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv1027[esp+32], xmm0
  001d9	dd 44 24 18	 fld	 QWORD PTR tv1027[esp+32]

; 306  : }

  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c3		 ret	 0
$LN38@pow:

; 157  : 	    if(hy==0x3fe00000) {	/* y is  0.5 */
; 158  : 		if(hx>=0)	/* x >= +0 */

  001e3	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  001e6	81 ff 00 00 e0
	3f		 cmp	 edi, 1071644672		; 3fe00000H
  001ec	75 23		 jne	 SHORT $LN36@pow
  001ee	85 c0		 test	 eax, eax
  001f0	78 1f		 js	 SHORT $LN36@pow

; 159  : 		return sqrt(x);	

  001f2	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  001f7	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  001fc	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv1023[esp+32], xmm0
  00202	dd 44 24 18	 fld	 QWORD PTR tv1023[esp+32]

; 306  : }

  00206	5f		 pop	 edi
  00207	5e		 pop	 esi
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c3		 ret	 0
$LN76@pow:
  0020c	33 c9		 xor	 ecx, ecx
$LN81@pow:
  0020e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
$LN36@pow:

; 160  : 	    }
; 161  : 	}
; 162  : 
; 163  : 	ax   = fabs(x);
; 164  :     /* special value of x */
; 165  : 	if(lx==0) {

  00211	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00215	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  0021a	66 0f 28 d8	 movapd	 xmm3, xmm0
  0021e	66 0f 54 1d 00
	00 00 00	 andpd	 xmm3, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00226	f2 0f 11 5c 24
	18		 movsd	 QWORD PTR _ax$[esp+32], xmm3
  0022c	75 77		 jne	 SHORT $LN34@pow

; 166  : 	    if(ix==0x7ff00000||ix==0||ix==0x3ff00000){

  0022e	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  00234	74 0c		 je	 SHORT $LN33@pow
  00236	85 d2		 test	 edx, edx
  00238	74 08		 je	 SHORT $LN33@pow
  0023a	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  00240	75 63		 jne	 SHORT $LN34@pow
$LN33@pow:

; 167  : 		z = ax;			/*x is +-0,+-inf,+-1*/

  00242	f2 0f 11 5c 24
	08		 movsd	 QWORD PTR _z$[esp+32], xmm3

; 168  : 		if(hy<0) z = one/z;	/* z = (1/|x|) */

  00248	85 ff		 test	 edi, edi
  0024a	79 16		 jns	 SHORT $LN32@pow
  0024c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00254	f2 0f 5e c3	 divsd	 xmm0, xmm3
  00258	66 0f 28 d8	 movapd	 xmm3, xmm0
  0025c	f2 0f 11 5c 24
	08		 movsd	 QWORD PTR _z$[esp+32], xmm3
$LN32@pow:

; 169  : 		if(hx<0) {

  00262	85 c0		 test	 eax, eax
  00264	79 35		 jns	 SHORT $LN28@pow

; 170  : 		    if(((ix-0x3ff00000)|yisint)==0) {

  00266	8d 82 00 00 10
	c0		 lea	 eax, DWORD PTR [edx-1072693248]
  0026c	0b c1		 or	 eax, ecx
  0026e	75 18		 jne	 SHORT $LN30@pow

; 171  : 			z = (z-z)/(z-z); /* (-1)**non-int is NaN */

  00270	f2 0f 5c db	 subsd	 xmm3, xmm3
  00274	f2 0f 5e db	 divsd	 xmm3, xmm3

; 173  : 			z = -z;		/* (x<0)**odd = -(|x|**odd) */

  00278	f2 0f 11 5c 24
	08		 movsd	 QWORD PTR _z$[esp+32], xmm3

; 174  : 		}
; 175  : 		return z;

  0027e	dd 44 24 08	 fld	 QWORD PTR _z$[esp+32]

; 306  : }

  00282	5f		 pop	 edi
  00283	5e		 pop	 esi
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c3		 ret	 0
$LN30@pow:

; 172  : 		    } else if(yisint==1) 

  00288	83 f9 01	 cmp	 ecx, 1
  0028b	75 0e		 jne	 SHORT $LN28@pow

; 173  : 			z = -z;		/* (x<0)**odd = -(|x|**odd) */

  0028d	66 0f 57 1d 00
	00 00 00	 xorpd	 xmm3, QWORD PTR __xmm@80000000000000008000000000000000
  00295	f2 0f 11 5c 24
	08		 movsd	 QWORD PTR _z$[esp+32], xmm3
$LN28@pow:

; 174  : 		}
; 175  : 		return z;

  0029b	dd 44 24 08	 fld	 QWORD PTR _z$[esp+32]

; 306  : }

  0029f	5f		 pop	 edi
  002a0	5e		 pop	 esi
  002a1	8b e5		 mov	 esp, ebp
  002a3	5d		 pop	 ebp
  002a4	c3		 ret	 0
$LN34@pow:

; 176  : 	    }
; 177  : 	}
; 178  :     
; 179  : 	n = (hx>>31)+1;

  002a5	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  002a8	40		 inc	 eax
  002a9	89 44 24 08	 mov	 DWORD PTR _n$1$[esp+32], eax

; 180  : 
; 181  :     /* (x<0)**(non-int) is NaN */
; 182  : 	if((n|yisint)==0) return (x-x)/(x-x);

  002ad	0b c1		 or	 eax, ecx
  002af	75 18		 jne	 SHORT $LN27@pow
  002b1	f2 0f 5c c0	 subsd	 xmm0, xmm0
  002b5	f2 0f 5e c0	 divsd	 xmm0, xmm0
  002b9	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv1005[esp+32], xmm0
  002bf	dd 44 24 18	 fld	 QWORD PTR tv1005[esp+32]

; 306  : }

  002c3	5f		 pop	 edi
  002c4	5e		 pop	 esi
  002c5	8b e5		 mov	 esp, ebp
  002c7	5d		 pop	 ebp
  002c8	c3		 ret	 0
$LN27@pow:

; 183  : 
; 184  : 	s = one; /* s (sign of result -ve**odd) = -1 else = 1 */

  002c9	f2 0f 10 35 00
	00 00 00	 movsd	 xmm6, QWORD PTR __real@3ff0000000000000

; 185  : 	if((n|(yisint-1))==0) s = -one;/* (-ve)**(odd int) */

  002d1	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  002d4	0b 44 24 08	 or	 eax, DWORD PTR _n$1$[esp+32]
  002d8	66 0f 28 ce	 movapd	 xmm1, xmm6
  002dc	f2 0f 11 74 24
	10		 movsd	 QWORD PTR _s$1$[esp+32], xmm6
  002e2	75 0e		 jne	 SHORT $LN26@pow
  002e4	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff0000000000000
  002ec	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR _s$1$[esp+32], xmm1
$LN26@pow:

; 186  : 
; 187  :     /* |y| is huge */
; 188  : 	if(iy>0x41e00000) { /* if |y| > 2**31 */

  002f2	81 fe 00 00 e0
	41		 cmp	 esi, 1105199104		; 41e00000H
  002f8	0f 8e 8e 01 00
	00		 jle	 $LN25@pow

; 189  : 	    if(iy>0x43f00000){	/* if |y| > 2**64, must o/uflow */

  002fe	81 fe 00 00 f0
	43		 cmp	 esi, 1139802112		; 43f00000H
  00304	7e 6e		 jle	 SHORT $LN22@pow

; 190  : 		if(ix<=0x3fefffff) return (hy<0)? huge*huge:tiny*tiny;

  00306	81 fa ff ff ef
	3f		 cmp	 edx, 1072693247		; 3fefffffH
  0030c	7f 33		 jg	 SHORT $LN23@pow
  0030e	85 ff		 test	 edi, edi
  00310	79 1c		 jns	 SHORT $LN67@pow
  00312	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@7e37e43c8800759c
  0031a	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  0031e	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv192[esp+32], xmm0
  00324	dd 44 24 18	 fld	 QWORD PTR tv192[esp+32]

; 306  : }

  00328	5f		 pop	 edi
  00329	5e		 pop	 esi
  0032a	8b e5		 mov	 esp, ebp
  0032c	5d		 pop	 ebp
  0032d	c3		 ret	 0
$LN67@pow:
  0032e	0f 57 c0	 xorps	 xmm0, xmm0

; 190  : 		if(ix<=0x3fefffff) return (hy<0)? huge*huge:tiny*tiny;

  00331	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv192[esp+32], xmm0
  00337	dd 44 24 18	 fld	 QWORD PTR tv192[esp+32]

; 306  : }

  0033b	5f		 pop	 edi
  0033c	5e		 pop	 esi
  0033d	8b e5		 mov	 esp, ebp
  0033f	5d		 pop	 ebp
  00340	c3		 ret	 0
$LN23@pow:

; 191  : 		if(ix>=0x3ff00000) return (hy>0)? huge*huge:tiny*tiny;

  00341	85 ff		 test	 edi, edi
  00343	7e 1c		 jle	 SHORT $LN69@pow
  00345	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@7e37e43c8800759c
  0034d	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  00351	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv197[esp+32], xmm0
  00357	dd 44 24 18	 fld	 QWORD PTR tv197[esp+32]

; 306  : }

  0035b	5f		 pop	 edi
  0035c	5e		 pop	 esi
  0035d	8b e5		 mov	 esp, ebp
  0035f	5d		 pop	 ebp
  00360	c3		 ret	 0
$LN69@pow:
  00361	0f 57 c0	 xorps	 xmm0, xmm0

; 191  : 		if(ix>=0x3ff00000) return (hy>0)? huge*huge:tiny*tiny;

  00364	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv197[esp+32], xmm0
  0036a	dd 44 24 18	 fld	 QWORD PTR tv197[esp+32]

; 306  : }

  0036e	5f		 pop	 edi
  0036f	5e		 pop	 esi
  00370	8b e5		 mov	 esp, ebp
  00372	5d		 pop	 ebp
  00373	c3		 ret	 0
$LN22@pow:

; 192  : 	    }
; 193  : 	/* over/underflow if x is not close to one */
; 194  : 	    if(ix<0x3fefffff) return (hy<0)? s*huge*huge:s*tiny*tiny;

  00374	81 fa ff ff ef
	3f		 cmp	 edx, 1072693247		; 3fefffffH
  0037a	7d 44		 jge	 SHORT $LN21@pow
  0037c	85 ff		 test	 edi, edi
  0037e	79 20		 jns	 SHORT $LN71@pow
  00380	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@7e37e43c8800759c
  00388	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@7e37e43c8800759c
  00390	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv204[esp+32], xmm1
  00396	dd 44 24 18	 fld	 QWORD PTR tv204[esp+32]

; 306  : }

  0039a	5f		 pop	 edi
  0039b	5e		 pop	 esi
  0039c	8b e5		 mov	 esp, ebp
  0039e	5d		 pop	 ebp
  0039f	c3		 ret	 0
$LN71@pow:

; 192  : 	    }
; 193  : 	/* over/underflow if x is not close to one */
; 194  : 	    if(ix<0x3fefffff) return (hy<0)? s*huge*huge:s*tiny*tiny;

  003a0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@01a56e1fc2f8f359
  003a8	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@01a56e1fc2f8f359
  003b0	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv204[esp+32], xmm1
  003b6	dd 44 24 18	 fld	 QWORD PTR tv204[esp+32]

; 306  : }

  003ba	5f		 pop	 edi
  003bb	5e		 pop	 esi
  003bc	8b e5		 mov	 esp, ebp
  003be	5d		 pop	 ebp
  003bf	c3		 ret	 0
$LN21@pow:

; 195  : 	    if(ix>0x3ff00000) return (hy>0)? s*huge*huge:s*tiny*tiny;

  003c0	81 fa 00 00 f0
	3f		 cmp	 edx, 1072693248		; 3ff00000H
  003c6	7e 44		 jle	 SHORT $LN20@pow
  003c8	85 ff		 test	 edi, edi
  003ca	7e 20		 jle	 SHORT $LN73@pow
  003cc	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@7e37e43c8800759c
  003d4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@7e37e43c8800759c
  003dc	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv211[esp+32], xmm1
  003e2	dd 44 24 18	 fld	 QWORD PTR tv211[esp+32]

; 306  : }

  003e6	5f		 pop	 edi
  003e7	5e		 pop	 esi
  003e8	8b e5		 mov	 esp, ebp
  003ea	5d		 pop	 ebp
  003eb	c3		 ret	 0
$LN73@pow:

; 195  : 	    if(ix>0x3ff00000) return (hy>0)? s*huge*huge:s*tiny*tiny;

  003ec	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@01a56e1fc2f8f359
  003f4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@01a56e1fc2f8f359
  003fc	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv211[esp+32], xmm1
  00402	dd 44 24 18	 fld	 QWORD PTR tv211[esp+32]

; 306  : }

  00406	5f		 pop	 edi
  00407	5e		 pop	 esi
  00408	8b e5		 mov	 esp, ebp
  0040a	5d		 pop	 ebp
  0040b	c3		 ret	 0
$LN20@pow:

; 196  : 	/* now |1-x| is tiny <= 2**-20, suffice to compute 
; 197  : 	   log(x) by x-x^2/2+x^3/3-x^4/4 */
; 198  : 	    t = ax-one;		/* t has 20 trailing zeros */
; 199  : 	    w = (t*t)*(0.5-t*(0.3333333333333333333333-t*0.25));

  0040c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fd5555555555555
  00414	f2 0f 5c de	 subsd	 xmm3, xmm6
  00418	66 0f 28 c3	 movapd	 xmm0, xmm3

; 200  : 	    u = ivln2_h*t;	/* ivln2_h has 21 sig. bits */

  0041c	66 0f 28 d3	 movapd	 xmm2, xmm3
  00420	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000

; 201  : 	    v = t*ivln2_l-w*ivln2;

  00428	66 0f 28 eb	 movapd	 xmm5, xmm3
  0042c	f2 0f 59 2d 00
	00 00 00	 mulsd	 xmm5, QWORD PTR __real@3e54ae0bf85ddf44
  00434	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3ff7154760000000
  0043c	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00440	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00448	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  0044c	f2 0f 59 db	 mulsd	 xmm3, xmm3
  00450	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00454	f2 0f 59 c3	 mulsd	 xmm0, xmm3
  00458	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff71547652b82fe
  00460	f2 0f 5c e8	 subsd	 xmm5, xmm0

; 202  : 	    t1 = u+v;

  00464	66 0f 28 c5	 movapd	 xmm0, xmm5
  00468	f2 0f 58 c2	 addsd	 xmm0, xmm2
  0046c	f2 0f 11 44 24
	08		 movsd	 QWORD PTR _t1$[esp+32], xmm0

; 203  : 	    __LO(t1) = 0;

  00472	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _t1$[esp+32], 0

; 204  : 	    t2 = v-(t1-u);

  0047a	f2 0f 10 7c 24
	08		 movsd	 xmm7, QWORD PTR _t1$[esp+32]
  00480	0f 28 c7	 movaps	 xmm0, xmm7
  00483	f2 0f 5c c2	 subsd	 xmm0, xmm2

; 205  : 	} else {

  00487	e9 3f 02 00 00	 jmp	 $LN90@pow
$LN25@pow:

; 206  : 	    double ss,s2,s_h,s_l,t_h,t_l;
; 207  : 	    n = 0;

  0048c	33 c9		 xor	 ecx, ecx

; 208  : 	/* take care subnormal number */
; 209  : 	    if(ix<0x00100000)

  0048e	81 fa 00 00 10
	00		 cmp	 edx, 1048576		; 00100000H
  00494	7d 17		 jge	 SHORT $LN18@pow

; 210  : 		{ax *= two53; n -= 53; ix = __HI(ax); }

  00496	f2 0f 59 1d 00
	00 00 00	 mulsd	 xmm3, QWORD PTR __real@4340000000000000
  0049e	b9 cb ff ff ff	 mov	 ecx, -53		; ffffffcbH
  004a3	f2 0f 11 5c 24
	18		 movsd	 QWORD PTR _ax$[esp+32], xmm3
  004a9	8b 54 24 1c	 mov	 edx, DWORD PTR _ax$[esp+36]
$LN18@pow:

; 211  : 	    n  += ((ix)>>20)-0x3ff;

  004ad	8b f2		 mov	 esi, edx
  004af	81 c1 01 fc ff
	ff		 add	 ecx, -1023		; fffffc01H
  004b5	c1 fe 14	 sar	 esi, 20			; 00000014H

; 212  : 	    j  = ix&0x000fffff;

  004b8	81 e2 ff ff 0f
	00		 and	 edx, 1048575		; 000fffffH
  004be	03 f1		 add	 esi, ecx

; 213  : 	/* determine interval */
; 214  : 	    ix = j|0x3ff00000;		/* normalize ix */

  004c0	8b ca		 mov	 ecx, edx
  004c2	81 c9 00 00 f0
	3f		 or	 ecx, 1072693248		; 3ff00000H

; 215  : 	    if(j<=0x3988E) k=0;		/* |x|<sqrt(3/2) */

  004c8	81 fa 8e 98 03
	00		 cmp	 edx, 235662		; 0003988eH
  004ce	7f 04		 jg	 SHORT $LN17@pow
  004d0	33 d2		 xor	 edx, edx
  004d2	eb 18		 jmp	 SHORT $LN14@pow
$LN17@pow:

; 216  : 	    else if(j<0xBB67A) k=1;	/* |x|<sqrt(3)   */

  004d4	81 fa 7a b6 0b
	00		 cmp	 edx, 767610		; 000bb67aH
  004da	7d 07		 jge	 SHORT $LN15@pow
  004dc	ba 01 00 00 00	 mov	 edx, 1
  004e1	eb 09		 jmp	 SHORT $LN14@pow
$LN15@pow:

; 217  : 	    else {k=0;n+=1;ix -= 0x00100000;}

  004e3	33 d2		 xor	 edx, edx
  004e5	46		 inc	 esi
  004e6	81 e9 00 00 10
	00		 sub	 ecx, 1048576		; 00100000H
$LN14@pow:

; 218  : 	    __HI(ax) = ix;
; 219  : 
; 220  : 	/* compute ss = s_h+s_l = (x-1)/(x+1) or (x-1.5)/(x+1.5) */
; 221  : 	    u = ax-bp[k];		/* bp[0]=1.0, bp[1]=1.5 */

  004ec	f2 0f 10 1c d5
	00 00 00 00	 movsd	 xmm3, QWORD PTR _bp[edx*8]

; 222  : 	    v = one/(ax+bp[k]);
; 223  : 	    ss = u*v;
; 224  : 	    s_h = ss;
; 225  : 	    __LO(s_h) = 0;
; 226  : 	/* t_h=ax+bp[k] High */
; 227  : 	    t_h = zero;
; 228  : 	    __HI(t_h)=((ix>>1)|0x20000000)+0x00080000+(k<<18); 

  004f5	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  004f8	89 4c 24 1c	 mov	 DWORD PTR _ax$[esp+36], ecx
  004fc	0f 28 c3	 movaps	 xmm0, xmm3
  004ff	f2 0f 10 64 24
	18		 movsd	 xmm4, QWORD PTR _ax$[esp+32]
  00505	66 0f 28 d6	 movapd	 xmm2, xmm6
  00509	f2 0f 58 c4	 addsd	 xmm0, xmm4
  0050d	c1 e0 12	 shl	 eax, 18			; 00000012H
  00510	66 0f 28 fc	 movapd	 xmm7, xmm4
  00514	81 c9 00 00 00
	40		 or	 ecx, 1073741824		; 40000000H
  0051a	f2 0f 5c fb	 subsd	 xmm7, xmm3
  0051e	d1 f9		 sar	 ecx, 1
  00520	03 c8		 add	 ecx, eax
  00522	f2 0f 5e d0	 divsd	 xmm2, xmm0
  00526	0f 57 c0	 xorps	 xmm0, xmm0
  00529	f2 0f 11 44 24
	08		 movsd	 QWORD PTR _t_h$1[esp+32], xmm0
  0052f	66 0f 28 f2	 movapd	 xmm6, xmm2
  00533	f2 0f 59 f7	 mulsd	 xmm6, xmm7
  00537	89 4c 24 0c	 mov	 DWORD PTR _t_h$1[esp+36], ecx

; 229  : 	    t_l = ax - (t_h-bp[k]);
; 230  : 	    s_l = v*((u-s_h*t_h)-s_h*t_l);

  0053b	f2 0f 10 4c 24
	08		 movsd	 xmm1, QWORD PTR _t_h$1[esp+32]
  00541	0f 28 c1	 movaps	 xmm0, xmm1
  00544	f2 0f 5c cb	 subsd	 xmm1, xmm3
  00548	f2 0f 11 74 24
	18		 movsd	 QWORD PTR _s_h$2[esp+32], xmm6
  0054e	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _s_h$2[esp+32], 0
  00556	f2 0f 10 6c 24
	18		 movsd	 xmm5, QWORD PTR _s_h$2[esp+32]
  0055c	f2 0f 59 c5	 mulsd	 xmm0, xmm5
  00560	f2 0f 5c e1	 subsd	 xmm4, xmm1

; 231  : 	/* compute log(ax) */
; 232  : 	    s2 = ss*ss;
; 233  : 	    r = s2*s2*(L1+s2*(L2+s2*(L3+s2*(L4+s2*(L5+s2*L6)))));
; 234  : 	    r += s_l*(s_h+ss);
; 235  : 	    s2  = s_h*s_h;

  00564	0f 28 dd	 movaps	 xmm3, xmm5
  00567	f2 0f 59 dd	 mulsd	 xmm3, xmm5
  0056b	f2 0f 5c f8	 subsd	 xmm7, xmm0
  0056f	f2 0f 59 e5	 mulsd	 xmm4, xmm5
  00573	0f 28 c6	 movaps	 xmm0, xmm6
  00576	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  0057a	f2 0f 5c fc	 subsd	 xmm7, xmm4
  0057e	f2 0f 59 fa	 mulsd	 xmm7, xmm2
  00582	66 0f 28 d0	 movapd	 xmm2, xmm0
  00586	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fca7e284a454eef
  0058e	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@3fcd864a93c9db65
  00596	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  0059a	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@3fd17460a91d4101
  005a2	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  005a6	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@3fd55555518f264d
  005ae	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  005b2	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@3fdb6db6db6fabff
  005ba	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  005be	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  005c2	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@3fe3333333333303
  005ca	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  005ce	0f 28 c5	 movaps	 xmm0, xmm5
  005d1	f2 0f 58 c6	 addsd	 xmm0, xmm6
  005d5	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  005d9	f2 0f 58 d0	 addsd	 xmm2, xmm0

; 236  : 	    t_h = 3.0+s2+r;

  005dd	0f 28 c3	 movaps	 xmm0, xmm3
  005e0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  005e8	f2 0f 11 54 24
	18		 movsd	 QWORD PTR _t2$1$[esp+32], xmm2
  005ee	f2 0f 58 c2	 addsd	 xmm0, xmm2
  005f2	f2 0f 11 44 24
	08		 movsd	 QWORD PTR _t_h$1[esp+32], xmm0

; 237  : 	    __LO(t_h) = 0;

  005f8	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _t_h$1[esp+32], 0

; 238  : 	    t_l = r-((t_h-3.0)-s2);
; 239  : 	/* u+v = ss*(1+...) */
; 240  : 	    u = s_h*t_h;

  00600	f2 0f 10 54 24
	08		 movsd	 xmm2, QWORD PTR _t_h$1[esp+32]
  00606	0f 28 c2	 movaps	 xmm0, xmm2

; 241  : 	    v = s_l*t_h+t_l*ss;

  00609	f2 0f 59 fa	 mulsd	 xmm7, xmm2
  0060d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4008000000000000
  00615	0f 28 e2	 movaps	 xmm4, xmm2
  00618	f2 0f 59 e5	 mulsd	 xmm4, xmm5
  0061c	f2 0f 10 6c 24
	18		 movsd	 xmm5, QWORD PTR _t2$1$[esp+32]
  00622	f2 0f 5c c3	 subsd	 xmm0, xmm3
  00626	f2 0f 5c e8	 subsd	 xmm5, xmm0
  0062a	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  0062e	f2 0f 58 ef	 addsd	 xmm5, xmm7

; 242  : 	/* 2/(3log2)*(ss+...) */
; 243  : 	    p_h = u+v;

  00632	0f 28 c5	 movaps	 xmm0, xmm5
  00635	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00639	f2 0f 11 44 24
	18		 movsd	 QWORD PTR _p_h$[esp+32], xmm0

; 244  : 	    __LO(p_h) = 0;

  0063f	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _p_h$[esp+32], 0

; 245  : 	    p_l = v-(p_h-u);
; 246  : 	    z_h = cp_h*p_h;		/* cp_h+cp_l = 2/(3*log2) */

  00647	f2 0f 10 4c 24
	18		 movsd	 xmm1, QWORD PTR _p_h$[esp+32]
  0064d	0f 28 c1	 movaps	 xmm0, xmm1
  00650	0f 28 d9	 movaps	 xmm3, xmm1
  00653	f2 0f 59 1d 00
	00 00 00	 mulsd	 xmm3, QWORD PTR __real@3feec709e0000000
  0065b	f2 0f 5c c4	 subsd	 xmm0, xmm4

; 247  : 	    z_l = cp_l*p_h+p_l*cp+dp_l[k];

  0065f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3e3e2fe0145b01f5
  00667	f2 0f 5c e8	 subsd	 xmm5, xmm0
  0066b	f2 0f 59 2d 00
	00 00 00	 mulsd	 xmm5, QWORD PTR __real@3feec709dc3a03fd
  00673	f2 0f 5c e9	 subsd	 xmm5, xmm1
  00677	66 0f 6e d6	 movd	 xmm2, esi

; 248  : 	/* log2(ax) = (ss+..)*2/(3*log2) = n + dp_h + z_h + z_l */
; 249  : 	    t = (double)n;
; 250  : 	    t1 = (((z_h+z_l)+dp_h[k])+t);

  0067b	f2 0f 10 0c d5
	00 00 00 00	 movsd	 xmm1, QWORD PTR _dp_h[edx*8]
  00684	f3 0f e6 d2	 cvtdq2pd xmm2, xmm2
  00688	f2 0f 58 2c d5
	00 00 00 00	 addsd	 xmm5, QWORD PTR _dp_l[edx*8]
  00691	f2 0f 10 35 00
	00 00 00	 movsd	 xmm6, QWORD PTR __real@3ff0000000000000
  00699	0f 28 c5	 movaps	 xmm0, xmm5
  0069c	f2 0f 58 c3	 addsd	 xmm0, xmm3
  006a0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006a4	f2 0f 58 c2	 addsd	 xmm0, xmm2
  006a8	f2 0f 11 44 24
	08		 movsd	 QWORD PTR _t1$[esp+32], xmm0

; 251  : 	    __LO(t1) = 0;

  006ae	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _t1$[esp+32], 0

; 252  : 	    t2 = z_l-(((t1-t)-dp_h[k])-z_h);

  006b6	f2 0f 10 7c 24
	08		 movsd	 xmm7, QWORD PTR _t1$[esp+32]
  006bc	0f 28 c7	 movaps	 xmm0, xmm7
  006bf	f2 0f 5c c2	 subsd	 xmm0, xmm2
  006c3	f2 0f 5c c1	 subsd	 xmm0, xmm1
  006c7	f2 0f 5c c3	 subsd	 xmm0, xmm3
$LN90@pow:
  006cb	f2 0f 5c e8	 subsd	 xmm5, xmm0

; 253  : 	}
; 254  : 
; 255  :     /* split up y into y1+y2 and compute (y1+y2)*(t1+t2) */
; 256  : 	y1  = y;

  006cf	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _y$[ebp]
  006d4	f2 0f 11 44 24
	18		 movsd	 QWORD PTR _y1$[esp+32], xmm0

; 257  : 	__LO(y1) = 0;
; 258  : 	p_l = (y-y1)*t1+y*t2;

  006da	66 0f 28 e0	 movapd	 xmm4, xmm0
  006de	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _y1$[esp+32], 0
  006e6	f2 0f 10 5c 24
	18		 movsd	 xmm3, QWORD PTR _y1$[esp+32]
  006ec	f2 0f 5c e3	 subsd	 xmm4, xmm3

; 259  : 	p_h = y1*t1;

  006f0	f2 0f 59 df	 mulsd	 xmm3, xmm7
  006f4	f2 0f 59 e8	 mulsd	 xmm5, xmm0
  006f8	f2 0f 59 e7	 mulsd	 xmm4, xmm7
  006fc	f2 0f 58 e5	 addsd	 xmm4, xmm5

; 260  : 	z = p_l+p_h;

  00700	66 0f 28 cc	 movapd	 xmm1, xmm4
  00704	f2 0f 58 cb	 addsd	 xmm1, xmm3
  00708	f2 0f 11 4c 24
	08		 movsd	 QWORD PTR _z$[esp+32], xmm1

; 261  : 	j = __HI(z);
; 262  : 	i = __LO(z);
; 263  : 	if (j>=0x40900000) {				/* z >= 1024 */

  0070e	8b 7c 24 0c	 mov	 edi, DWORD PTR _z$[esp+36]
  00712	81 ff 00 00 90
	40		 cmp	 edi, 1083179008		; 40900000H
  00718	7c 72		 jl	 SHORT $LN13@pow

; 264  : 	    if(((j-0x40900000)|i)!=0)			/* if z > 1024 */

  0071a	8d 87 00 00 70
	bf		 lea	 eax, DWORD PTR [edi-1083179008]
  00720	0b 44 24 08	 or	 eax, DWORD PTR _z$[esp+32]
  00724	74 26		 je	 SHORT $LN12@pow

; 265  : 		return s*huge*huge;			/* overflow */

  00726	f2 0f 10 4c 24
	10		 movsd	 xmm1, QWORD PTR _s$1$[esp+32]
  0072c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@7e37e43c8800759c
  00734	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@7e37e43c8800759c
  0073c	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv939[esp+32], xmm1
  00742	dd 44 24 18	 fld	 QWORD PTR tv939[esp+32]

; 306  : }

  00746	5f		 pop	 edi
  00747	5e		 pop	 esi
  00748	8b e5		 mov	 esp, ebp
  0074a	5d		 pop	 ebp
  0074b	c3		 ret	 0
$LN12@pow:

; 266  : 	    else {
; 267  : 		if(p_l+ovt>z-p_h) return s*huge*huge;	/* overflow */

  0074c	66 0f 28 c4	 movapd	 xmm0, xmm4
  00750	f2 0f 5c cb	 subsd	 xmm1, xmm3
  00754	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3c971547652b82fe
  0075c	66 0f 2f c1	 comisd	 xmm0, xmm1
  00760	0f 86 96 00 00
	00		 jbe	 $LN5@pow
  00766	f2 0f 10 4c 24
	10		 movsd	 xmm1, QWORD PTR _s$1$[esp+32]
  0076c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@7e37e43c8800759c
  00774	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@7e37e43c8800759c
  0077c	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv933[esp+32], xmm1
  00782	dd 44 24 18	 fld	 QWORD PTR tv933[esp+32]

; 306  : }

  00786	5f		 pop	 edi
  00787	5e		 pop	 esi
  00788	8b e5		 mov	 esp, ebp
  0078a	5d		 pop	 ebp
  0078b	c3		 ret	 0
$LN13@pow:

; 268  : 	    }
; 269  : 	} else if((j&0x7fffffff)>=0x4090cc00 ) {	/* z <= -1075 */

  0078c	8b c7		 mov	 eax, edi
  0078e	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00793	3d 00 cc 90 40	 cmp	 eax, 1083231232		; 4090cc00H
  00798	7c 62		 jl	 SHORT $LN5@pow

; 270  : 	    if(((j-0xc090cc00)|i)!=0) 		/* z < -1075 */

  0079a	8d 87 00 34 6f
	3f		 lea	 eax, DWORD PTR [edi+1064252416]
  007a0	0b 44 24 08	 or	 eax, DWORD PTR _z$[esp+32]
  007a4	74 26		 je	 SHORT $LN7@pow

; 271  : 		return s*tiny*tiny;		/* underflow */

  007a6	f2 0f 10 4c 24
	10		 movsd	 xmm1, QWORD PTR _s$1$[esp+32]
  007ac	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@01a56e1fc2f8f359
  007b4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@01a56e1fc2f8f359
  007bc	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv929[esp+32], xmm1
  007c2	dd 44 24 18	 fld	 QWORD PTR tv929[esp+32]

; 306  : }

  007c6	5f		 pop	 edi
  007c7	5e		 pop	 esi
  007c8	8b e5		 mov	 esp, ebp
  007ca	5d		 pop	 ebp
  007cb	c3		 ret	 0
$LN7@pow:

; 272  : 	    else {
; 273  : 		if(p_l<=z-p_h) return s*tiny*tiny;	/* underflow */

  007cc	f2 0f 5c cb	 subsd	 xmm1, xmm3
  007d0	66 0f 2f cc	 comisd	 xmm1, xmm4
  007d4	72 26		 jb	 SHORT $LN5@pow
  007d6	f2 0f 10 4c 24
	10		 movsd	 xmm1, QWORD PTR _s$1$[esp+32]
  007dc	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@01a56e1fc2f8f359
  007e4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@01a56e1fc2f8f359
  007ec	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv924[esp+32], xmm1
  007f2	dd 44 24 18	 fld	 QWORD PTR tv924[esp+32]

; 306  : }

  007f6	5f		 pop	 edi
  007f7	5e		 pop	 esi
  007f8	8b e5		 mov	 esp, ebp
  007fa	5d		 pop	 ebp
  007fb	c3		 ret	 0
$LN5@pow:

; 274  : 	    }
; 275  : 	}
; 276  :     /*
; 277  :      * compute 2**(p_h+p_l)
; 278  :      */
; 279  : 	i = j&0x7fffffff;

  007fc	8b cf		 mov	 ecx, edi

; 280  : 	k = (i>>20)-0x3ff;
; 281  : 	n = 0;

  007fe	33 f6		 xor	 esi, esi
  00800	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 282  : 	if(i>0x3fe00000) {		/* if |z| > 0.5, set n = [z+0.5] */

  00806	81 f9 00 00 e0
	3f		 cmp	 ecx, 1071644672		; 3fe00000H
  0080c	7e 5e		 jle	 SHORT $LN4@pow

; 283  : 	    n = j+(0x00100000>>(k+1));

  0080e	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00811	be 00 00 10 00	 mov	 esi, 1048576		; 00100000H
  00816	81 e9 fe 03 00
	00		 sub	 ecx, 1022		; 000003feH

; 284  : 	    k = ((n&0x7fffffff)>>20)-0x3ff;	/* new k for n */
; 285  : 	    t = zero;
; 286  : 	    __HI(t) = (n&~(0x000fffff>>k));

  0081c	b8 ff ff 0f 00	 mov	 eax, 1048575		; 000fffffH
  00821	d3 fe		 sar	 esi, cl
  00823	0f 57 c0	 xorps	 xmm0, xmm0
  00826	03 f7		 add	 esi, edi
  00828	f2 0f 11 44 24
	08		 movsd	 QWORD PTR _t$[esp+32], xmm0
  0082e	8b d6		 mov	 edx, esi
  00830	c1 fa 14	 sar	 edx, 20			; 00000014H
  00833	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00839	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  0083f	8b ca		 mov	 ecx, edx
  00841	d3 f8		 sar	 eax, cl

; 287  : 	    n = ((n&0x000fffff)|0x00100000)>>(20-k);

  00843	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00848	f7 d0		 not	 eax
  0084a	2b ca		 sub	 ecx, edx
  0084c	23 c6		 and	 eax, esi
  0084e	81 e6 ff ff 0f
	00		 and	 esi, 1048575		; 000fffffH
  00854	81 ce 00 00 10
	00		 or	 esi, 1048576		; 00100000H
  0085a	89 44 24 0c	 mov	 DWORD PTR _t$[esp+36], eax
  0085e	d3 fe		 sar	 esi, cl

; 288  : 	    if(j<0) n = -n;

  00860	85 ff		 test	 edi, edi
  00862	79 02		 jns	 SHORT $LN3@pow
  00864	f7 de		 neg	 esi
$LN3@pow:

; 289  : 	    p_h -= t;

  00866	f2 0f 5c 5c 24
	08		 subsd	 xmm3, QWORD PTR _t$[esp+32]
$LN4@pow:

; 290  : 	} 
; 291  : 	t = p_l+p_h;

  0086c	66 0f 28 c4	 movapd	 xmm0, xmm4

; 292  : 	__LO(t) = 0;
; 293  : 	u = t*lg2_h;
; 294  : 	v = (p_l-(t-p_h))*lg2+t*lg2_l;
; 295  : 	z = u+v;
; 296  : 	w = v-(z-u);
; 297  : 	t  = z*z;
; 298  : 	t1  = z - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))));
; 299  : 	r  = (z*t1)/(t1-two)-(w+z*w);
; 300  : 	z  = one-(r-z);
; 301  : 	j  = __HI(z);
; 302  : 	j += (n<<20);

  00870	8b ce		 mov	 ecx, esi
  00872	f2 0f 58 c3	 addsd	 xmm0, xmm3
  00876	c1 e1 14	 shl	 ecx, 20			; 00000014H
  00879	f2 0f 11 44 24
	08		 movsd	 QWORD PTR _t$[esp+32], xmm0
  0087f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _t$[esp+32], 0
  00887	f2 0f 10 4c 24
	08		 movsd	 xmm1, QWORD PTR _t$[esp+32]
  0088d	0f 28 c1	 movaps	 xmm0, xmm1
  00890	66 0f 28 d1	 movapd	 xmm2, xmm1
  00894	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3e205c610ca86c39
  0089c	f2 0f 5c c3	 subsd	 xmm0, xmm3
  008a0	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe62e4300000000
  008a8	f2 0f 5c e0	 subsd	 xmm4, xmm0
  008ac	f2 0f 59 25 00
	00 00 00	 mulsd	 xmm4, QWORD PTR __real@3fe62e42fefa39ef
  008b4	f2 0f 5c e1	 subsd	 xmm4, xmm1
  008b8	66 0f 28 dc	 movapd	 xmm3, xmm4
  008bc	f2 0f 58 da	 addsd	 xmm3, xmm2
  008c0	0f 28 c3	 movaps	 xmm0, xmm3
  008c3	f2 0f 5c c2	 subsd	 xmm0, xmm2
  008c7	f2 0f 5c e0	 subsd	 xmm4, xmm0
  008cb	0f 28 c3	 movaps	 xmm0, xmm3
  008ce	f2 0f 59 c3	 mulsd	 xmm0, xmm3
  008d2	0f 28 c8	 movaps	 xmm1, xmm0
  008d5	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3e66376972bea4d0
  008dd	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3ebbbd41c5d26bf1
  008e5	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  008e9	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3f11566aaf25de2c
  008f1	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  008f5	f2 0f 5c 0d 00
	00 00 00	 subsd	 xmm1, QWORD PTR __real@3f66c16c16bebd93
  008fd	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00901	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3fc555555555553e
  00909	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0090d	0f 28 c3	 movaps	 xmm0, xmm3
  00910	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00914	0f 28 c8	 movaps	 xmm1, xmm0
  00917	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  0091f	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  00923	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00927	66 0f 28 c4	 movapd	 xmm0, xmm4
  0092b	f2 0f 59 c3	 mulsd	 xmm0, xmm3
  0092f	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00933	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00937	f2 0f 5c cb	 subsd	 xmm1, xmm3
  0093b	f2 0f 5c f1	 subsd	 xmm6, xmm1
  0093f	f2 0f 11 74 24
	08		 movsd	 QWORD PTR _z$[esp+32], xmm6
  00945	8b 44 24 0c	 mov	 eax, DWORD PTR _z$[esp+36]
  00949	03 c1		 add	 eax, ecx

; 303  : 	if((j>>20)<=0) z = scalbn(z,n);	/* subnormal output */

  0094b	a9 00 00 f0 ff	 test	 eax, -1048576		; fff00000H
  00950	7f 17		 jg	 SHORT $LN2@pow
  00952	56		 push	 esi
  00953	83 ec 08	 sub	 esp, 8
  00956	f2 0f 11 34 24	 movsd	 QWORD PTR [esp], xmm6
  0095b	e8 00 00 00 00	 call	 _scalbn
  00960	dd 5c 24 14	 fstp	 QWORD PTR _z$[esp+44]
  00964	83 c4 0c	 add	 esp, 12			; 0000000cH
  00967	eb 04		 jmp	 SHORT $LN1@pow
$LN2@pow:

; 304  : 	else __HI(z) += (n<<20);

  00969	89 44 24 0c	 mov	 DWORD PTR _z$[esp+36], eax
$LN1@pow:

; 305  : 	return s*z;

  0096d	f2 0f 10 4c 24
	10		 movsd	 xmm1, QWORD PTR _s$1$[esp+32]
  00973	f2 0f 59 4c 24
	08		 mulsd	 xmm1, QWORD PTR _z$[esp+32]
  00979	f2 0f 11 4c 24
	18		 movsd	 QWORD PTR tv890[esp+32], xmm1
  0097f	dd 44 24 18	 fld	 QWORD PTR tv890[esp+32]

; 306  : }

  00983	5f		 pop	 edi
  00984	5e		 pop	 esi
  00985	8b e5		 mov	 esp, ebp
  00987	5d		 pop	 ebp
  00988	c3		 ret	 0
$LN58@pow:

; 121  : 		return x+y;	

  00989	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  0098e	f2 0f 58 45 10	 addsd	 xmm0, QWORD PTR _y$[ebp]

; 306  : }

  00993	5f		 pop	 edi
  00994	5e		 pop	 esi
  00995	f2 0f 11 44 24
	10		 movsd	 QWORD PTR tv886[esp+24], xmm0
  0099b	dd 44 24 10	 fld	 QWORD PTR tv886[esp+24]
  0099f	8b e5		 mov	 esp, ebp
  009a1	5d		 pop	 ebp
  009a2	c3		 ret	 0
_pow	ENDP
_TEXT	ENDS
END
