; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\math\pow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_bp	DQ	03ff0000000000000r		; 1
	DQ	03ff8000000000000r		; 1.5
_dp_h	DQ	00000000000000000r		; 0
	DQ	03fe2b80340000000r		; 0.584962
_dp_l	DQ	00000000000000000r		; 0
	DQ	03e4cfdeb43cfd006r		; 1.35004e-008
_zero	DQ	00000000000000000r		; 0
_one	DQ	03ff0000000000000r		; 1
_two	DQ	04000000000000000r		; 2
_two53	DQ	04340000000000000r		; 9.0072e+015
_huge	DQ	07e37e43c8800759cr		; 1e+300
_tiny	DQ	001a56e1fc2f8f359r		; 1e-300
_L1	DQ	03fe3333333333303r		; 0.6
_L2	DQ	03fdb6db6db6fabffr		; 0.428571
_L3	DQ	03fd55555518f264dr		; 0.333333
_L4	DQ	03fd17460a91d4101r		; 0.272728
_L5	DQ	03fcd864a93c9db65r		; 0.230661
_L6	DQ	03fca7e284a454eefr		; 0.206975
_P1	DQ	03fc555555555553er		; 0.166667
_P2	DQ	0bf66c16c16bebd93r		; -0.00277778
_P3	DQ	03f11566aaf25de2cr		; 6.61376e-005
_P4	DQ	0bebbbd41c5d26bf1r		; -1.65339e-006
_P5	DQ	03e66376972bea4d0r		; 4.13814e-008
_lg2	DQ	03fe62e42fefa39efr		; 0.693147
_lg2_h	DQ	03fe62e4300000000r		; 0.693147
_lg2_l	DQ	0be205c610ca86c39r		; -1.90465e-009
_ovt	DQ	03c971547652b82fer		; 8.00857e-017
_cp	DQ	03feec709dc3a03fdr		; 0.961797
_cp_h	DQ	03feec709e0000000r		; 0.961797
_cp_l	DQ	0be3e2fe0145b01f5r		; -7.02846e-009
_ivln2	DQ	03ff71547652b82fer		; 1.4427
_ivln2_h DQ	03ff7154760000000r		; 1.4427
_ivln2_l DQ	03e54ae0bf85ddf44r		; 1.92596e-008
CONST	ENDS
_DATA	SEGMENT
_sccsid	DB	'@(#)e_pow.c 1.5 04/04/22 SMI', 00H
_DATA	ENDS
PUBLIC	__real@3f66c16c16bebd93
PUBLIC	__real@3ebbbd41c5d26bf1
PUBLIC	__real@3e205c610ca86c39
PUBLIC	__real@3e3e2fe0145b01f5
PUBLIC	__real@4008000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	_pow
EXTRN	_scalbn:PROC
EXTRN	__fltused:DWORD
EXTRN	__CIsqrt:PROC
;	COMDAT __real@3f66c16c16bebd93
; File c:\users\phail\documents\github\mollenos\clib\src\math\pow.c
CONST	SEGMENT
__real@3f66c16c16bebd93 DQ 03f66c16c16bebd93r	; 0.00277778
CONST	ENDS
;	COMDAT __real@3ebbbd41c5d26bf1
CONST	SEGMENT
__real@3ebbbd41c5d26bf1 DQ 03ebbbd41c5d26bf1r	; 1.65339e-006
CONST	ENDS
;	COMDAT __real@3e205c610ca86c39
CONST	SEGMENT
__real@3e205c610ca86c39 DQ 03e205c610ca86c39r	; 1.90465e-009
CONST	ENDS
;	COMDAT __real@3e3e2fe0145b01f5
CONST	SEGMENT
__real@3e3e2fe0145b01f5 DQ 03e3e2fe0145b01f5r	; 7.02846e-009
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _pow
_TEXT	SEGMENT
_p_h$ = -24						; size = 8
_s_h$1736 = -24						; size = 8
_s$ = -16						; size = 8
_t_h$1738 = -8						; size = 8
_ax$ = -8						; size = 8
tv871 = -4						; size = 4
_t1$ = 8						; size = 8
_x$ = 8							; size = 8
_n$ = 12						; size = 4
_y1$ = 16						; size = 8
_t$ = 16						; size = 8
_z$ = 16						; size = 8
_y$ = 16						; size = 8
_pow	PROC						; COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 104  : 	double z,ax,z_h,z_l,p_h,p_l;
; 105  : 	double y1,t1,t2,r,s,t,u,v,w;
; 106  : 	int i0,i1,i,j,k,yisint,n;
; 107  : 	int hx,hy,ix,iy;
; 108  : 	unsigned lx,ly;
; 109  : 
; 110  : 	i0 = ((*(int*)&one)>>29)^1; i1=1-i0;
; 111  : 	hx = __HI(x); lx = __LO(x);
; 112  : 	hy = __HI(y); ly = __LO(y);
; 113  : 	ix = hx&0x7fffffff;  iy = hy&0x7fffffff;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	53		 push	 ebx

; 114  : 
; 115  :     /* y==zero: x**0 = 1 */
; 116  : 	if((iy|ly)==0) return one; 	

  0000a	8b 5d 10	 mov	 ebx, DWORD PTR _y$[ebp]
  0000d	56		 push	 esi
  0000e	8b 75 14	 mov	 esi, DWORD PTR _y$[ebp+4]
  00011	81 e6 ff ff ff
	7f		 and	 esi, 2147483647		; 7fffffffH
  00017	8b c1		 mov	 eax, ecx
  00019	8b d6		 mov	 edx, esi
  0001b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00020	0b d3		 or	 edx, ebx
  00022	75 08		 jne	 SHORT $LN60@pow
  00024	d9 e8		 fld1
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN60@pow:

; 117  : 
; 118  :     /* +-NaN return x+y */
; 119  : 	if(ix > 0x7ff00000 || ((ix==0x7ff00000)&&(lx!=0)) ||
; 120  : 	   iy > 0x7ff00000 || ((iy==0x7ff00000)&&(ly!=0))) 

  0002c	3d 00 00 f0 7f	 cmp	 eax, 2146435072		; 7ff00000H
  00031	0f 8f 62 06 00
	00		 jg	 $LN58@pow
  00037	75 0a		 jne	 SHORT $LN57@pow
  00039	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0003d	0f 85 56 06 00
	00		 jne	 $LN58@pow
$LN57@pow:
  00043	81 fe 00 00 f0
	7f		 cmp	 esi, 2146435072		; 7ff00000H
  00049	0f 8f 4a 06 00
	00		 jg	 $LN58@pow
  0004f	75 08		 jne	 SHORT $LN59@pow
  00051	85 db		 test	 ebx, ebx
  00053	0f 85 40 06 00
	00		 jne	 $LN58@pow
$LN59@pow:
  00059	57		 push	 edi

; 122  : 
; 123  :     /* determine if y is an odd int when x < 0
; 124  :      * yisint = 0	... y is not an integer
; 125  :      * yisint = 1	... y is an odd int
; 126  :      * yisint = 2	... y is an even int
; 127  :      */
; 128  : 	yisint  = 0;

  0005a	33 ff		 xor	 edi, edi

; 129  : 	if(hx<0) {	

  0005c	85 c9		 test	 ecx, ecx
  0005e	79 0d		 jns	 SHORT $LN48@pow

; 130  : 	    if(iy>=0x43400000) yisint = 2; /* even integer y */

  00060	81 fe 00 00 40
	43		 cmp	 esi, 1128267776		; 43400000H
  00066	7c 33		 jl	 SHORT $LN55@pow
  00068	bf 02 00 00 00	 mov	 edi, 2
$LN48@pow:

; 139  : 		}
; 140  : 	    }		
; 141  : 	} 
; 142  : 
; 143  :     /* special value of y */
; 144  : 	if(ly==0) { 	

  0006d	85 db		 test	 ebx, ebx
  0006f	0f 85 17 01 00
	00		 jne	 $LN78@pow
$LN79@pow:
  00075	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp+4]

; 145  : 	    if (iy==0x7ff00000) {	/* y is +-inf */

  00078	81 fe 00 00 f0
	7f		 cmp	 esi, 2146435072		; 7ff00000H
  0007e	0f 85 b7 00 00
	00		 jne	 $LN42@pow

; 146  : 	        if(((ix-0x3ff00000)|lx)==0)

  00084	8d 88 00 00 10
	c0		 lea	 ecx, DWORD PTR [eax-1072693248]
  0008a	0b 4d 08	 or	 ecx, DWORD PTR _x$[ebp]
  0008d	75 7f		 jne	 SHORT $LN45@pow

; 147  : 		    return  y - y;	/* inf**+-1 is NaN */

  0008f	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	dc e0		 fsubr	 ST(0), ST(0)
  00096	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN55@pow:

; 131  : 	    else if(iy>=0x3ff00000) {

  0009b	81 fe 00 00 f0
	3f		 cmp	 esi, 1072693248		; 3ff00000H
  000a1	7c ca		 jl	 SHORT $LN48@pow

; 132  : 		k = (iy>>20)-0x3ff;	   /* exponent */

  000a3	8b d6		 mov	 edx, esi
  000a5	c1 fa 14	 sar	 edx, 20			; 00000014H
  000a8	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH

; 133  : 		if(k>20) {

  000ae	83 fa 14	 cmp	 edx, 20			; 00000014H
  000b1	7e 29		 jle	 SHORT $LN52@pow

; 134  : 		    j = ly>>(52-k);

  000b3	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  000b8	2b ca		 sub	 ecx, edx
  000ba	8b d3		 mov	 edx, ebx
  000bc	d3 ea		 shr	 edx, cl

; 135  : 		    if((j<<(52-k))== (int)ly) yisint = 2-(j&1);

  000be	8b da		 mov	 ebx, edx
  000c0	d3 e3		 shl	 ebx, cl

; 136  : 		} else if(ly==0) {

  000c2	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  000c5	89 5d fc	 mov	 DWORD PTR tv871[ebp], ebx
  000c8	8b 5d 10	 mov	 ebx, DWORD PTR _y$[ebp]
  000cb	39 5d fc	 cmp	 DWORD PTR tv871[ebp], ebx
  000ce	75 9d		 jne	 SHORT $LN48@pow

; 135  : 		    if((j<<(52-k))== (int)ly) yisint = 2-(j&1);

  000d0	83 e2 01	 and	 edx, 1
  000d3	bf 02 00 00 00	 mov	 edi, 2
  000d8	2b fa		 sub	 edi, edx

; 136  : 		} else if(ly==0) {

  000da	eb 91		 jmp	 SHORT $LN48@pow
$LN52@pow:
  000dc	39 7d 10	 cmp	 DWORD PTR _y$[ebp], edi
  000df	0f 85 a7 00 00
	00		 jne	 $LN78@pow

; 137  : 		    j = iy>>(20-k);

  000e5	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000ea	2b ca		 sub	 ecx, edx
  000ec	8b d6		 mov	 edx, esi
  000ee	d3 fa		 sar	 edx, cl

; 138  : 		    if((j<<(20-k))==iy) yisint = 2-(j&1);

  000f0	8b da		 mov	 ebx, edx
  000f2	d3 e3		 shl	 ebx, cl

; 139  : 		}
; 140  : 	    }		
; 141  : 	} 
; 142  : 
; 143  :     /* special value of y */
; 144  : 	if(ly==0) { 	

  000f4	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp+4]
  000f7	3b de		 cmp	 ebx, esi
  000f9	0f 85 76 ff ff
	ff		 jne	 $LN79@pow

; 138  : 		    if((j<<(20-k))==iy) yisint = 2-(j&1);

  000ff	83 e2 01	 and	 edx, 1
  00102	bf 02 00 00 00	 mov	 edi, 2
  00107	2b fa		 sub	 edi, edx

; 139  : 		}
; 140  : 	    }		
; 141  : 	} 
; 142  : 
; 143  :     /* special value of y */
; 144  : 	if(ly==0) { 	

  00109	e9 67 ff ff ff	 jmp	 $LN79@pow
$LN45@pow:

; 148  : 	        else if (ix >= 0x3ff00000)/* (|x|>1)**+-inf = inf,0 */

  0010e	3d 00 00 f0 3f	 cmp	 eax, 1072693248		; 3ff00000H
  00113	7c 12		 jl	 SHORT $LN43@pow

; 149  : 		    return (hy>=0)? y: zero;

  00115	85 d2		 test	 edx, edx
  00117	0f 88 3f 01 00
	00		 js	 $LN69@pow
  0011d	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
$LN43@pow:

; 150  : 	        else			/* (|x|<1)**-,+inf = inf,0 */
; 151  : 		    return (hy<0)?-y: zero;

  00127	85 d2		 test	 edx, edx
  00129	0f 89 2d 01 00
	00		 jns	 $LN69@pow
  0012f	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	d9 e0		 fchs
  00136	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
$LN42@pow:

; 152  : 	    } 
; 153  : 	    if(iy==0x3ff00000) {	/* y is  +-1 */

  0013b	81 fe 00 00 f0
	3f		 cmp	 esi, 1072693248		; 3ff00000H
  00141	75 1a		 jne	 SHORT $LN39@pow

; 154  : 		if(hy<0) return one/x; else return x;

  00143	85 d2		 test	 edx, edx
  00145	79 0c		 jns	 SHORT $LN40@pow
  00147	d9 e8		 fld1
  00149	5f		 pop	 edi
  0014a	dc 75 08	 fdiv	 QWORD PTR _x$[ebp]
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
$LN40@pow:

; 154  : 		if(hy<0) return one/x; else return x;

  00153	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
$LN39@pow:

; 155  : 	    }
; 156  : 	    if(hy==0x40000000) return x*x; /* y is  2 */

  0015d	81 fa 00 00 00
	40		 cmp	 edx, 1073741824		; 40000000H
  00163	75 0c		 jne	 SHORT $LN38@pow
  00165	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	dc c8		 fmul	 ST(0), ST(0)
  0016c	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
$LN38@pow:

; 157  : 	    if(hy==0x3fe00000) {	/* y is  0.5 */

  00171	81 fa 00 00 e0
	3f		 cmp	 edx, 1071644672		; 3fe00000H
  00177	75 13		 jne	 SHORT $LN78@pow

; 158  : 		if(hx>=0)	/* x >= +0 */

  00179	85 c9		 test	 ecx, ecx
  0017b	78 0f		 js	 SHORT $LN78@pow

; 159  : 		return sqrt(x);	

  0017d	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00180	e8 00 00 00 00	 call	 __CIsqrt
  00185	5f		 pop	 edi
  00186	5e		 pop	 esi
  00187	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
$LN78@pow:

; 160  : 	    }
; 161  : 	}
; 162  : 
; 163  : 	ax   = fabs(x);

  0018c	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 164  :     /* special value of x */
; 165  : 	if(lx==0) {

  0018f	33 db		 xor	 ebx, ebx
  00191	d9 c0		 fld	 ST(0)
  00193	d9 e1		 fabs
  00195	dd 55 f8	 fst	 QWORD PTR _ax$[ebp]
  00198	39 5d 08	 cmp	 DWORD PTR _x$[ebp], ebx
  0019b	75 48		 jne	 SHORT $LN80@pow

; 166  : 	    if(ix==0x7ff00000||ix==0||ix==0x3ff00000){

  0019d	3d 00 00 f0 7f	 cmp	 eax, 2146435072		; 7ff00000H
  001a2	74 0b		 je	 SHORT $LN95@pow
  001a4	3b c3		 cmp	 eax, ebx
  001a6	74 07		 je	 SHORT $LN95@pow
  001a8	3d 00 00 f0 3f	 cmp	 eax, 1072693248		; 3ff00000H
  001ad	75 36		 jne	 SHORT $LN80@pow
$LN95@pow:
  001af	dd d9		 fstp	 ST(1)

; 167  : 		z = ax;			/*x is +-0,+-inf,+-1*/

  001b1	d9 c0		 fld	 ST(0)

; 168  : 		if(hy<0) z = one/z;	/* z = (1/|x|) */

  001b3	39 5d 14	 cmp	 DWORD PTR _y$[ebp+4], ebx
  001b6	7d 08		 jge	 SHORT $LN97@pow
  001b8	dd d8		 fstp	 ST(0)
  001ba	d9 e8		 fld1
  001bc	de f1		 fdivrp	 ST(1), ST(0)
  001be	eb 02		 jmp	 SHORT $LN32@pow
$LN97@pow:
  001c0	dd d9		 fstp	 ST(1)
$LN32@pow:

; 169  : 		if(hx<0) {

  001c2	3b cb		 cmp	 ecx, ebx
  001c4	0f 8d 27 03 00
	00		 jge	 $LN83@pow

; 170  : 		    if(((ix-0x3ff00000)|yisint)==0) {

  001ca	05 00 00 10 c0	 add	 eax, -1072693248	; c0100000H
  001cf	0b c7		 or	 eax, edi

; 171  : 			z = (z-z)/(z-z); /* (-1)**non-int is NaN */

  001d1	74 1e		 je	 SHORT $LN183@pow

; 172  : 		    } else if(yisint==1) 

  001d3	83 ff 01	 cmp	 edi, 1
  001d6	0f 85 15 03 00
	00		 jne	 $LN83@pow

; 173  : 			z = -z;		/* (x<0)**odd = -(|x|**odd) */

  001dc	5f		 pop	 edi
  001dd	d9 e0		 fchs
  001df	5e		 pop	 esi
  001e0	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c3		 ret	 0
$LN80@pow:

; 174  : 		}
; 175  : 		return z;
; 176  : 	    }
; 177  : 	}
; 178  :     
; 179  : 	n = (hx>>31)+1;

  001e5	c1 f9 1f	 sar	 ecx, 31			; 0000001fH
  001e8	41		 inc	 ecx

; 180  : 
; 181  :     /* (x<0)**(non-int) is NaN */
; 182  : 	if((n|yisint)==0) return (x-x)/(x-x);

  001e9	8b d1		 mov	 edx, ecx
  001eb	0b d7		 or	 edx, edi
  001ed	75 0d		 jne	 SHORT $LN108@pow
  001ef	dd d8		 fstp	 ST(0)
$LN183@pow:
  001f1	5f		 pop	 edi
  001f2	dc e0		 fsubr	 ST(0), ST(0)
  001f4	5e		 pop	 esi
  001f5	5b		 pop	 ebx
  001f6	dc f0		 fdivr	 ST(0), ST(0)

; 305  : 	return s*z;
; 306  : }

  001f8	8b e5		 mov	 esp, ebp
  001fa	5d		 pop	 ebp
  001fb	c3		 ret	 0
$LN108@pow:

; 180  : 
; 181  :     /* (x<0)**(non-int) is NaN */
; 182  : 	if((n|yisint)==0) return (x-x)/(x-x);

  001fc	dd d9		 fstp	 ST(1)

; 183  : 
; 184  : 	s = one; /* s (sign of result -ve**odd) = -1 else = 1 */
; 185  : 	if((n|(yisint-1))==0) s = -one;/* (-ve)**(odd int) */

  001fe	4f		 dec	 edi
  001ff	0b f9		 or	 edi, ecx
  00201	d9 e8		 fld1
  00203	d9 c0		 fld	 ST(0)
  00205	dd 55 f0	 fst	 QWORD PTR _s$[ebp]
  00208	75 0b		 jne	 SHORT $LN26@pow
  0020a	dd d8		 fstp	 ST(0)
  0020c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@bff0000000000000
  00212	dd 55 f0	 fst	 QWORD PTR _s$[ebp]
$LN26@pow:

; 186  : 
; 187  :     /* |y| is huge */
; 188  : 	if(iy>0x41e00000) { /* if |y| > 2**31 */

  00215	81 fe 00 00 e0
	41		 cmp	 esi, 1105199104		; 41e00000H
  0021b	0f 8e e2 00 00
	00		 jle	 $LN114@pow

; 189  : 	    if(iy>0x43f00000){	/* if |y| > 2**64, must o/uflow */

  00221	81 fe 00 00 f0
	43		 cmp	 esi, 1139802112		; 43f00000H
  00227	7e 3c		 jle	 SHORT $LN82@pow

; 190  : 		if(ix<=0x3fefffff) return (hy<0)? huge*huge:tiny*tiny;

  00229	3d ff ff ef 3f	 cmp	 eax, 1072693247		; 3fefffffH
  0022e	7f 1a		 jg	 SHORT $LN23@pow
  00230	dd da		 fstp	 ST(2)
  00232	dd d8		 fstp	 ST(0)
  00234	dd d8		 fstp	 ST(0)
  00236	39 5d 14	 cmp	 DWORD PTR _y$[ebp+4], ebx
  00239	7d 21		 jge	 SHORT $LN69@pow
$LN184@pow:
  0023b	dd 05 00 00 00
	00		 fld	 QWORD PTR _huge
  00241	5f		 pop	 edi
  00242	5e		 pop	 esi
  00243	dc c8		 fmul	 ST(0), ST(0)
  00245	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
$LN23@pow:

; 191  : 		if(ix>=0x3ff00000) return (hy>0)? huge*huge:tiny*tiny;

  0024a	3d 00 00 f0 3f	 cmp	 eax, 1072693248		; 3ff00000H
  0024f	7c 14		 jl	 SHORT $LN82@pow
  00251	dd da		 fstp	 ST(2)
  00253	dd d8		 fstp	 ST(0)
  00255	dd d8		 fstp	 ST(0)
  00257	39 5d 14	 cmp	 DWORD PTR _y$[ebp+4], ebx
  0025a	7f df		 jg	 SHORT $LN184@pow
$LN69@pow:
  0025c	d9 ee		 fldz
  0025e	5f		 pop	 edi
  0025f	5e		 pop	 esi
  00260	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
$LN82@pow:

; 192  : 	    }
; 193  : 	/* over/underflow if x is not close to one */
; 194  : 	    if(ix<0x3fefffff) return (hy<0)? s*huge*huge:s*tiny*tiny;

  00265	3d ff ff ef 3f	 cmp	 eax, 1072693247		; 3fefffffH
  0026a	7d 1e		 jge	 SHORT $LN21@pow
  0026c	dd da		 fstp	 ST(2)
  0026e	dd d8		 fstp	 ST(0)
  00270	39 5d 14	 cmp	 DWORD PTR _y$[ebp+4], ebx
  00273	0f 8d dd 02 00
	00		 jge	 $LN73@pow
  00279	dd 05 00 00 00
	00		 fld	 QWORD PTR _huge
  0027f	5f		 pop	 edi

; 265  : 		return s*huge*huge;			/* overflow */

  00280	dc c9		 fmul	 ST(1), ST(0)
  00282	5e		 pop	 esi
  00283	5b		 pop	 ebx

; 272  : 	    else {
; 273  : 		if(p_l<=z-p_h) return s*tiny*tiny;	/* underflow */

  00284	de c9		 fmulp	 ST(1), ST(0)

; 305  : 	return s*z;
; 306  : }

  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c3		 ret	 0
$LN21@pow:

; 195  : 	    if(ix>0x3ff00000) return (hy>0)? s*huge*huge:s*tiny*tiny;

  0028a	3d 00 00 f0 3f	 cmp	 eax, 1072693248		; 3ff00000H
  0028f	7e 1e		 jle	 SHORT $LN20@pow
  00291	dd da		 fstp	 ST(2)
  00293	dd d8		 fstp	 ST(0)
  00295	39 5d 14	 cmp	 DWORD PTR _y$[ebp+4], ebx
  00298	0f 8e b8 02 00
	00		 jle	 $LN73@pow

; 265  : 		return s*huge*huge;			/* overflow */

  0029e	dd 05 00 00 00
	00		 fld	 QWORD PTR _huge
  002a4	5f		 pop	 edi
  002a5	dc c9		 fmul	 ST(1), ST(0)
  002a7	5e		 pop	 esi
  002a8	5b		 pop	 ebx

; 272  : 	    else {
; 273  : 		if(p_l<=z-p_h) return s*tiny*tiny;	/* underflow */

  002a9	de c9		 fmulp	 ST(1), ST(0)

; 305  : 	return s*z;
; 306  : }

  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c3		 ret	 0
$LN20@pow:

; 196  : 	/* now |1-x| is tiny <= 2**-20, suffice to compute 
; 197  : 	   log(x) by x-x^2/2+x^3/3-x^4/4 */
; 198  : 	    t = ax-one;		/* t has 20 trailing zeros */

  002af	d9 ca		 fxch	 ST(2)
  002b1	d8 e1		 fsub	 ST(0), ST(1)

; 199  : 	    w = (t*t)*(0.5-t*(0.3333333333333333333333-t*0.25));
; 200  : 	    u = ivln2_h*t;	/* ivln2_h has 21 sig. bits */

  002b3	dd 05 00 00 00
	00		 fld	 QWORD PTR _ivln2_h
  002b9	d8 c9		 fmul	 ST(0), ST(1)

; 201  : 	    v = t*ivln2_l-w*ivln2;

  002bb	d9 c1		 fld	 ST(1)
  002bd	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ivln2_l
  002c3	d9 c2		 fld	 ST(2)
  002c5	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fd0000000000000
  002cb	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fd5555555555555
  002d1	d8 cb		 fmul	 ST(0), ST(3)
  002d3	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe0000000000000
  002d9	d9 c3		 fld	 ST(3)
  002db	de cc		 fmulp	 ST(4), ST(0)
  002dd	de cb		 fmulp	 ST(3), ST(0)
  002df	d9 ca		 fxch	 ST(2)
  002e1	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ivln2
  002e7	de ea		 fsubp	 ST(2), ST(0)

; 202  : 	    t1 = u+v;

  002e9	d9 c1		 fld	 ST(1)
  002eb	d8 c1		 fadd	 ST(0), ST(1)
  002ed	dd 5d 08	 fstp	 QWORD PTR _t1$[ebp]

; 203  : 	    __LO(t1) = 0;

  002f0	89 5d 08	 mov	 DWORD PTR _t1$[ebp], ebx

; 204  : 	    t2 = v-(t1-u);

  002f3	dd 45 08	 fld	 QWORD PTR _t1$[ebp]
  002f6	d9 c0		 fld	 ST(0)
  002f8	de e2		 fsubrp	 ST(2), ST(0)
  002fa	d9 ca		 fxch	 ST(2)
  002fc	de e1		 fsubrp	 ST(1), ST(0)

; 205  : 	} else {

  002fe	e9 9f 01 00 00	 jmp	 $LN19@pow
$LN114@pow:

; 206  : 	    double ss,s2,s_h,s_l,t_h,t_l;
; 207  : 	    n = 0;

  00303	33 c9		 xor	 ecx, ecx
  00305	dd d8		 fstp	 ST(0)

; 208  : 	/* take care subnormal number */
; 209  : 	    if(ix<0x00100000)

  00307	3d 00 00 10 00	 cmp	 eax, 1048576		; 00100000H
  0030c	7d 15		 jge	 SHORT $LN169@pow

; 210  : 		{ax *= two53; n -= 53; ix = __HI(ax); }

  0030e	d9 c9		 fxch	 ST(1)
  00310	b9 cb ff ff ff	 mov	 ecx, -53		; ffffffcbH
  00315	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _two53
  0031b	dd 5d f8	 fstp	 QWORD PTR _ax$[ebp]
  0031e	8b 45 fc	 mov	 eax, DWORD PTR _ax$[ebp+4]
  00321	eb 02		 jmp	 SHORT $LN18@pow
$LN169@pow:
  00323	dd d9		 fstp	 ST(1)
$LN18@pow:

; 211  : 	    n  += ((ix)>>20)-0x3ff;

  00325	8b d0		 mov	 edx, eax
  00327	c1 fa 14	 sar	 edx, 20			; 00000014H
  0032a	8d 8c 11 01 fc
	ff ff		 lea	 ecx, DWORD PTR [ecx+edx-1023]

; 212  : 	    j  = ix&0x000fffff;

  00331	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  00336	89 4d 0c	 mov	 DWORD PTR _n$[ebp], ecx
  00339	8b c8		 mov	 ecx, eax

; 213  : 	/* determine interval */
; 214  : 	    ix = j|0x3ff00000;		/* normalize ix */

  0033b	0d 00 00 f0 3f	 or	 eax, 1072693248		; 3ff00000H

; 215  : 	    if(j<=0x3988E) k=0;		/* |x|<sqrt(3/2) */

  00340	81 f9 8e 98 03
	00		 cmp	 ecx, 235662		; 0003988eH
  00346	7f 04		 jg	 SHORT $LN17@pow
  00348	33 c9		 xor	 ecx, ecx
  0034a	eb 19		 jmp	 SHORT $LN14@pow
$LN17@pow:

; 216  : 	    else if(j<0xBB67A) k=1;	/* |x|<sqrt(3)   */

  0034c	81 f9 7a b6 0b
	00		 cmp	 ecx, 767610		; 000bb67aH
  00352	7d 07		 jge	 SHORT $LN15@pow
  00354	b9 01 00 00 00	 mov	 ecx, 1
  00359	eb 0a		 jmp	 SHORT $LN14@pow
$LN15@pow:

; 217  : 	    else {k=0;n+=1;ix -= 0x00100000;}

  0035b	ff 45 0c	 inc	 DWORD PTR _n$[ebp]
  0035e	33 c9		 xor	 ecx, ecx
  00360	2d 00 00 10 00	 sub	 eax, 1048576		; 00100000H
$LN14@pow:

; 218  : 	    __HI(ax) = ix;

  00365	89 45 fc	 mov	 DWORD PTR _ax$[ebp+4], eax

; 219  : 
; 220  : 	/* compute ss = s_h+s_l = (x-1)/(x+1) or (x-1.5)/(x+1.5) */
; 221  : 	    u = ax-bp[k];		/* bp[0]=1.0, bp[1]=1.5 */

  00368	dd 45 f8	 fld	 QWORD PTR _ax$[ebp]

; 222  : 	    v = one/(ax+bp[k]);
; 223  : 	    ss = u*v;
; 224  : 	    s_h = ss;
; 225  : 	    __LO(s_h) = 0;
; 226  : 	/* t_h=ax+bp[k] High */
; 227  : 	    t_h = zero;
; 228  : 	    __HI(t_h)=((ix>>1)|0x20000000)+0x00080000+(k<<18); 

  0036b	0d 00 00 00 40	 or	 eax, 1073741824		; 40000000H
  00370	d9 c0		 fld	 ST(0)
  00372	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00375	dc 24 cd 00 00
	00 00		 fsub	 QWORD PTR _bp[ecx*8]
  0037c	d1 f8		 sar	 eax, 1
  0037e	dd 04 cd 00 00
	00 00		 fld	 QWORD PTR _bp[ecx*8]
  00385	c1 e2 12	 shl	 edx, 18			; 00000012H
  00388	d8 c2		 fadd	 ST(0), ST(2)
  0038a	03 c2		 add	 eax, edx
  0038c	de fb		 fdivp	 ST(3), ST(0)
  0038e	d9 c2		 fld	 ST(2)
  00390	d8 c9		 fmul	 ST(0), ST(1)
  00392	dd 55 e8	 fst	 QWORD PTR _s_h$1736[ebp]
  00395	89 5d e8	 mov	 DWORD PTR _s_h$1736[ebp], ebx
  00398	d9 ee		 fldz
  0039a	dd 5d f8	 fstp	 QWORD PTR _t_h$1738[ebp]
  0039d	89 45 fc	 mov	 DWORD PTR _t_h$1738[ebp+4], eax

; 229  : 	    t_l = ax - (t_h-bp[k]);
; 230  : 	    s_l = v*((u-s_h*t_h)-s_h*t_l);

  003a0	dd 45 f8	 fld	 QWORD PTR _t_h$1738[ebp]
  003a3	d9 c0		 fld	 ST(0)
  003a5	dd 45 e8	 fld	 QWORD PTR _s_h$1736[ebp]
  003a8	dc c9		 fmul	 ST(1), ST(0)
  003aa	d9 cc		 fxch	 ST(4)
  003ac	de e1		 fsubrp	 ST(1), ST(0)
  003ae	d9 c9		 fxch	 ST(1)
  003b0	dc 24 cd 00 00
	00 00		 fsub	 QWORD PTR _bp[ecx*8]
  003b7	de ec		 fsubp	 ST(4), ST(0)
  003b9	d9 cb		 fxch	 ST(3)
  003bb	d8 ca		 fmul	 ST(0), ST(2)
  003bd	de eb		 fsubp	 ST(3), ST(0)
  003bf	d9 ca		 fxch	 ST(2)
  003c1	de cb		 fmulp	 ST(3), ST(0)

; 231  : 	/* compute log(ax) */
; 232  : 	    s2 = ss*ss;

  003c3	d9 c1		 fld	 ST(1)
  003c5	d8 ca		 fmul	 ST(0), ST(2)

; 233  : 	    r = s2*s2*(L1+s2*(L2+s2*(L3+s2*(L4+s2*(L5+s2*L6)))));

  003c7	dd 05 00 00 00
	00		 fld	 QWORD PTR _L6
  003cd	d8 c9		 fmul	 ST(0), ST(1)
  003cf	dc 05 00 00 00
	00		 fadd	 QWORD PTR _L5
  003d5	d8 c9		 fmul	 ST(0), ST(1)
  003d7	dc 05 00 00 00
	00		 fadd	 QWORD PTR _L4
  003dd	d8 c9		 fmul	 ST(0), ST(1)
  003df	dc 05 00 00 00
	00		 fadd	 QWORD PTR _L3
  003e5	d8 c9		 fmul	 ST(0), ST(1)
  003e7	dc 05 00 00 00
	00		 fadd	 QWORD PTR _L2
  003ed	d8 c9		 fmul	 ST(0), ST(1)
  003ef	dc 05 00 00 00
	00		 fadd	 QWORD PTR _L1
  003f5	d9 c1		 fld	 ST(1)
  003f7	de ca		 fmulp	 ST(2), ST(0)
  003f9	de c9		 fmulp	 ST(1), ST(0)

; 234  : 	    r += s_l*(s_h+ss);

  003fb	d9 c1		 fld	 ST(1)
  003fd	d8 c3		 fadd	 ST(0), ST(3)
  003ff	d8 cc		 fmul	 ST(0), ST(4)
  00401	de c1		 faddp	 ST(1), ST(0)

; 235  : 	    s2  = s_h*s_h;

  00403	d9 c1		 fld	 ST(1)
  00405	d8 ca		 fmul	 ST(0), ST(2)

; 236  : 	    t_h = 3.0+s2+r;

  00407	d9 c0		 fld	 ST(0)
  00409	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4008000000000000
  0040f	dc c1		 fadd	 ST(1), ST(0)
  00411	d9 c9		 fxch	 ST(1)
  00413	d8 c3		 fadd	 ST(0), ST(3)
  00415	dd 5d f8	 fstp	 QWORD PTR _t_h$1738[ebp]

; 237  : 	    __LO(t_h) = 0;

  00418	89 5d f8	 mov	 DWORD PTR _t_h$1738[ebp], ebx

; 238  : 	    t_l = r-((t_h-3.0)-s2);
; 239  : 	/* u+v = ss*(1+...) */
; 240  : 	    u = s_h*t_h;

  0041b	dd 45 f8	 fld	 QWORD PTR _t_h$1738[ebp]
  0041e	d9 c0		 fld	 ST(0)
  00420	de cd		 fmulp	 ST(5), ST(0)
  00422	d9 c0		 fld	 ST(0)
  00424	de e2		 fsubrp	 ST(2), ST(0)
  00426	d9 c9		 fxch	 ST(1)
  00428	de e2		 fsubrp	 ST(2), ST(0)
  0042a	d9 ca		 fxch	 ST(2)
  0042c	de e1		 fsubrp	 ST(1), ST(0)

; 241  : 	    v = s_l*t_h+t_l*ss;

  0042e	de cb		 fmulp	 ST(3), ST(0)
  00430	de cb		 fmulp	 ST(3), ST(0)
  00432	d9 c9		 fxch	 ST(1)
  00434	de c2		 faddp	 ST(2), ST(0)

; 242  : 	/* 2/(3log2)*(ss+...) */
; 243  : 	    p_h = u+v;

  00436	d9 c1		 fld	 ST(1)
  00438	d8 c1		 fadd	 ST(0), ST(1)
  0043a	dd 5d e8	 fstp	 QWORD PTR _p_h$[ebp]

; 244  : 	    __LO(p_h) = 0;

  0043d	89 5d e8	 mov	 DWORD PTR _p_h$[ebp], ebx

; 245  : 	    p_l = v-(p_h-u);
; 246  : 	    z_h = cp_h*p_h;		/* cp_h+cp_l = 2/(3*log2) */

  00440	dd 45 e8	 fld	 QWORD PTR _p_h$[ebp]
  00443	dd 05 00 00 00
	00		 fld	 QWORD PTR _cp_h
  00449	d8 c9		 fmul	 ST(0), ST(1)

; 247  : 	    z_l = cp_l*p_h+p_l*cp+dp_l[k];
; 248  : 	/* log2(ax) = (ss+..)*2/(3*log2) = n + dp_h + z_h + z_l */
; 249  : 	    t = (double)n;
; 250  : 	    t1 = (((z_h+z_l)+dp_h[k])+t);

  0044b	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR _dp_h[ecx*8]
  00452	d9 c1		 fld	 ST(1)
  00454	de e3		 fsubrp	 ST(3), ST(0)
  00456	d9 cb		 fxch	 ST(3)
  00458	de e2		 fsubrp	 ST(2), ST(0)
  0045a	d9 c9		 fxch	 ST(1)
  0045c	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _cp
  00462	d9 c9		 fxch	 ST(1)
  00464	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e3e2fe0145b01f5
  0046a	de e9		 fsubp	 ST(1), ST(0)
  0046c	dc 04 cd 00 00
	00 00		 fadd	 QWORD PTR _dp_l[ecx*8]
  00473	db 45 0c	 fild	 DWORD PTR _n$[ebp]
  00476	d9 c1		 fld	 ST(1)
  00478	d8 c3		 fadd	 ST(0), ST(3)
  0047a	dc 00		 fadd	 QWORD PTR [eax]
  0047c	d8 c1		 fadd	 ST(0), ST(1)
  0047e	dd 5d 08	 fstp	 QWORD PTR _t1$[ebp]

; 251  : 	    __LO(t1) = 0;

  00481	89 5d 08	 mov	 DWORD PTR _t1$[ebp], ebx

; 252  : 	    t2 = z_l-(((t1-t)-dp_h[k])-z_h);

  00484	dd 45 08	 fld	 QWORD PTR _t1$[ebp]
  00487	d9 c0		 fld	 ST(0)
  00489	de e2		 fsubrp	 ST(2), ST(0)
  0048b	d9 c9		 fxch	 ST(1)
  0048d	dc 20		 fsub	 QWORD PTR [eax]
  0048f	de e3		 fsubrp	 ST(3), ST(0)
  00491	d9 c9		 fxch	 ST(1)
  00493	de e2		 fsubrp	 ST(2), ST(0)
  00495	d9 e8		 fld1
  00497	dd 45 f0	 fld	 QWORD PTR _s$[ebp]
  0049a	d9 cb		 fxch	 ST(3)
  0049c	d9 c9		 fxch	 ST(1)
  0049e	d9 ca		 fxch	 ST(2)
  004a0	d9 c9		 fxch	 ST(1)
$LN19@pow:

; 253  : 	}
; 254  : 
; 255  :     /* split up y into y1+y2 and compute (y1+y2)*(t1+t2) */
; 256  : 	y1  = y;

  004a2	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  004a5	dd 55 10	 fst	 QWORD PTR _y1$[ebp]

; 257  : 	__LO(y1) = 0;

  004a8	89 5d 10	 mov	 DWORD PTR _y1$[ebp], ebx

; 258  : 	p_l = (y-y1)*t1+y*t2;

  004ab	d9 c0		 fld	 ST(0)
  004ad	dd 45 10	 fld	 QWORD PTR _y1$[ebp]
  004b0	dc e9		 fsub	 ST(1), ST(0)
  004b2	d9 c9		 fxch	 ST(1)
  004b4	d8 cc		 fmul	 ST(0), ST(4)
  004b6	d9 cb		 fxch	 ST(3)
  004b8	de ca		 fmulp	 ST(2), ST(0)
  004ba	d9 ca		 fxch	 ST(2)
  004bc	de c1		 faddp	 ST(1), ST(0)

; 259  : 	p_h = y1*t1;

  004be	d9 c9		 fxch	 ST(1)
  004c0	de ca		 fmulp	 ST(2), ST(0)

; 260  : 	z = p_l+p_h;

  004c2	d9 c0		 fld	 ST(0)
  004c4	d8 c2		 fadd	 ST(0), ST(2)
  004c6	dd 55 10	 fst	 QWORD PTR _z$[ebp]

; 261  : 	j = __HI(z);
; 262  : 	i = __LO(z);
; 263  : 	if (j>=0x40900000) {				/* z >= 1024 */

  004c9	8b 75 14	 mov	 esi, DWORD PTR _z$[ebp+4]
  004cc	81 fe 00 00 90
	40		 cmp	 esi, 1083179008		; 40900000H
  004d2	7c 3d		 jl	 SHORT $LN13@pow

; 264  : 	    if(((j-0x40900000)|i)!=0)			/* if z > 1024 */

  004d4	8d 86 00 00 70
	bf		 lea	 eax, DWORD PTR [esi-1083179008]
  004da	0b 45 10	 or	 eax, DWORD PTR _z$[ebp]
  004dd	74 19		 je	 SHORT $LN12@pow
  004df	dd da		 fstp	 ST(2)
  004e1	dd d8		 fstp	 ST(0)
$LN186@pow:

; 266  : 	    else {
; 267  : 		if(p_l+ovt>z-p_h) return s*huge*huge;	/* overflow */

  004e3	dd d8		 fstp	 ST(0)
  004e5	dd d8		 fstp	 ST(0)
  004e7	dd 05 00 00 00
	00		 fld	 QWORD PTR _huge
  004ed	dc c9		 fmul	 ST(1), ST(0)

; 272  : 	    else {
; 273  : 		if(p_l<=z-p_h) return s*tiny*tiny;	/* underflow */

  004ef	de c9		 fmulp	 ST(1), ST(0)
$LN83@pow:
  004f1	5f		 pop	 edi
  004f2	5e		 pop	 esi
  004f3	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  004f4	8b e5		 mov	 esp, ebp
  004f6	5d		 pop	 ebp
  004f7	c3		 ret	 0
$LN12@pow:

; 266  : 	    else {
; 267  : 		if(p_l+ovt>z-p_h) return s*huge*huge;	/* overflow */

  004f8	d9 c1		 fld	 ST(1)
  004fa	dc 05 00 00 00
	00		 fadd	 QWORD PTR _ovt
  00500	d9 c9		 fxch	 ST(1)
  00502	d8 e3		 fsub	 ST(0), ST(3)
  00504	de d9		 fcompp
  00506	df e0		 fnstsw	 ax
  00508	f6 c4 05	 test	 ah, 5
  0050b	7a 5c		 jp	 SHORT $LN81@pow
  0050d	dd d9		 fstp	 ST(1)
  0050f	eb d2		 jmp	 SHORT $LN186@pow
$LN13@pow:

; 268  : 	    }
; 269  : 	} else if((j&0x7fffffff)>=0x4090cc00 ) {	/* z <= -1075 */

  00511	8b ce		 mov	 ecx, esi
  00513	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00519	81 f9 00 cc 90
	40		 cmp	 ecx, 1083231232		; 4090cc00H
  0051f	7c 46		 jl	 SHORT $LN161@pow

; 270  : 	    if(((j-0xc090cc00)|i)!=0) 		/* z < -1075 */

  00521	8d 96 00 34 6f
	3f		 lea	 edx, DWORD PTR [esi+1064252416]
  00527	0b 55 10	 or	 edx, DWORD PTR _z$[ebp]
  0052a	74 19		 je	 SHORT $LN7@pow
  0052c	dd da		 fstp	 ST(2)
  0052e	5f		 pop	 edi
  0052f	dd d8		 fstp	 ST(0)
  00531	5e		 pop	 esi
  00532	dd d8		 fstp	 ST(0)
  00534	5b		 pop	 ebx
  00535	dd d8		 fstp	 ST(0)

; 271  : 		return s*tiny*tiny;		/* underflow */

  00537	dd 05 00 00 00
	00		 fld	 QWORD PTR _tiny
  0053d	dc c9		 fmul	 ST(1), ST(0)

; 272  : 	    else {
; 273  : 		if(p_l<=z-p_h) return s*tiny*tiny;	/* underflow */

  0053f	de c9		 fmulp	 ST(1), ST(0)

; 305  : 	return s*z;
; 306  : }

  00541	8b e5		 mov	 esp, ebp
  00543	5d		 pop	 ebp
  00544	c3		 ret	 0
$LN7@pow:

; 272  : 	    else {
; 273  : 		if(p_l<=z-p_h) return s*tiny*tiny;	/* underflow */

  00545	d8 e2		 fsub	 ST(0), ST(2)
  00547	d8 d9		 fcomp	 ST(1)
  00549	df e0		 fnstsw	 ax
  0054b	f6 c4 01	 test	 ah, 1
  0054e	75 19		 jne	 SHORT $LN81@pow
  00550	dd d9		 fstp	 ST(1)
  00552	dd d8		 fstp	 ST(0)
  00554	dd d8		 fstp	 ST(0)
$LN73@pow:
  00556	dd 05 00 00 00
	00		 fld	 QWORD PTR _tiny
  0055c	5f		 pop	 edi
  0055d	dc c9		 fmul	 ST(1), ST(0)
  0055f	5e		 pop	 esi
  00560	5b		 pop	 ebx
  00561	de c9		 fmulp	 ST(1), ST(0)

; 305  : 	return s*z;
; 306  : }

  00563	8b e5		 mov	 esp, ebp
  00565	5d		 pop	 ebp
  00566	c3		 ret	 0
$LN161@pow:

; 268  : 	    }
; 269  : 	} else if((j&0x7fffffff)>=0x4090cc00 ) {	/* z <= -1075 */

  00567	dd d8		 fstp	 ST(0)
$LN81@pow:

; 274  : 	    }
; 275  : 	}
; 276  :     /*
; 277  :      * compute 2**(p_h+p_l)
; 278  :      */
; 279  : 	i = j&0x7fffffff;

  00569	8b ce		 mov	 ecx, esi
  0056b	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 280  : 	k = (i>>20)-0x3ff;
; 281  : 	n = 0;

  00571	33 c0		 xor	 eax, eax

; 282  : 	if(i>0x3fe00000) {		/* if |z| > 0.5, set n = [z+0.5] */

  00573	81 f9 00 00 e0
	3f		 cmp	 ecx, 1071644672		; 3fe00000H
  00579	7e 58		 jle	 SHORT $LN4@pow

; 283  : 	    n = j+(0x00100000>>(k+1));
; 284  : 	    k = ((n&0x7fffffff)>>20)-0x3ff;	/* new k for n */
; 285  : 	    t = zero;

  0057b	c1 f9 14	 sar	 ecx, 20			; 00000014H
  0057e	d9 ee		 fldz
  00580	81 e9 fe 03 00
	00		 sub	 ecx, 1022		; 000003feH
  00586	dd 5d 10	 fstp	 QWORD PTR _t$[ebp]
  00589	b8 00 00 10 00	 mov	 eax, 1048576		; 00100000H
  0058e	d3 f8		 sar	 eax, cl

; 286  : 	    __HI(t) = (n&~(0x000fffff>>k));

  00590	bf ff ff 0f 00	 mov	 edi, 1048575		; 000fffffH
  00595	03 c6		 add	 eax, esi
  00597	8b d0		 mov	 edx, eax
  00599	c1 fa 14	 sar	 edx, 20			; 00000014H
  0059c	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  005a2	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  005a8	8b ca		 mov	 ecx, edx
  005aa	d3 ff		 sar	 edi, cl

; 287  : 	    n = ((n&0x000fffff)|0x00100000)>>(20-k);

  005ac	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  005b1	2b ca		 sub	 ecx, edx
  005b3	f7 d7		 not	 edi
  005b5	23 f8		 and	 edi, eax
  005b7	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  005bc	0d 00 00 10 00	 or	 eax, 1048576		; 00100000H
  005c1	d3 f8		 sar	 eax, cl
  005c3	89 7d 14	 mov	 DWORD PTR _t$[ebp+4], edi

; 288  : 	    if(j<0) n = -n;

  005c6	3b f3		 cmp	 esi, ebx
  005c8	7d 02		 jge	 SHORT $LN3@pow
  005ca	f7 d8		 neg	 eax
$LN3@pow:

; 289  : 	    p_h -= t;

  005cc	d9 c9		 fxch	 ST(1)
  005ce	dc 65 10	 fsub	 QWORD PTR _t$[ebp]
  005d1	d9 c9		 fxch	 ST(1)
$LN4@pow:

; 290  : 	} 
; 291  : 	t = p_l+p_h;

  005d3	d9 c0		 fld	 ST(0)

; 292  : 	__LO(t) = 0;
; 293  : 	u = t*lg2_h;
; 294  : 	v = (p_l-(t-p_h))*lg2+t*lg2_l;
; 295  : 	z = u+v;
; 296  : 	w = v-(z-u);
; 297  : 	t  = z*z;
; 298  : 	t1  = z - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))));
; 299  : 	r  = (z*t1)/(t1-two)-(w+z*w);
; 300  : 	z  = one-(r-z);
; 301  : 	j  = __HI(z);
; 302  : 	j += (n<<20);

  005d5	8b c8		 mov	 ecx, eax
  005d7	d8 c2		 fadd	 ST(0), ST(2)
  005d9	c1 e1 14	 shl	 ecx, 20			; 00000014H
  005dc	dd 5d 10	 fstp	 QWORD PTR _t$[ebp]
  005df	89 5d 10	 mov	 DWORD PTR _t$[ebp], ebx
  005e2	dd 45 10	 fld	 QWORD PTR _t$[ebp]
  005e5	dd 05 00 00 00
	00		 fld	 QWORD PTR _lg2_h
  005eb	d8 c9		 fmul	 ST(0), ST(1)
  005ed	d9 c1		 fld	 ST(1)
  005ef	de e4		 fsubrp	 ST(4), ST(0)
  005f1	d9 ca		 fxch	 ST(2)
  005f3	de e3		 fsubrp	 ST(3), ST(0)
  005f5	d9 ca		 fxch	 ST(2)
  005f7	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _lg2
  005fd	d9 ca		 fxch	 ST(2)
  005ff	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3e205c610ca86c39
  00605	de ea		 fsubp	 ST(2), ST(0)
  00607	d9 c1		 fld	 ST(1)
  00609	d8 c1		 fadd	 ST(0), ST(1)
  0060b	d9 c0		 fld	 ST(0)
  0060d	de e2		 fsubrp	 ST(2), ST(0)
  0060f	d9 ca		 fxch	 ST(2)
  00611	de e1		 fsubrp	 ST(1), ST(0)
  00613	d9 c1		 fld	 ST(1)
  00615	d8 ca		 fmul	 ST(0), ST(2)
  00617	dd 05 00 00 00
	00		 fld	 QWORD PTR _P5
  0061d	d8 c9		 fmul	 ST(0), ST(1)
  0061f	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ebbbd41c5d26bf1
  00625	d8 c9		 fmul	 ST(0), ST(1)
  00627	dc 05 00 00 00
	00		 fadd	 QWORD PTR _P3
  0062d	d8 c9		 fmul	 ST(0), ST(1)
  0062f	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3f66c16c16bebd93
  00635	d8 c9		 fmul	 ST(0), ST(1)
  00637	dc 05 00 00 00
	00		 fadd	 QWORD PTR _P1
  0063d	de c9		 fmulp	 ST(1), ST(0)
  0063f	d8 ea		 fsubr	 ST(0), ST(2)
  00641	d9 c0		 fld	 ST(0)
  00643	d8 cb		 fmul	 ST(0), ST(3)
  00645	d9 c9		 fxch	 ST(1)
  00647	dc 25 00 00 00
	00		 fsub	 QWORD PTR _two
  0064d	de f9		 fdivp	 ST(1), ST(0)
  0064f	d9 c1		 fld	 ST(1)
  00651	d8 cb		 fmul	 ST(0), ST(3)
  00653	de c2		 faddp	 ST(2), ST(0)
  00655	de e1		 fsubrp	 ST(1), ST(0)
  00657	de e1		 fsubrp	 ST(1), ST(0)
  00659	de e9		 fsubp	 ST(1), ST(0)
  0065b	dd 55 10	 fst	 QWORD PTR _z$[ebp]
  0065e	03 4d 14	 add	 ecx, DWORD PTR _z$[ebp+4]

; 303  : 	if((j>>20)<=0) z = scalbn(z,n);	/* subnormal output */

  00661	f7 c1 00 00 f0
	ff		 test	 ecx, -1048576		; fff00000H
  00667	7f 1d		 jg	 SHORT $LN156@pow
  00669	50		 push	 eax
  0066a	dd d9		 fstp	 ST(1)
  0066c	83 ec 08	 sub	 esp, 8
  0066f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00672	e8 00 00 00 00	 call	 _scalbn
  00677	dd 45 f0	 fld	 QWORD PTR _s$[ebp]
  0067a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0067d	5f		 pop	 edi
  0067e	de c9		 fmulp	 ST(1), ST(0)
  00680	5e		 pop	 esi
  00681	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00682	8b e5		 mov	 esp, ebp
  00684	5d		 pop	 ebp
  00685	c3		 ret	 0
$LN156@pow:

; 303  : 	if((j>>20)<=0) z = scalbn(z,n);	/* subnormal output */

  00686	dd d8		 fstp	 ST(0)

; 304  : 	else __HI(z) += (n<<20);

  00688	89 4d 14	 mov	 DWORD PTR _z$[ebp+4], ecx
  0068b	dd 45 10	 fld	 QWORD PTR _z$[ebp]
  0068e	5f		 pop	 edi
  0068f	d9 c9		 fxch	 ST(1)
  00691	5e		 pop	 esi
  00692	de c9		 fmulp	 ST(1), ST(0)
  00694	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  00695	8b e5		 mov	 esp, ebp
  00697	5d		 pop	 ebp
  00698	c3		 ret	 0
$LN58@pow:

; 121  : 		return x+y;	

  00699	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  0069c	5e		 pop	 esi
  0069d	dc 45 10	 fadd	 QWORD PTR _y$[ebp]
  006a0	5b		 pop	 ebx

; 305  : 	return s*z;
; 306  : }

  006a1	8b e5		 mov	 esp, ebp
  006a3	5d		 pop	 ebp
  006a4	c3		 ret	 0
_pow	ENDP
_TEXT	ENDS
END
