; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\stdio\vfprintf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG2001	DB	'r+', 00H
	ORG $+1
$SG2002	DB	'c:/system/mlog.txt', 00H
_DATA	ENDS
PUBLIC	_vfprintf
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_vsprintf:PROC
EXTRN	_fwrite:PROC
EXTRN	_malloc:PROC
EXTRN	_free:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\vfprintf.c
;	COMDAT _vfprintf
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_format$ = 12						; size = 4
_ap$ = 16						; size = 4
_vfprintf PROC						; COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 13   : 	//Step 1. Combine string and arguments
; 14   : 	char *Out = (char*)malloc(256);

  00005	68 00 01 00 00	 push	 256			; 00000100H
  0000a	e8 00 00 00 00	 call	 _malloc

; 15   : 	memset(Out, 0, 256);

  0000f	68 00 01 00 00	 push	 256			; 00000100H
  00014	8b f0		 mov	 esi, eax
  00016	6a 00		 push	 0
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _memset

; 16   : 
; 17   : 	//Use sprintf that for this
; 18   : 	vsprintf(Out, format, ap);

  0001e	ff 75 10	 push	 DWORD PTR _ap$[ebp]
  00021	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 _vsprintf

; 19   : 
; 20   : 	//If we have a valid stream, write to that.
; 21   : 	if(stream != NULL)

  0002a	8b 55 08	 mov	 edx, DWORD PTR _stream$[ebp]
  0002d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00030	85 d2		 test	 edx, edx
  00032	74 31		 je	 SHORT $LN3@vfprintf

; 22   : 		fwrite(Out, strlen(Out), 1, stream);

  00034	8b ce		 mov	 ecx, esi
  00036	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL6@vfprintf:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL6@vfprintf
  00047	52		 push	 edx
  00048	2b cf		 sub	 ecx, edi
  0004a	6a 01		 push	 1
  0004c	51		 push	 ecx
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 _fwrite
  00053	83 c4 10	 add	 esp, 16			; 00000010H

; 36   : 	}
; 37   : 
; 38   : 	//Cleanup
; 39   : 	free(Out);

  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 _free
  0005c	83 c4 04	 add	 esp, 4

; 40   : 	return 0;

  0005f	33 c0		 xor	 eax, eax
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 41   : }

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
$LN3@vfprintf:

; 23   : 	else
; 24   : 	{
; 25   : 		//Ok, writing to sys-log
; 26   : 		FILE *temp = fopen("c:/system/mlog.txt", "r+");

  00065	68 00 00 00 00	 push	 OFFSET $SG2001
  0006a	68 00 00 00 00	 push	 OFFSET $SG2002
  0006f	e8 00 00 00 00	 call	 _fopen
  00074	8b f8		 mov	 edi, eax
  00076	83 c4 08	 add	 esp, 8

; 27   : 
; 28   : 		if(temp == NULL)

  00079	85 ff		 test	 edi, edi
  0007b	75 07		 jne	 SHORT $LN1@vfprintf

; 29   : 			return 1;

  0007d	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi

; 41   : }

  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN1@vfprintf:

; 30   : 
; 31   : 		//Write data
; 32   : 		fwrite(Out, strlen(Out), 1, temp);

  00084	8b ce		 mov	 ecx, esi
  00086	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00089	8d a4 24 00 00
	00 00		 npad	 7
$LL7@vfprintf:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL7@vfprintf
  00097	57		 push	 edi
  00098	2b ca		 sub	 ecx, edx
  0009a	6a 01		 push	 1
  0009c	51		 push	 ecx
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 _fwrite

; 33   : 
; 34   : 		//Cleanup
; 35   : 		fclose(temp);

  000a3	57		 push	 edi
  000a4	e8 00 00 00 00	 call	 _fclose
  000a9	83 c4 14	 add	 esp, 20			; 00000014H

; 36   : 	}
; 37   : 
; 38   : 	//Cleanup
; 39   : 	free(Out);

  000ac	56		 push	 esi
  000ad	e8 00 00 00 00	 call	 _free
  000b2	83 c4 04	 add	 esp, 4

; 40   : 	return 0;

  000b5	33 c0		 xor	 eax, eax
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi

; 41   : }

  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_vfprintf ENDP
_TEXT	ENDS
END
