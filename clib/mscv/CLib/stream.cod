; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\stdio\stream.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG2719	DB	'-', 00H
	ORG $+2
$SG2722	DB	'+', 00H
	ORG $+2
$SG2725	DB	' ', 00H
	ORG $+2
?_nullstring@?1??streamout@@9@9 DD FLAT:$SG2764		; `streamout'::`2'::_nullstring
$SG2764	DB	'(null)', 00H
	ORG $+1
$SG2981	DB	'-', 00H
	ORG $+2
$SG2984	DB	'+', 00H
	ORG $+2
$SG2987	DB	' ', 00H
	ORG $+2
$SG2991	DB	'0', 00H
_DATA	ENDS
CONST	SEGMENT
?digits_l@?1??format_float@@9@9 DB '0123456789abcdef0x', 00H ; `format_float'::`2'::digits_l
	ORG $+1
?digits_u@?1??format_float@@9@9 DB '0123456789ABCDEF0X', 00H ; `format_float'::`2'::digits_u
	ORG $+1
?_nan@?1??format_float@@9@9 DB '#QNAN', 00H		; `format_float'::`2'::_nan
	ORG $+2
?_infinity@?1??format_float@@9@9 DB '#INF', 00H		; `format_float'::`2'::_infinity
	ORG $+3
?digits_l@?1??streamout@@9@9 DB '0123456789abcdef0x', 00H ; `streamout'::`2'::digits_l
	ORG $+1
?digits_u@?1??streamout@@9@9 DB '0123456789ABCDEF0X', 00H ; `streamout'::`2'::digits_u
CONST	ENDS
PUBLIC	_StreamCharacterToUtf8
PUBLIC	_format_float
PUBLIC	_streamout
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	_putchar:PROC
EXTRN	__finite:PROC
EXTRN	__isnan:PROC
EXTRN	_wcsnlen:PROC
EXTRN	__aulldvrm:PROC
EXTRN	__aullrem:PROC
EXTRN	__dtoul3:PROC
EXTRN	__libm_sse2_log10_precise:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	__ultod3:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _streamout
_TEXT	SEGMENT
_buffer$ = -104						; size = 50
_flags$1$ = -52						; size = 4
tv725 = -52						; size = 4
_prefixlen$1$ = -48					; size = 4
tv658 = -48						; size = 4
_prefix$ = -48						; size = 4
_digits$1$ = -44					; size = 4
_uLen$1 = -44						; size = 4
tv599 = -40						; size = 8
_base$1$ = -36						; size = 4
_val64$2$ = -32						; size = 4
_string$ = -32						; size = 4
_val64$1$ = -28						; size = 4
_written$4$ = -28					; size = 4
_cnt$ = -24						; size = 4
_prefix$1$ = -20					; size = 4
_chr$ = -16						; size = 1
_padding$2$ = -12					; size = 4
_string$1$ = -8						; size = 4
_written_all$1$ = -4					; size = 4
_out$ = 8						; size = 4
_precision$2$ = 12					; size = 4
tv723 = 12						; size = 4
tv657 = 12						; size = 4
_size$ = 12						; size = 4
_format$ = 16						; size = 4
_argptr$ = 20						; size = 4
_streamout PROC						; COMDAT

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H

; 443  : 	static const char digits_l[] = "0123456789abcdef0x";
; 444  : 	static const char digits_u[] = "0123456789ABCDEF0X";
; 445  : 	static const char *_nullstring = "(null)";
; 446  : 	char buffer[BUFFER_SIZE + 1];
; 447  : 	uint32_t cnt = size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]

; 448  : 	char chr, *string;
; 449  : 	STRING *nt_string;
; 450  : 	const char *digits, *prefix;
; 451  : 	int base, fieldwidth, precision, padding;
; 452  : 	size_t prefixlen, len;
; 453  : 	int written = 1, written_all = 0;

  00009	ba 01 00 00 00	 mov	 edx, 1
  0000e	53		 push	 ebx
  0000f	56		 push	 esi

; 454  : 	unsigned int flags;
; 455  : 	unsigned __int64 val64;
; 456  : 
; 457  : 	buffer[BUFFER_SIZE] = '\0';

  00010	8b 75 10	 mov	 esi, DWORD PTR _format$[ebp]
  00013	57		 push	 edi
  00014	33 ff		 xor	 edi, edi
  00016	89 45 e8	 mov	 DWORD PTR _cnt$[ebp], eax
  00019	89 55 e4	 mov	 DWORD PTR _written$4$[ebp], edx
  0001c	89 7d fc	 mov	 DWORD PTR _written_all$1$[ebp], edi
  0001f	c6 45 c9 00	 mov	 BYTE PTR _buffer$[ebp+49], 0
$LN271@streamout:

; 461  : 	{
; 462  : 		/* Get character and advance */
; 463  : 		chr = *format++;

  00023	8a 06		 mov	 al, BYTE PTR [esi]
  00025	46		 inc	 esi
  00026	8b 5d 08	 mov	 ebx, DWORD PTR _out$[ebp]

; 464  : 
; 465  : 		/* Check for end of format string */
; 466  : 		if (chr == '\0') 

  00029	84 c0		 test	 al, al
  0002b	0f 84 b5 06 00
	00		 je	 $LN119@streamout

; 467  : 			break;
; 468  : 
; 469  : 		/* Check for 'normal' character or double % */
; 470  : 		if ((chr != ('%')) ||
; 471  : 			(chr = *format++) == ('%'))

  00031	3c 25		 cmp	 al, 37			; 00000025H
  00033	0f 85 0f 06 00
	00		 jne	 $LN116@streamout
  00039	8a 06		 mov	 al, BYTE PTR [esi]
  0003b	46		 inc	 esi
  0003c	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0003f	3c 25		 cmp	 al, 37			; 00000025H
  00041	0f 84 01 06 00
	00		 je	 $LN116@streamout

; 521  : 			continue;
; 522  : 		}
; 523  : 
; 524  : 		/* Handle flags-characters */
; 525  : 		flags = 0;

  00047	33 db		 xor	 ebx, ebx
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL104@streamout:

; 526  : 		while (1)
; 527  : 		{
; 528  : 			if (chr == ('-')) flags |= FLAG_ALIGN_LEFT;

  00050	3c 2d		 cmp	 al, 45			; 0000002dH
  00052	75 0b		 jne	 SHORT $LN102@streamout

; 533  : 			else break;
; 534  : 			chr = *format++;

  00054	8a 06		 mov	 al, BYTE PTR [esi]
  00056	83 cb 01	 or	 ebx, 1
  00059	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0005c	46		 inc	 esi

; 535  : 		}

  0005d	eb f1		 jmp	 SHORT $LL104@streamout
$LN102@streamout:

; 529  : 			else if (chr == ('+')) flags |= FLAG_FORCE_SIGN;

  0005f	3c 2b		 cmp	 al, 43			; 0000002bH
  00061	75 0b		 jne	 SHORT $LN100@streamout

; 533  : 			else break;
; 534  : 			chr = *format++;

  00063	8a 06		 mov	 al, BYTE PTR [esi]
  00065	83 cb 02	 or	 ebx, 2
  00068	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0006b	46		 inc	 esi

; 535  : 		}

  0006c	eb e2		 jmp	 SHORT $LL104@streamout
$LN100@streamout:

; 530  : 			else if (chr == (' ')) flags |= FLAG_FORCE_SIGNSP;

  0006e	3c 20		 cmp	 al, 32			; 00000020H
  00070	75 0b		 jne	 SHORT $LN98@streamout

; 533  : 			else break;
; 534  : 			chr = *format++;

  00072	8a 06		 mov	 al, BYTE PTR [esi]
  00074	83 cb 04	 or	 ebx, 4
  00077	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0007a	46		 inc	 esi

; 535  : 		}

  0007b	eb d3		 jmp	 SHORT $LL104@streamout
$LN98@streamout:

; 531  : 			else if (chr == ('0')) flags |= FLAG_PAD_ZERO;

  0007d	3c 30		 cmp	 al, 48			; 00000030H
  0007f	75 0b		 jne	 SHORT $LN96@streamout

; 533  : 			else break;
; 534  : 			chr = *format++;

  00081	8a 06		 mov	 al, BYTE PTR [esi]
  00083	83 cb 08	 or	 ebx, 8
  00086	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00089	46		 inc	 esi

; 535  : 		}

  0008a	eb c4		 jmp	 SHORT $LL104@streamout
$LN96@streamout:

; 532  : 			else if (chr == ('#')) flags |= FLAG_SPECIAL;

  0008c	3c 23		 cmp	 al, 35			; 00000023H
  0008e	75 0b		 jne	 SHORT $LN94@streamout

; 533  : 			else break;
; 534  : 			chr = *format++;

  00090	8a 06		 mov	 al, BYTE PTR [esi]
  00092	83 cb 10	 or	 ebx, 16			; 00000010H
  00095	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00098	46		 inc	 esi

; 535  : 		}

  00099	eb b5		 jmp	 SHORT $LL104@streamout
$LN94@streamout:

; 536  : 
; 537  : 		/* Handle field width modifier */
; 538  : 		if (chr == ('*'))

  0009b	3c 2a		 cmp	 al, 42			; 0000002aH
  0009d	75 23		 jne	 SHORT $LN92@streamout

; 539  : 		{
; 540  : 			fieldwidth = va_arg(argptr, int);

  0009f	8b 7d 14	 mov	 edi, DWORD PTR _argptr$[ebp]
  000a2	83 c7 04	 add	 edi, 4
  000a5	89 7d 14	 mov	 DWORD PTR _argptr$[ebp], edi
  000a8	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
  000ab	89 4d f4	 mov	 DWORD PTR _padding$2$[ebp], ecx

; 541  : 			if (fieldwidth < 0)

  000ae	85 c9		 test	 ecx, ecx
  000b0	79 08		 jns	 SHORT $LN91@streamout

; 542  : 			{
; 543  : 				flags |= FLAG_ALIGN_LEFT;

  000b2	83 cb 01	 or	 ebx, 1

; 544  : 				fieldwidth = -fieldwidth;

  000b5	f7 d9		 neg	 ecx
  000b7	89 4d f4	 mov	 DWORD PTR _padding$2$[ebp], ecx
$LN91@streamout:

; 545  : 			}
; 546  : 			chr = *format++;

  000ba	8a 06		 mov	 al, BYTE PTR [esi]
  000bc	46		 inc	 esi
  000bd	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al

; 547  : 		}
; 548  : 		else

  000c0	eb 2e		 jmp	 SHORT $LN88@streamout
$LN92@streamout:

; 549  : 		{
; 550  : 			fieldwidth = 0;

  000c2	33 c9		 xor	 ecx, ecx
  000c4	89 4d f4	 mov	 DWORD PTR _padding$2$[ebp], ecx

; 551  : 			while (chr >= ('0') && chr <= ('9'))

  000c7	3c 30		 cmp	 al, 48			; 00000030H
  000c9	7c 22		 jl	 SHORT $LN252@streamout
  000cb	eb 03 8d 49 00	 npad	 5
$LL89@streamout:
  000d0	3c 39		 cmp	 al, 57			; 00000039H
  000d2	7f 16		 jg	 SHORT $LN248@streamout

; 552  : 			{
; 553  : 				fieldwidth = fieldwidth * 10 + (chr - ('0'));

  000d4	0f be c0	 movsx	 eax, al
  000d7	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  000da	8d 49 e8	 lea	 ecx, DWORD PTR [ecx-24]
  000dd	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]

; 554  : 				chr = *format++;

  000e0	8a 06		 mov	 al, BYTE PTR [esi]
  000e2	46		 inc	 esi
  000e3	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  000e6	3c 30		 cmp	 al, 48			; 00000030H
  000e8	7d e6		 jge	 SHORT $LL89@streamout
$LN248@streamout:
  000ea	89 4d f4	 mov	 DWORD PTR _padding$2$[ebp], ecx
$LN252@streamout:
  000ed	8b 7d 14	 mov	 edi, DWORD PTR _argptr$[ebp]
$LN88@streamout:

; 555  : 			}
; 556  : 		}
; 557  : 
; 558  : 		/* Handle precision modifier */
; 559  : 		if (chr == '.')

  000f0	3c 2e		 cmp	 al, 46			; 0000002eH
  000f2	75 43		 jne	 SHORT $LN87@streamout

; 560  : 		{
; 561  : 			chr = *format++;

  000f4	8a 06		 mov	 al, BYTE PTR [esi]
  000f6	46		 inc	 esi
  000f7	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al

; 562  : 
; 563  : 			if (chr == ('*'))

  000fa	3c 2a		 cmp	 al, 42			; 0000002aH
  000fc	75 11		 jne	 SHORT $LN86@streamout

; 564  : 			{
; 565  : 				precision = va_arg(argptr, int);
; 566  : 				chr = *format++;

  000fe	8a 06		 mov	 al, BYTE PTR [esi]
  00100	83 c7 04	 add	 edi, 4
  00103	89 7d 14	 mov	 DWORD PTR _argptr$[ebp], edi
  00106	46		 inc	 esi
  00107	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0010a	8b 7f fc	 mov	 edi, DWORD PTR [edi-4]

; 567  : 			}
; 568  : 			else

  0010d	eb 2b		 jmp	 SHORT $LN264@streamout
$LN86@streamout:

; 569  : 			{
; 570  : 				precision = 0;

  0010f	33 ff		 xor	 edi, edi
  00111	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi

; 571  : 				while (chr >= ('0') && chr <= ('9'))

  00114	3c 30		 cmp	 al, 48			; 00000030H
  00116	7c 28		 jl	 SHORT $LL81@streamout
$LL84@streamout:
  00118	3c 39		 cmp	 al, 57			; 00000039H
  0011a	7f 24		 jg	 SHORT $LL81@streamout

; 572  : 				{
; 573  : 					precision = precision * 10 + (chr - ('0'));

  0011c	0f be c0	 movsx	 eax, al
  0011f	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00122	8d 79 e8	 lea	 edi, DWORD PTR [ecx-24]
  00125	8d 3c 78	 lea	 edi, DWORD PTR [eax+edi*2]

; 574  : 					chr = *format++;

  00128	8a 06		 mov	 al, BYTE PTR [esi]
  0012a	46		 inc	 esi
  0012b	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi
  0012e	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00131	3c 30		 cmp	 al, 48			; 00000030H
  00133	7d e3		 jge	 SHORT $LL84@streamout

; 575  : 				}
; 576  : 			}

  00135	eb 09		 jmp	 SHORT $LL81@streamout
$LN87@streamout:

; 577  : 		}
; 578  : 		else precision = -1;

  00137	83 cf ff	 or	 edi, -1
$LN264@streamout:
  0013a	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi
  0013d	8d 49 00	 npad	 3
$LL81@streamout:

; 579  : 
; 580  : 		/* Handle argument size prefix */
; 581  : 		do
; 582  : 		{
; 583  : 			if (chr == ('h')) flags |= FLAG_SHORT;

  00140	3c 68		 cmp	 al, 104			; 00000068H
  00142	75 0e		 jne	 SHORT $LN78@streamout

; 607  : 				{
; 608  : 					flags |= FLAG_INTPTR;
; 609  : 				}
; 610  : 				else break;
; 611  : 			}
; 612  : 			else break;
; 613  : 			chr = *format++;

  00144	8a 06		 mov	 al, BYTE PTR [esi]
  00146	81 cb 00 01 00
	00		 or	 ebx, 256		; 00000100H
  0014c	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0014f	46		 inc	 esi

; 614  : 		}
; 615  : 		while (USE_MULTISIZE);

  00150	eb ee		 jmp	 SHORT $LL81@streamout
$LN78@streamout:

; 584  : 			else if (chr == ('w')) flags |= FLAG_WIDECHAR;

  00152	3c 77		 cmp	 al, 119			; 00000077H
  00154	75 0e		 jne	 SHORT $LN76@streamout
$LN69@streamout:

; 607  : 				{
; 608  : 					flags |= FLAG_INTPTR;
; 609  : 				}
; 610  : 				else break;
; 611  : 			}
; 612  : 			else break;
; 613  : 			chr = *format++;

  00156	8a 06		 mov	 al, BYTE PTR [esi]
  00158	81 cb 00 02 00
	00		 or	 ebx, 512		; 00000200H
  0015e	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00161	46		 inc	 esi

; 614  : 		}
; 615  : 		while (USE_MULTISIZE);

  00162	eb dc		 jmp	 SHORT $LL81@streamout
$LN76@streamout:

; 585  : 			else if (chr == ('L')) flags |= 0; // FIXME: long double

  00164	3c 4c		 cmp	 al, 76			; 0000004cH
  00166	74 73		 je	 SHORT $LN60@streamout

; 586  : 			else if (chr == ('F')) flags |= 0; // FIXME: what is that?

  00168	3c 46		 cmp	 al, 70			; 00000046H
  0016a	74 6f		 je	 SHORT $LN60@streamout

; 587  : 			else if (chr == ('l'))

  0016c	3c 6c		 cmp	 al, 108			; 0000006cH
  0016e	75 13		 jne	 SHORT $LN70@streamout

; 588  : 			{
; 589  : 				/* Check if this is the 2nd 'l' in a row */
; 590  : 				if (format[-2] == 'l') flags |= FLAG_INT64;

  00170	38 46 fe	 cmp	 BYTE PTR [esi-2], al
  00173	75 e1		 jne	 SHORT $LN69@streamout

; 607  : 				{
; 608  : 					flags |= FLAG_INTPTR;
; 609  : 				}
; 610  : 				else break;
; 611  : 			}
; 612  : 			else break;
; 613  : 			chr = *format++;

  00175	8a 06		 mov	 al, BYTE PTR [esi]
  00177	81 cb 00 04 00
	00		 or	 ebx, 1024		; 00000400H
  0017d	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  00180	46		 inc	 esi

; 614  : 		}
; 615  : 		while (USE_MULTISIZE);

  00181	eb bd		 jmp	 SHORT $LL81@streamout
$LN70@streamout:

; 591  : 				else flags |= FLAG_LONG;
; 592  : 			}
; 593  : 			else if (chr == ('I'))

  00183	3c 49		 cmp	 al, 73			; 00000049H
  00185	75 5f		 jne	 SHORT $LN79@streamout

; 594  : 			{
; 595  : 				if (format[0] == ('3') && format[1] == ('2'))

  00187	8a 0e		 mov	 cl, BYTE PTR [esi]
  00189	80 f9 33	 cmp	 cl, 51			; 00000033H
  0018c	75 12		 jne	 SHORT $LN65@streamout
  0018e	80 7e 01 32	 cmp	 BYTE PTR [esi+1], 50	; 00000032H
  00192	75 0c		 jne	 SHORT $LN65@streamout

; 607  : 				{
; 608  : 					flags |= FLAG_INTPTR;
; 609  : 				}
; 610  : 				else break;
; 611  : 			}
; 612  : 			else break;
; 613  : 			chr = *format++;

  00194	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  00197	83 c6 02	 add	 esi, 2
  0019a	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  0019d	46		 inc	 esi

; 614  : 		}
; 615  : 		while (USE_MULTISIZE);

  0019e	eb a0		 jmp	 SHORT $LL81@streamout
$LN65@streamout:

; 596  : 				{
; 597  : 					format += 2;
; 598  : 				}
; 599  : 				else if (format[0] == ('6') && format[1] == ('4'))

  001a0	80 f9 36	 cmp	 cl, 54			; 00000036H
  001a3	75 18		 jne	 SHORT $LN63@streamout
  001a5	80 7e 01 34	 cmp	 BYTE PTR [esi+1], 52	; 00000034H
  001a9	75 12		 jne	 SHORT $LN63@streamout

; 607  : 				{
; 608  : 					flags |= FLAG_INTPTR;
; 609  : 				}
; 610  : 				else break;
; 611  : 			}
; 612  : 			else break;
; 613  : 			chr = *format++;

  001ab	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  001ae	83 c6 02	 add	 esi, 2
  001b1	81 cb 00 04 00
	00		 or	 ebx, 1024		; 00000400H
  001b7	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al
  001ba	46		 inc	 esi

; 614  : 		}
; 615  : 		while (USE_MULTISIZE);

  001bb	eb 83		 jmp	 SHORT $LL81@streamout
$LN63@streamout:

; 600  : 				{
; 601  : 					format += 2;
; 602  : 					flags |= FLAG_INT64;
; 603  : 				}
; 604  : 				else if (format[0] == ('x') || format[0] == ('X') ||
; 605  : 					format[0] == ('d') || format[0] == ('i') ||
; 606  : 					format[0] == ('u') || format[0] == ('o'))

  001bd	80 f9 78	 cmp	 cl, 120			; 00000078H
  001c0	74 19		 je	 SHORT $LN60@streamout
  001c2	80 f9 58	 cmp	 cl, 88			; 00000058H
  001c5	74 14		 je	 SHORT $LN60@streamout
  001c7	80 f9 64	 cmp	 cl, 100			; 00000064H
  001ca	74 0f		 je	 SHORT $LN60@streamout
  001cc	80 f9 69	 cmp	 cl, 105			; 00000069H
  001cf	74 0a		 je	 SHORT $LN60@streamout
  001d1	80 f9 75	 cmp	 cl, 117			; 00000075H
  001d4	74 05		 je	 SHORT $LN60@streamout
  001d6	80 f9 6f	 cmp	 cl, 111			; 0000006fH
  001d9	75 0b		 jne	 SHORT $LN79@streamout
$LN60@streamout:

; 607  : 				{
; 608  : 					flags |= FLAG_INTPTR;
; 609  : 				}
; 610  : 				else break;
; 611  : 			}
; 612  : 			else break;
; 613  : 			chr = *format++;

  001db	8a 06		 mov	 al, BYTE PTR [esi]
  001dd	46		 inc	 esi
  001de	88 45 f0	 mov	 BYTE PTR _chr$[ebp], al

; 614  : 		}
; 615  : 		while (USE_MULTISIZE);

  001e1	e9 5a ff ff ff	 jmp	 $LL81@streamout
$LN79@streamout:

; 616  : 
; 617  : 		/* Handle the format specifier */
; 618  : 		digits = digits_l;
; 619  : 		string = &buffer[BUFFER_SIZE];

  001e6	8d 4d c9	 lea	 ecx, DWORD PTR _buffer$[ebp+49]

; 620  : 		base = 10;
; 621  : 		prefix = 0;
; 622  : 		switch (chr)

  001e9	0f be c0	 movsx	 eax, al
  001ec	89 4d f8	 mov	 DWORD PTR _string$1$[ebp], ecx
  001ef	83 c0 bf	 add	 eax, -65		; ffffffbfH
  001f2	89 4d e0	 mov	 DWORD PTR _string$[ebp], ecx
  001f5	33 c9		 xor	 ecx, ecx
  001f7	89 75 10	 mov	 DWORD PTR _format$[ebp], esi
  001fa	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_l@?1??streamout@@9@9
  00201	c7 45 dc 0a 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], 10 ; 0000000aH
  00208	89 4d ec	 mov	 DWORD PTR _prefix$1$[ebp], ecx
  0020b	89 4d d0	 mov	 DWORD PTR _prefix$[ebp], ecx
  0020e	83 f8 37	 cmp	 eax, 55			; 00000037H
  00211	0f 87 28 04 00
	00		 ja	 $LN22@streamout
  00217	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN222@streamout[eax]
  0021e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN274@streamout[eax*4]
$LN55@streamout:

; 623  : 		{
; 624  : 		case ('n'):
; 625  : 			if (flags & FLAG_INT64)
; 626  : 				*va_arg(argptr, __int64*) = written_all;

  00225	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  00228	8b 7d fc	 mov	 edi, DWORD PTR _written_all$1$[ebp]
  0022b	83 c1 04	 add	 ecx, 4
  0022e	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00231	f7 c3 00 04 00
	00		 test	 ebx, 1024		; 00000400H
  00237	74 13		 je	 SHORT $LN54@streamout
  00239	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0023c	8b c7		 mov	 eax, edi
  0023e	99		 cdq
  0023f	89 01		 mov	 DWORD PTR [ecx], eax
  00241	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00244	8b 55 e4	 mov	 edx, DWORD PTR _written$4$[ebp]
  00247	e9 92 04 00 00	 jmp	 $LN163@streamout
$LN54@streamout:

; 627  : 			else if (flags & FLAG_SHORT)
; 628  : 				*va_arg(argptr, short*) = (short)written_all;

  0024c	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0024f	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  00255	74 08		 je	 SHORT $LN52@streamout
  00257	66 89 38	 mov	 WORD PTR [eax], di

; 629  : 			else

  0025a	e9 7f 04 00 00	 jmp	 $LN163@streamout
$LN52@streamout:

; 630  : 				*va_arg(argptr, int*) = written_all;

  0025f	89 38		 mov	 DWORD PTR [eax], edi

; 631  : 			continue;

  00261	e9 78 04 00 00	 jmp	 $LN163@streamout
$LN50@streamout:

; 632  : 
; 633  : 		case ('C'):
; 634  : 		case ('c'):
; 635  : 			string = buffer;
; 636  : 			len = 1;
; 637  : 
; 638  : 			/* Get character */
; 639  : 			uint32_t uChar = (uint32_t)va_arg(argptr, int);

  00266	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  00269	8d 45 98	 lea	 eax, DWORD PTR _buffer$[ebp]
  0026c	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
  0026f	83 c1 04	 add	 ecx, 4

; 640  : 			uint32_t uLen = 0;
; 641  : 
; 642  : 			/* Stream it out */
; 643  : 			StreamCharacterToUtf8(uChar, string, &uLen);

  00272	8d 45 d4	 lea	 eax, DWORD PTR _uLen$1[ebp]
  00275	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00278	50		 push	 eax
  00279	8d 45 98	 lea	 eax, DWORD PTR _buffer$[ebp]
  0027c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _uLen$1[ebp], 0
  00283	50		 push	 eax
  00284	ff 71 fc	 push	 DWORD PTR [ecx-4]
  00287	e8 00 00 00 00	 call	 _StreamCharacterToUtf8

; 644  : 
; 645  : 			/* Null terminate */
; 646  : 			((char*)string)[uLen] = (char)('\0');

  0028c	8b 7d d4	 mov	 edi, DWORD PTR _uLen$1[ebp]
  0028f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00292	c6 44 3d 98 00	 mov	 BYTE PTR _buffer$[ebp+edi], 0
$LN250@streamout:
  00297	8b 4d 0c	 mov	 ecx, DWORD PTR _precision$2$[ebp]
$LN131@streamout:

; 768  : 		}
; 769  : 
; 770  : 		/* Calculate padding */
; 771  : 		prefixlen = prefix ? strlen(prefix) : 0;

  0029a	33 d2		 xor	 edx, edx
$LN268@streamout:

; 772  : 		if (precision < 0) precision = 0;

  0029c	33 c0		 xor	 eax, eax
  0029e	89 55 d0	 mov	 DWORD PTR _prefixlen$1$[ebp], edx
  002a1	85 c9		 test	 ecx, ecx
  002a3	0f 48 c8	 cmovs	 ecx, eax

; 773  : 		padding = (int)(fieldwidth - len - prefixlen - precision);

  002a6	8b 45 f4	 mov	 eax, DWORD PTR _padding$2$[ebp]
  002a9	2b c2		 sub	 eax, edx
  002ab	89 4d 0c	 mov	 DWORD PTR _precision$2$[ebp], ecx
  002ae	2b c7		 sub	 eax, edi
  002b0	2b c1		 sub	 eax, ecx

; 774  : 		if (padding < 0) padding = 0;

  002b2	b9 00 00 00 00	 mov	 ecx, 0
  002b7	0f 48 c1	 cmovs	 eax, ecx
  002ba	89 45 f4	 mov	 DWORD PTR _padding$2$[ebp], eax

; 775  : 
; 776  : 		/* Optional left space padding */
; 777  : 		if ((flags & (FLAG_ALIGN_LEFT | FLAG_PAD_ZERO)) == 0)

  002bd	f6 c3 09	 test	 bl, 9
  002c0	75 2e		 jne	 SHORT $LN16@streamout

; 778  : 		{
; 779  : 			for (; padding > 0; padding--)

  002c2	85 c0		 test	 eax, eax
  002c4	7e 2a		 jle	 SHORT $LN16@streamout
$LL18@streamout:

; 780  : 			{
; 781  : 				if ((written = StreamOutCharacter(out, &cnt, (' '))) == 0) return -1;

  002c6	6a 20		 push	 32			; 00000020H
  002c8	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  002cb	50		 push	 eax
  002cc	ff 75 08	 push	 DWORD PTR _out$[ebp]
  002cf	e8 00 00 00 00	 call	 _StreamOutCharacter
  002d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d7	85 c0		 test	 eax, eax
  002d9	0f 84 18 04 00
	00		 je	 $LN152@streamout

; 782  : 				written_all += written;

  002df	01 45 fc	 add	 DWORD PTR _written_all$1$[ebp], eax
  002e2	8b 45 f4	 mov	 eax, DWORD PTR _padding$2$[ebp]
  002e5	48		 dec	 eax
  002e6	89 45 f4	 mov	 DWORD PTR _padding$2$[ebp], eax
  002e9	85 c0		 test	 eax, eax
  002eb	7f d9		 jg	 SHORT $LL18@streamout
  002ed	8b 55 d0	 mov	 edx, DWORD PTR _prefixlen$1$[ebp]
$LN16@streamout:

; 783  : 			}
; 784  : 		}
; 785  : 
; 786  : 		/* Optional prefix */
; 787  : 		if (prefix)

  002f0	8b 4d ec	 mov	 ecx, DWORD PTR _prefix$1$[ebp]
  002f3	85 c9		 test	 ecx, ecx
  002f5	74 1d		 je	 SHORT $LN14@streamout

; 788  : 		{
; 789  : 			written = streamout_string(out, &cnt, prefix, prefixlen);

  002f7	52		 push	 edx
  002f8	51		 push	 ecx
  002f9	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  002fc	50		 push	 eax
  002fd	ff 75 08	 push	 DWORD PTR _out$[ebp]
  00300	e8 00 00 00 00	 call	 _StreamOutString
  00305	83 c4 10	 add	 esp, 16			; 00000010H

; 790  : 			if (written == -1) return -1;

  00308	83 f8 ff	 cmp	 eax, -1
  0030b	0f 84 e6 03 00
	00		 je	 $LN152@streamout

; 791  : 			written_all += written;

  00311	01 45 fc	 add	 DWORD PTR _written_all$1$[ebp], eax
$LN14@streamout:

; 792  : 		}
; 793  : 
; 794  : 		/* Optional left '0' padding */
; 795  : 		if ((flags & FLAG_ALIGN_LEFT) == 0) precision += padding;

  00314	8b c3		 mov	 eax, ebx
  00316	83 e0 01	 and	 eax, 1
  00319	89 45 cc	 mov	 DWORD PTR tv725[ebp], eax
  0031c	8b 45 0c	 mov	 eax, DWORD PTR _precision$2$[ebp]
  0031f	75 03		 jne	 SHORT $LN143@streamout
  00321	03 45 f4	 add	 eax, DWORD PTR _padding$2$[ebp]
$LN143@streamout:

; 796  : 		while (precision-- > 0)

  00324	85 c0		 test	 eax, eax
  00326	7e 27		 jle	 SHORT $LN158@streamout
$LL11@streamout:
  00328	48		 dec	 eax
  00329	89 45 0c	 mov	 DWORD PTR _precision$2$[ebp], eax

; 797  : 		{
; 798  : 			if ((written = StreamOutCharacter(out, &cnt, ('0'))) == 0) return -1;

  0032c	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  0032f	6a 30		 push	 48			; 00000030H
  00331	50		 push	 eax
  00332	ff 75 08	 push	 DWORD PTR _out$[ebp]
  00335	e8 00 00 00 00	 call	 _StreamOutCharacter
  0033a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033d	85 c0		 test	 eax, eax
  0033f	0f 84 b2 03 00
	00		 je	 $LN152@streamout

; 799  : 			written_all += written;

  00345	01 45 fc	 add	 DWORD PTR _written_all$1$[ebp], eax
  00348	8b 45 0c	 mov	 eax, DWORD PTR _precision$2$[ebp]
  0034b	85 c0		 test	 eax, eax
  0034d	7f d9		 jg	 SHORT $LL11@streamout
$LN158@streamout:

; 800  : 		}
; 801  : 
; 802  : 		/* Output the string */
; 803  : 		if (flags & FLAG_WIDECHAR)
; 804  : 			written = StreamOutWString(out, &cnt, (wchar_t*)string, len);

  0034f	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  00352	57		 push	 edi
  00353	ff 75 f8	 push	 DWORD PTR _string$1$[ebp]
  00356	50		 push	 eax
  00357	ff 75 08	 push	 DWORD PTR _out$[ebp]
  0035a	f7 c3 00 02 00
	00		 test	 ebx, 512		; 00000200H
  00360	0f 84 79 02 00
	00		 je	 $LN8@streamout
  00366	e8 00 00 00 00	 call	 _StreamOutWString
  0036b	8b d0		 mov	 edx, eax
  0036d	89 55 e4	 mov	 DWORD PTR _written$4$[ebp], edx

; 805  : 		else

  00370	e9 74 02 00 00	 jmp	 $LN269@streamout
$LN49@streamout:

; 647  : 			len = (size_t)uLen;
; 648  : 			
; 649  : 			/* Done */
; 650  : 			break;
; 651  : 
; 652  : 		case ('Z'):
; 653  : 			nt_string = va_arg(argptr, void*);

  00375	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  00378	83 c1 04	 add	 ecx, 4
  0037b	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  0037e	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]

; 654  : 			if (nt_string && (string = nt_string->Buffer))

  00381	85 c9		 test	 ecx, ecx
  00383	74 52		 je	 SHORT $LN208@streamout
  00385	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00388	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
  0038b	85 c0		 test	 eax, eax
  0038d	74 48		 je	 SHORT $LN208@streamout

; 655  : 			{
; 656  : 				len = nt_string->Length;

  0038f	0f b7 39	 movzx	 edi, WORD PTR [ecx]

; 657  : 				if (flags & FLAG_WIDECHAR) len /= sizeof(wchar_t);

  00392	f7 c3 00 02 00
	00		 test	 ebx, 512		; 00000200H
  00398	0f 84 f9 fe ff
	ff		 je	 $LN250@streamout
  0039e	d1 ef		 shr	 edi, 1

; 658  : 				break;

  003a0	e9 f2 fe ff ff	 jmp	 $LN250@streamout
$LN46@streamout:

; 659  : 			}
; 660  : 			string = 0;
; 661  : 			goto case_string;
; 662  : 
; 663  : 		case ('S'):
; 664  : 			string = va_arg(argptr, void*);

  003a5	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  003a8	83 c1 04	 add	 ecx, 4
  003ab	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  003ae	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  003b1	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax

; 665  : 			if (!(flags & FLAG_SHORT)) flags |= FLAG_WIDECHAR;

  003b4	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  003ba	75 17		 jne	 SHORT $case_string$275
  003bc	81 cb 00 02 00
	00		 or	 ebx, 512		; 00000200H

; 666  : 			goto case_string;

  003c2	eb 0f		 jmp	 SHORT $case_string$275
$LN44@streamout:

; 667  : 
; 668  : 		case ('s'):
; 669  : 			string = va_arg(argptr, void*);

  003c4	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  003c7	83 c1 04	 add	 ecx, 4
  003ca	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  003cd	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  003d0	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
$case_string$275:

; 670  : 
; 671  : case_string:
; 672  : 			if (!string)

  003d3	85 c0		 test	 eax, eax
  003d5	75 0e		 jne	 SHORT $LN43@streamout
$LN208@streamout:

; 673  : 			{
; 674  : 				string = (char*)_nullstring;

  003d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_nullstring@?1??streamout@@9@9

; 675  : 				flags &= ~FLAG_WIDECHAR;

  003dc	81 e3 ff fd ff
	ff		 and	 ebx, -513		; fffffdffH
  003e2	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
$LN43@streamout:

; 676  : 			}
; 677  : 
; 678  :  			if (flags & FLAG_WIDECHAR)

  003e5	f7 c3 00 02 00
	00		 test	 ebx, 512		; 00000200H
  003eb	74 13		 je	 SHORT $LN42@streamout

; 679  :  				len = wcsnlen((wchar_t*)string, (unsigned)precision);

  003ed	57		 push	 edi
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 _wcsnlen
  003f4	83 c4 08	 add	 esp, 8
  003f7	8b f8		 mov	 edi, eax

; 682  : 			precision = 0;

  003f9	33 c9		 xor	 ecx, ecx

; 683  : 			break;

  003fb	e9 9a fe ff ff	 jmp	 $LN131@streamout
$LN42@streamout:

; 680  :  			else
; 681  : 				len = strlen((char*)string);

  00400	8b f8		 mov	 edi, eax
  00402	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL223@streamout:
  00405	8a 07		 mov	 al, BYTE PTR [edi]
  00407	47		 inc	 edi
  00408	84 c0		 test	 al, al
  0040a	75 f9		 jne	 SHORT $LL223@streamout
  0040c	2b f9		 sub	 edi, ecx

; 682  : 			precision = 0;

  0040e	33 c9		 xor	 ecx, ecx

; 683  : 			break;

  00410	e9 85 fe ff ff	 jmp	 $LN131@streamout
$LN40@streamout:

; 684  : 
; 685  : 		case ('G'):
; 686  : 		case ('E'):
; 687  : 		case ('A'):
; 688  : 		case ('g'):
; 689  : 		case ('e'):
; 690  : 		case ('a'):
; 691  : 		case ('f'):
; 692  : #ifdef _UNICODE
; 693  : 			flags |= FLAG_WIDECHAR;
; 694  : #else
; 695  : 			flags &= ~FLAG_WIDECHAR;
; 696  : #endif
; 697  : 			/* Use external function, one for kernel one for user mode */
; 698  : 			format_float(chr, flags, precision, &string, &prefix, &argptr);

  00415	8d 45 14	 lea	 eax, DWORD PTR _argptr$[ebp]
  00418	81 e3 ff fd ff
	ff		 and	 ebx, -513		; fffffdffH
  0041e	50		 push	 eax
  0041f	8d 45 d0	 lea	 eax, DWORD PTR _prefix$[ebp]
  00422	50		 push	 eax
  00423	8d 45 e0	 lea	 eax, DWORD PTR _string$[ebp]
  00426	50		 push	 eax
  00427	57		 push	 edi
  00428	53		 push	 ebx
  00429	ff 75 f0	 push	 DWORD PTR _chr$[ebp]
  0042c	e8 00 00 00 00	 call	 _format_float

; 699  : 			len = strlen(string);

  00431	8b 45 e0	 mov	 eax, DWORD PTR _string$[ebp]
  00434	83 c4 18	 add	 esp, 24			; 00000018H
  00437	8b f8		 mov	 edi, eax
  00439	89 45 f8	 mov	 DWORD PTR _string$1$[ebp], eax
  0043c	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0043f	90		 npad	 1
$LL224@streamout:
  00440	8a 07		 mov	 al, BYTE PTR [edi]
  00442	47		 inc	 edi
  00443	84 c0		 test	 al, al
  00445	75 f9		 jne	 SHORT $LL224@streamout

; 700  : 			precision = 0;
; 701  : 			break;

  00447	8b 45 d0	 mov	 eax, DWORD PTR _prefix$[ebp]
  0044a	2b f9		 sub	 edi, ecx
  0044c	33 c9		 xor	 ecx, ecx
  0044e	89 45 ec	 mov	 DWORD PTR _prefix$1$[ebp], eax
  00451	e9 69 01 00 00	 jmp	 $LN56@streamout
$LN39@streamout:

; 702  : 
; 703  : 		case ('d'):
; 704  : 		case ('i'):
; 705  : 			val64 = (__int64)va_arg_f(argptr, flags);

  00456	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  00459	f7 c3 00 04 00
	00		 test	 ebx, 1024		; 00000400H
  0045f	74 0d		 je	 SHORT $LN125@streamout
  00461	8b 01		 mov	 eax, DWORD PTR [ecx]
  00463	83 c1 08	 add	 ecx, 8
  00466	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00469	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0046c	eb 18		 jmp	 SHORT $LN265@streamout
$LN125@streamout:
  0046e	83 c1 04	 add	 ecx, 4
  00471	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00474	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  0047a	74 06		 je	 SHORT $LN123@streamout
  0047c	0f bf 41 fc	 movsx	 eax, WORD PTR [ecx-4]
  00480	eb 03		 jmp	 SHORT $LN124@streamout
$LN123@streamout:
  00482	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
$LN124@streamout:
  00485	99		 cdq
$LN265@streamout:
  00486	89 55 e0	 mov	 DWORD PTR _val64$2$[ebp], edx
  00489	89 45 e4	 mov	 DWORD PTR _val64$1$[ebp], eax

; 706  : 
; 707  : 			if ((__int64)val64 < 0)

  0048c	85 d2		 test	 edx, edx
  0048e	7f 19		 jg	 SHORT $LN38@streamout
  00490	7c 04		 jl	 SHORT $LN225@streamout
  00492	85 c0		 test	 eax, eax
  00494	73 13		 jae	 SHORT $LN38@streamout
$LN225@streamout:

; 708  : 			{
; 709  : 				val64 = -(__int64)val64;

  00496	f7 d8		 neg	 eax

; 710  : 				prefix = ("-");

  00498	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _prefix$1$[ebp], OFFSET $SG2981
  0049f	83 d2 00	 adc	 edx, 0
  004a2	f7 da		 neg	 edx
  004a4	e9 97 00 00 00	 jmp	 $LN272@streamout
$LN38@streamout:

; 711  : 			}
; 712  : 			else if (flags & FLAG_FORCE_SIGN)

  004a9	f6 c3 02	 test	 bl, 2
  004ac	74 0d		 je	 SHORT $LN36@streamout

; 713  : 				prefix = ("+");

  004ae	b9 00 00 00 00	 mov	 ecx, OFFSET $SG2984
  004b3	89 4d ec	 mov	 DWORD PTR _prefix$1$[ebp], ecx
  004b6	e9 8b 00 00 00	 jmp	 $case_number$276
$LN36@streamout:

; 714  : 			else if (flags & FLAG_FORCE_SIGNSP)

  004bb	f6 c3 04	 test	 bl, 4
  004be	0f 84 82 00 00
	00		 je	 $case_number$276

; 715  : 				prefix = (" ");

  004c4	b9 00 00 00 00	 mov	 ecx, OFFSET $SG2987
  004c9	89 4d ec	 mov	 DWORD PTR _prefix$1$[ebp], ecx

; 716  : 
; 717  : 			goto case_number;

  004cc	eb 78		 jmp	 SHORT $case_number$276
$LN33@streamout:

; 718  : 
; 719  : 		case ('o'):
; 720  : 			base = 8;

  004ce	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], 8

; 721  : 			if (flags & FLAG_SPECIAL)

  004d5	f6 c3 10	 test	 bl, 16			; 00000010H
  004d8	74 35		 je	 SHORT $case_unsigned$277

; 722  : 			{
; 723  : 				prefix = ("0");

  004da	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _prefix$1$[ebp], OFFSET $SG2991

; 724  : 				if (precision > 0) precision--;

  004e1	85 ff		 test	 edi, edi
  004e3	7e 2a		 jle	 SHORT $case_unsigned$277
  004e5	4f		 dec	 edi

; 725  : 			}
; 726  : 			goto case_unsigned;

  004e6	eb 27		 jmp	 SHORT $case_unsigned$277
$LN30@streamout:

; 727  : 
; 728  : 		case ('p'):
; 729  : 			precision = 2 * sizeof(void*);

  004e8	bf 08 00 00 00	 mov	 edi, 8

; 730  : 			flags &= ~FLAG_PAD_ZERO;

  004ed	83 e3 f7	 and	 ebx, -9			; fffffff7H
$LN29@streamout:

; 731  : 			flags |= FLAG_INTPTR;
; 732  : 			/* Fall through */
; 733  : 
; 734  : 		case ('X'):
; 735  : 			digits = digits_u;

  004f0	b8 00 00 00 00	 mov	 eax, OFFSET ?digits_u@?1??streamout@@9@9
  004f5	89 45 d4	 mov	 DWORD PTR _digits$1$[ebp], eax
  004f8	eb 03		 jmp	 SHORT $LN28@streamout
$LN253@streamout:
  004fa	8b 45 d4	 mov	 eax, DWORD PTR _digits$1$[ebp]
$LN28@streamout:

; 736  : 			/* Fall through */
; 737  : 
; 738  : 		case ('x'):
; 739  : 			base = 16;

  004fd	c7 45 dc 10 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], 16 ; 00000010H

; 740  : 			if (flags & FLAG_SPECIAL)

  00504	f6 c3 10	 test	 bl, 16			; 00000010H
  00507	74 06		 je	 SHORT $case_unsigned$277

; 741  : 			{
; 742  : 				prefix = &digits[16];

  00509	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  0050c	89 4d ec	 mov	 DWORD PTR _prefix$1$[ebp], ecx
$case_unsigned$277:

; 743  : 			}
; 744  : 
; 745  : 		case ('u'):
; 746  : case_unsigned:
; 747  : 			val64 = va_arg_fu(argptr, flags);

  0050f	8b 4d 14	 mov	 ecx, DWORD PTR _argptr$[ebp]
  00512	f7 c3 00 04 00
	00		 test	 ebx, 1024		; 00000400H
  00518	74 0d		 je	 SHORT $LN129@streamout
  0051a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0051c	83 c1 08	 add	 ecx, 8
  0051f	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  00522	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00525	eb 19		 jmp	 SHORT $LN272@streamout
$LN129@streamout:
  00527	83 c1 04	 add	 ecx, 4
  0052a	89 4d 14	 mov	 DWORD PTR _argptr$[ebp], ecx
  0052d	f7 c3 00 01 00
	00		 test	 ebx, 256		; 00000100H
  00533	74 06		 je	 SHORT $LN127@streamout
  00535	0f b7 41 fc	 movzx	 eax, WORD PTR [ecx-4]
  00539	eb 03		 jmp	 SHORT $LN267@streamout
$LN127@streamout:
  0053b	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
$LN267@streamout:
  0053e	33 d2		 xor	 edx, edx
$LN272@streamout:
  00540	89 45 e4	 mov	 DWORD PTR _val64$1$[ebp], eax
  00543	89 55 e0	 mov	 DWORD PTR _val64$2$[ebp], edx
$case_number$276:

; 748  : 
; 749  : case_number:
; 750  : 			flags &= ~FLAG_WIDECHAR;

  00546	81 e3 ff fd ff
	ff		 and	 ebx, -513		; fffffdffH

; 751  : 			if (precision < 0) precision = 1;

  0054c	b9 01 00 00 00	 mov	 ecx, 1
  00551	85 ff		 test	 edi, edi
  00553	89 5d cc	 mov	 DWORD PTR _flags$1$[ebp], ebx
  00556	0f 48 f9	 cmovs	 edi, ecx

; 752  : 
; 753  : 			/* Gather digits in reverse order */
; 754  : 			while (val64)

  00559	0b c2		 or	 eax, edx
  0055b	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi
  0055e	74 47		 je	 SHORT $LN23@streamout
  00560	8b 45 dc	 mov	 eax, DWORD PTR _base$1$[ebp]
  00563	8b 75 f8	 mov	 esi, DWORD PTR _string$1$[ebp]
  00566	8b 5d e4	 mov	 ebx, DWORD PTR _val64$1$[ebp]
  00569	99		 cdq
  0056a	8b c8		 mov	 ecx, eax
  0056c	8b c2		 mov	 eax, edx
  0056e	8b 55 e0	 mov	 edx, DWORD PTR _val64$2$[ebp]
  00571	89 4d d0	 mov	 DWORD PTR tv658[ebp], ecx
  00574	89 45 0c	 mov	 DWORD PTR tv657[ebp], eax
$LL24@streamout:

; 755  : 			{
; 756  : 				*--string = digits[val64 % base];

  00577	50		 push	 eax
  00578	51		 push	 ecx
  00579	52		 push	 edx
  0057a	53		 push	 ebx
  0057b	4e		 dec	 esi
  0057c	e8 00 00 00 00	 call	 __aulldvrm
  00581	89 5d dc	 mov	 DWORD PTR tv599[ebp+4], ebx

; 757  : 				val64 /= base;
; 758  : 				precision--;

  00584	4f		 dec	 edi
  00585	8b d8		 mov	 ebx, eax
  00587	8b 45 d4	 mov	 eax, DWORD PTR _digits$1$[ebp]
  0058a	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]
  0058d	8b 4d d0	 mov	 ecx, DWORD PTR tv658[ebp]
  00590	88 06		 mov	 BYTE PTR [esi], al
  00592	8b c3		 mov	 eax, ebx
  00594	0b c2		 or	 eax, edx
  00596	8b 45 0c	 mov	 eax, DWORD PTR tv657[ebp]
  00599	75 dc		 jne	 SHORT $LL24@streamout
  0059b	8b 5d cc	 mov	 ebx, DWORD PTR _flags$1$[ebp]
  0059e	89 75 f8	 mov	 DWORD PTR _string$1$[ebp], esi
  005a1	8b 75 10	 mov	 esi, DWORD PTR _format$[ebp]
  005a4	89 7d 0c	 mov	 DWORD PTR _precision$2$[ebp], edi
$LN23@streamout:

; 759  : 			}
; 760  : 
; 761  : 			len = strlen(string);

  005a7	8b 7d f8	 mov	 edi, DWORD PTR _string$1$[ebp]
  005aa	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  005ad	8d 49 00	 npad	 3
$LL226@streamout:
  005b0	8a 07		 mov	 al, BYTE PTR [edi]
  005b2	47		 inc	 edi
  005b3	84 c0		 test	 al, al
  005b5	75 f9		 jne	 SHORT $LL226@streamout
  005b7	8b 45 ec	 mov	 eax, DWORD PTR _prefix$1$[ebp]
  005ba	2b f9		 sub	 edi, ecx
  005bc	8b 4d 0c	 mov	 ecx, DWORD PTR _precision$2$[ebp]
$LN56@streamout:

; 768  : 		}
; 769  : 
; 770  : 		/* Calculate padding */
; 771  : 		prefixlen = prefix ? strlen(prefix) : 0;

  005bf	85 c0		 test	 eax, eax
  005c1	0f 84 d3 fc ff
	ff		 je	 $LN131@streamout
  005c7	8b d0		 mov	 edx, eax
  005c9	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  005cc	89 45 0c	 mov	 DWORD PTR tv723[ebp], eax
  005cf	90		 npad	 1
$LL227@streamout:
  005d0	8a 02		 mov	 al, BYTE PTR [edx]
  005d2	42		 inc	 edx
  005d3	84 c0		 test	 al, al
  005d5	75 f9		 jne	 SHORT $LL227@streamout
  005d7	2b 55 0c	 sub	 edx, DWORD PTR tv723[ebp]
  005da	e9 bd fc ff ff	 jmp	 $LN268@streamout
$LN8@streamout:

; 806  : 			written = StreamOutString(out, &cnt, (char*)string, len);

  005df	e8 00 00 00 00	 call	 _StreamOutString
  005e4	8b d0		 mov	 edx, eax
  005e6	89 45 e4	 mov	 DWORD PTR _written$4$[ebp], eax
$LN269@streamout:
  005e9	83 c4 10	 add	 esp, 16			; 00000010H

; 807  : 		if (written == -1) return -1;

  005ec	83 fa ff	 cmp	 edx, -1
  005ef	0f 84 02 01 00
	00		 je	 $LN152@streamout

; 808  : 		written_all += written;

  005f5	8b 7d fc	 mov	 edi, DWORD PTR _written_all$1$[ebp]
  005f8	03 fa		 add	 edi, edx

; 809  : 
; 810  : #if 0 && SUPPORT_FLOAT
; 811  : 		/* Optional right '0' padding */
; 812  : 		while (precision-- > 0)
; 813  : 		{
; 814  : 			if ((written = StreamOutCharacter(out, &cnt, ('0'))) == 0) return -1;
; 815  : 			written_all += written;
; 816  : 			len++;
; 817  : 		}
; 818  : #endif
; 819  : 
; 820  : 		/* Optional right padding */
; 821  : 		if (flags & FLAG_ALIGN_LEFT)

  005fa	83 7d cc 00	 cmp	 DWORD PTR tv725[ebp], 0
  005fe	89 7d fc	 mov	 DWORD PTR _written_all$1$[ebp], edi
  00601	0f 84 d7 00 00
	00		 je	 $LN163@streamout

; 822  : 		{
; 823  : 			while (padding-- > 0)

  00607	8b 5d f4	 mov	 ebx, DWORD PTR _padding$2$[ebp]
  0060a	85 db		 test	 ebx, ebx
  0060c	0f 8e cc 00 00
	00		 jle	 $LN163@streamout
$LL4@streamout:

; 824  : 			{
; 825  : 				if ((written = StreamOutCharacter(out, &cnt, (' '))) == 0) return -1;

  00612	6a 20		 push	 32			; 00000020H
  00614	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  00617	4b		 dec	 ebx
  00618	50		 push	 eax
  00619	ff 75 08	 push	 DWORD PTR _out$[ebp]
  0061c	e8 00 00 00 00	 call	 _StreamOutCharacter
  00621	8b d0		 mov	 edx, eax
  00623	83 c4 0c	 add	 esp, 12			; 0000000cH
  00626	89 55 e4	 mov	 DWORD PTR _written$4$[ebp], edx
  00629	85 d2		 test	 edx, edx
  0062b	0f 84 c6 00 00
	00		 je	 $LN152@streamout

; 826  : 				written_all += written;

  00631	03 fa		 add	 edi, edx
  00633	89 7d fc	 mov	 DWORD PTR _written_all$1$[ebp], edi
  00636	85 db		 test	 ebx, ebx
  00638	7f d8		 jg	 SHORT $LL4@streamout

; 827  : 			}
; 828  : 		}
; 829  : 
; 830  : 	}

  0063a	e9 9f 00 00 00	 jmp	 $LN163@streamout
$LN22@streamout:

; 762  : 			break;
; 763  : 
; 764  : 		default:
; 765  : 			/* Treat anything else as a new character */
; 766  : 			format--;
; 767  : 			continue;

  0063f	8b 7d fc	 mov	 edi, DWORD PTR _written_all$1$[ebp]
  00642	4e		 dec	 esi
  00643	e9 96 00 00 00	 jmp	 $LN163@streamout
$LN116@streamout:

; 472  : 		{
; 473  : 			/* Sanity */
; 474  : 			if (IsUTF8(chr))

  00648	8a c8		 mov	 cl, al
  0064a	80 e1 c0	 and	 cl, 192			; 000000c0H
  0064d	80 f9 80	 cmp	 cl, 128			; 00000080H
  00650	75 6d		 jne	 SHORT $LN115@streamout

; 475  : 			{
; 476  : 				/* Build UTF-8 */
; 477  : 				uint32_t uChar = (uint32_t)chr;
; 478  : 				uint32_t Size = 0;
; 479  : 
; 480  : 				/* Iterate */
; 481  : 				while (*format && IsUTF8(*format))

  00652	8a 16		 mov	 dl, BYTE PTR [esi]
  00654	33 db		 xor	 ebx, ebx
  00656	0f be c8	 movsx	 ecx, al
  00659	84 d2		 test	 dl, dl
  0065b	74 1b		 je	 SHORT $LN249@streamout
  0065d	8d 49 00	 npad	 3
$LL114@streamout:
  00660	8a c2		 mov	 al, dl
  00662	24 c0		 and	 al, 192			; 000000c0H
  00664	3c 80		 cmp	 al, 128			; 00000080H
  00666	75 10		 jne	 SHORT $LN249@streamout

; 482  : 				{
; 483  : 					/* Move */
; 484  : 					uChar <<= 6;
; 485  : 
; 486  : 					/* Add */
; 487  : 					uChar += (unsigned char)*format;
; 488  : 
; 489  : 					/* Inc */
; 490  : 					Size++;
; 491  : 					format++;

  00668	46		 inc	 esi
  00669	c1 e1 06	 shl	 ecx, 6
  0066c	0f b6 c2	 movzx	 eax, dl
  0066f	43		 inc	 ebx
  00670	03 c8		 add	 ecx, eax
  00672	8a 16		 mov	 dl, BYTE PTR [esi]
  00674	84 d2		 test	 dl, dl
  00676	75 e8		 jne	 SHORT $LL114@streamout
$LN249@streamout:

; 492  : 				}
; 493  : 
; 494  : 				/* Move */
; 495  : 				uChar <<= 6;

  00678	c1 e1 06	 shl	 ecx, 6

; 496  : 
; 497  : 				/* Add the last byte */
; 498  : 				if (Size == 1)

  0067b	83 fb 01	 cmp	 ebx, 1
  0067e	75 08		 jne	 SHORT $LN112@streamout

; 499  : 					uChar |= (((unsigned char)*format) & 0x1F);

  00680	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00683	83 e0 1f	 and	 eax, 31			; 0000001fH
  00686	eb 18		 jmp	 SHORT $LN270@streamout
$LN112@streamout:

; 500  : 				else if (Size == 2)

  00688	83 fb 02	 cmp	 ebx, 2
  0068b	75 08		 jne	 SHORT $LN110@streamout

; 501  : 					uChar |= (((unsigned char)*format) & 0xF);

  0068d	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00690	83 e0 0f	 and	 eax, 15			; 0000000fH
  00693	eb 0b		 jmp	 SHORT $LN270@streamout
$LN110@streamout:

; 502  : 				else if (Size == 3)

  00695	83 fb 03	 cmp	 ebx, 3
  00698	75 08		 jne	 SHORT $LN108@streamout

; 503  : 					uChar |= (((unsigned char)*format) & 0x7);

  0069a	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0069d	83 e0 07	 and	 eax, 7
$LN270@streamout:
  006a0	0b c8		 or	 ecx, eax
$LN108@streamout:

; 504  : 
; 505  : 				/* Write the character to the stream */
; 506  : 				if ((written = StreamOutCharacter(out, &cnt, uChar)) == 0)

  006a2	8b 5d 08	 mov	 ebx, DWORD PTR _out$[ebp]
  006a5	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  006a8	51		 push	 ecx
  006a9	50		 push	 eax
  006aa	53		 push	 ebx
  006ab	e8 00 00 00 00	 call	 _StreamOutCharacter
  006b0	8b d0		 mov	 edx, eax
  006b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  006b5	89 55 e4	 mov	 DWORD PTR _written$4$[ebp], edx
  006b8	85 d2		 test	 edx, edx
  006ba	74 3b		 je	 SHORT $LN152@streamout

; 508  : 
; 509  : 				/* Skip */
; 510  : 				format++;

  006bc	46		 inc	 esi

; 511  : 			}
; 512  : 			else

  006bd	eb 1a		 jmp	 SHORT $LN105@streamout
$LN115@streamout:

; 513  : 			{
; 514  : 				/* Write the character to the stream */
; 515  : 				if ((written = StreamOutCharacter(out, &cnt, (uint32_t)chr)) == 0)

  006bf	0f be c0	 movsx	 eax, al
  006c2	50		 push	 eax
  006c3	8d 45 e8	 lea	 eax, DWORD PTR _cnt$[ebp]
  006c6	50		 push	 eax
  006c7	53		 push	 ebx
  006c8	e8 00 00 00 00	 call	 _StreamOutCharacter
  006cd	8b d0		 mov	 edx, eax
  006cf	89 45 e4	 mov	 DWORD PTR _written$4$[ebp], eax
  006d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  006d5	85 d2		 test	 edx, edx
  006d7	74 1e		 je	 SHORT $LN152@streamout
$LN105@streamout:

; 516  : 					return -1;
; 517  : 			}
; 518  : 
; 519  : 			/* Done */
; 520  : 			written_all += written;

  006d9	03 fa		 add	 edi, edx
  006db	89 7d fc	 mov	 DWORD PTR _written_all$1$[ebp], edi
$LN163@streamout:

; 458  : 
; 459  : 	/* Iterate String */
; 460  : 	while (written >= 0)

  006de	85 d2		 test	 edx, edx
  006e0	0f 89 3d f9 ff
	ff		 jns	 $LN271@streamout
$LN119@streamout:

; 831  : 
; 832  : 	if (written == -1) return -1;

  006e6	83 c8 ff	 or	 eax, -1
  006e9	3b d0		 cmp	 edx, eax
  006eb	0f 44 f8	 cmove	 edi, eax
  006ee	8b c7		 mov	 eax, edi
  006f0	5f		 pop	 edi
  006f1	5e		 pop	 esi
  006f2	5b		 pop	 ebx

; 833  : 
; 834  : 	return written_all;
; 835  : }

  006f3	8b e5		 mov	 esp, ebp
  006f5	5d		 pop	 ebp
  006f6	c3		 ret	 0
$LN152@streamout:
  006f7	5f		 pop	 edi
  006f8	5e		 pop	 esi

; 507  : 					return -1;

  006f9	83 c8 ff	 or	 eax, -1
  006fc	5b		 pop	 ebx

; 833  : 
; 834  : 	return written_all;
; 835  : }

  006fd	8b e5		 mov	 esp, ebp
  006ff	5d		 pop	 ebp
  00700	c3		 ret	 0
  00701	8d 49 00	 npad	 3
$LN274@streamout:
  00704	00 00 00 00	 DD	 $LN40@streamout
  00708	00 00 00 00	 DD	 $LN50@streamout
  0070c	00 00 00 00	 DD	 $LN46@streamout
  00710	00 00 00 00	 DD	 $LN29@streamout
  00714	00 00 00 00	 DD	 $LN49@streamout
  00718	00 00 00 00	 DD	 $LN39@streamout
  0071c	00 00 00 00	 DD	 $LN55@streamout
  00720	00 00 00 00	 DD	 $LN33@streamout
  00724	00 00 00 00	 DD	 $LN30@streamout
  00728	00 00 00 00	 DD	 $LN44@streamout
  0072c	00 00 00 00	 DD	 $case_unsigned$277
  00730	00 00 00 00	 DD	 $LN253@streamout
  00734	00 00 00 00	 DD	 $LN22@streamout
$LN222@streamout:
  00738	00		 DB	 0
  00739	0c		 DB	 12			; 0000000cH
  0073a	01		 DB	 1
  0073b	0c		 DB	 12			; 0000000cH
  0073c	00		 DB	 0
  0073d	0c		 DB	 12			; 0000000cH
  0073e	00		 DB	 0
  0073f	0c		 DB	 12			; 0000000cH
  00740	0c		 DB	 12			; 0000000cH
  00741	0c		 DB	 12			; 0000000cH
  00742	0c		 DB	 12			; 0000000cH
  00743	0c		 DB	 12			; 0000000cH
  00744	0c		 DB	 12			; 0000000cH
  00745	0c		 DB	 12			; 0000000cH
  00746	0c		 DB	 12			; 0000000cH
  00747	0c		 DB	 12			; 0000000cH
  00748	0c		 DB	 12			; 0000000cH
  00749	0c		 DB	 12			; 0000000cH
  0074a	02		 DB	 2
  0074b	0c		 DB	 12			; 0000000cH
  0074c	0c		 DB	 12			; 0000000cH
  0074d	0c		 DB	 12			; 0000000cH
  0074e	0c		 DB	 12			; 0000000cH
  0074f	03		 DB	 3
  00750	0c		 DB	 12			; 0000000cH
  00751	04		 DB	 4
  00752	0c		 DB	 12			; 0000000cH
  00753	0c		 DB	 12			; 0000000cH
  00754	0c		 DB	 12			; 0000000cH
  00755	0c		 DB	 12			; 0000000cH
  00756	0c		 DB	 12			; 0000000cH
  00757	0c		 DB	 12			; 0000000cH
  00758	00		 DB	 0
  00759	0c		 DB	 12			; 0000000cH
  0075a	01		 DB	 1
  0075b	05		 DB	 5
  0075c	00		 DB	 0
  0075d	00		 DB	 0
  0075e	00		 DB	 0
  0075f	0c		 DB	 12			; 0000000cH
  00760	05		 DB	 5
  00761	0c		 DB	 12			; 0000000cH
  00762	0c		 DB	 12			; 0000000cH
  00763	0c		 DB	 12			; 0000000cH
  00764	0c		 DB	 12			; 0000000cH
  00765	06		 DB	 6
  00766	07		 DB	 7
  00767	08		 DB	 8
  00768	0c		 DB	 12			; 0000000cH
  00769	0c		 DB	 12			; 0000000cH
  0076a	09		 DB	 9
  0076b	0c		 DB	 12			; 0000000cH
  0076c	0a		 DB	 10			; 0000000aH
  0076d	0c		 DB	 12			; 0000000cH
  0076e	0c		 DB	 12			; 0000000cH
  0076f	0b		 DB	 11			; 0000000bH
_streamout ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _format_float
_TEXT	SEGMENT
tv570 = -44						; size = 8
tv516 = -44						; size = 8
tv490 = -44						; size = 8
tv366 = -44						; size = 8
tv578 = -36						; size = 8
_fpval$1$ = -28						; size = 8
_padding$1$ = -20					; size = 4
_fpval2$1$ = -16					; size = 8
tv535 = -16						; size = 8
tv85 = -16						; size = 8
_fpval2$ = -16						; size = 8
_sign$1$ = -12						; size = 4
_exponent$1$ = -8					; size = 4
_digits$1$ = -4						; size = 4
_num_digits$2$ = 8					; size = 4
_val32$1$ = 8						; size = 4
_chr$ = 8						; size = 1
_flags$ = 12						; size = 4
_precision$ = 16					; size = 4
_num_digits$1$ = 20					; size = 4
_string$ = 20						; size = 4
_prefix$ = 24						; size = 4
_argptr$ = 28						; size = 4
_format_float PROC					; COMDAT

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi

; 302  : 	static const char digits_l[] = ("0123456789abcdef0x");
; 303  : 	static const char digits_u[] = ("0123456789ABCDEF0X");
; 304  : 	static const char _nan[] = ("#QNAN");
; 305  : 	static const char _infinity[] = ("#INF");
; 306  : 	const char *digits = digits_l;
; 307  : 	int exponent = 0, sign;
; 308  : 	long double fpval, fpval2;
; 309  : 	int padding = 0, num_digits, val32, base = 10;

  00007	33 f6		 xor	 esi, esi
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_l@?1??format_float@@9@9
  00010	89 75 ec	 mov	 DWORD PTR _padding$1$[ebp], esi

; 310  : 
; 311  : 	/* Normalize the precision */
; 312  : 	if (precision < 0) precision = 6;

  00013	8b 75 10	 mov	 esi, DWORD PTR _precision$[ebp]
  00016	57		 push	 edi
  00017	85 f6		 test	 esi, esi
  00019	79 07		 jns	 SHORT $LN37@format_flo
  0001b	be 06 00 00 00	 mov	 esi, 6
  00020	eb 10		 jmp	 SHORT $LN84@format_flo
$LN37@format_flo:

; 313  : 	else if (precision > 17)

  00022	83 fe 11	 cmp	 esi, 17			; 00000011H
  00025	7e 0e		 jle	 SHORT $LN35@format_flo

; 314  : 	{
; 315  : 		padding = precision - 17;

  00027	83 c6 ef	 add	 esi, -17		; ffffffefH
  0002a	89 75 ec	 mov	 DWORD PTR _padding$1$[ebp], esi

; 316  : 		precision = 17;

  0002d	be 11 00 00 00	 mov	 esi, 17			; 00000011H
$LN84@format_flo:
  00032	89 75 10	 mov	 DWORD PTR _precision$[ebp], esi
$LN35@format_flo:

; 317  : 	}
; 318  : 
; 319  : 	/* Get the float value and calculate the exponent */
; 320  : 	fpval = va_arg_ffp(*argptr, flags);

  00035	8b 45 1c	 mov	 eax, DWORD PTR _argptr$[ebp]
  00038	0f 57 c9	 xorps	 xmm1, xmm1
  0003b	83 00 08	 add	 DWORD PTR [eax], 8
  0003e	8b 00		 mov	 eax, DWORD PTR [eax]
  00040	f2 0f 10 40 f8	 movsd	 xmm0, QWORD PTR [eax-8]

; 321  : 	exponent = get_exp((double)fpval);

  00045	66 0f 2e c1	 ucomisd xmm0, xmm1
  00049	f2 0f 11 45 e4	 movsd	 QWORD PTR _fpval$1$[ebp], xmm0
  0004e	9f		 lahf
  0004f	f6 c4 44	 test	 ah, 68			; 00000044H
  00052	7a 07		 jp	 SHORT $LN44@format_flo
  00054	f2 0f 11 4d f0	 movsd	 QWORD PTR tv85[ebp], xmm1
  00059	eb 18		 jmp	 SHORT $LN43@format_flo
$LN44@format_flo:
  0005b	66 0f 2f c1	 comisd	 xmm0, xmm1
  0005f	73 08		 jae	 SHORT $LN85@format_flo
  00061	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
$LN85@format_flo:
  00069	e8 00 00 00 00	 call	 __libm_sse2_log10_precise
  0006e	f2 0f 11 45 f0	 movsd	 QWORD PTR tv85[ebp], xmm0
$LN43@format_flo:
  00073	dd 45 f0	 fld	 QWORD PTR tv85[ebp]
  00076	83 ec 08	 sub	 esp, 8
  00079	dd 1c 24	 fstp	 QWORD PTR [esp]
  0007c	e8 00 00 00 00	 call	 _floor

; 322  : 	sign = fpval < 0 ? -1 : 1;

  00081	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _fpval$1$[ebp]
  00086	33 d2		 xor	 edx, edx

; 323  : 
; 324  : 	switch (chr)

  00088	8b 45 08	 mov	 eax, DWORD PTR _chr$[ebp]
  0008b	83 c4 08	 add	 esp, 8
  0008e	8b 7d 14	 mov	 edi, DWORD PTR _string$[ebp]
  00091	0f 57 c9	 xorps	 xmm1, xmm1
  00094	66 0f 2f c8	 comisd	 xmm1, xmm0
  00098	0f be c0	 movsx	 eax, al
  0009b	dd 5d dc	 fstp	 QWORD PTR tv578[ebp]
  0009e	f2 0f 2c 4d dc	 cvttsd2si ecx, QWORD PTR tv578[ebp]
  000a3	0f 96 c2	 setbe	 dl
  000a6	83 c0 bf	 add	 eax, -65		; ffffffbfH
  000a9	8d 14 55 ff ff
	ff ff		 lea	 edx, DWORD PTR [edx*2-1]
  000b0	89 55 f4	 mov	 DWORD PTR _sign$1$[ebp], edx
  000b3	89 4d f8	 mov	 DWORD PTR _exponent$1$[ebp], ecx
  000b6	83 f8 26	 cmp	 eax, 38			; 00000026H
  000b9	0f 87 11 02 00
	00		 ja	 $LN19@format_flo
  000bf	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN82@format_flo[eax]
  000c6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN87@format_flo[eax*4]
$LN32@format_flo:

; 325  : 	{
; 326  : 	case ('G'):
; 327  : 		digits = digits_u;

  000cd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_u@?1??format_float@@9@9
$LN31@format_flo:

; 328  : 	case ('g'):
; 329  : 		if (precision > 0) precision--;

  000d4	85 f6		 test	 esi, esi
  000d6	7e 04		 jle	 SHORT $LN30@format_flo
  000d8	4e		 dec	 esi
  000d9	89 75 10	 mov	 DWORD PTR _precision$[ebp], esi
$LN30@format_flo:

; 330  : 		if (exponent < -4 || exponent >= precision) goto case_e;

  000dc	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  000df	0f 8c a2 00 00
	00		 jl	 $case_e$88
  000e5	3b ce		 cmp	 ecx, esi
  000e7	0f 8d 9a 00 00
	00		 jge	 $case_e$88

; 331  : 
; 332  : 		/* Shift the decimal point and round */
; 333  : 		fpval2 = round(sign * (double)fpval * pow(10., precision));

  000ed	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  000f5	66 0f 6e ce	 movd	 xmm1, esi
  000f9	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  000fd	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  00102	66 0f 6e 4d f4	 movd	 xmm1, DWORD PTR _sign$1$[ebp]
  00107	83 ec 08	 sub	 esp, 8
  0010a	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0010e	f2 0f 59 4d e4	 mulsd	 xmm1, QWORD PTR _fpval$1$[ebp]
  00113	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00117	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011f	f2 0f 11 45 d4	 movsd	 QWORD PTR tv570[ebp], xmm0
  00124	dd 45 d4	 fld	 QWORD PTR tv570[ebp]
  00127	dd 1c 24	 fstp	 QWORD PTR [esp]
  0012a	e8 00 00 00 00	 call	 _floor
  0012f	83 c4 08	 add	 esp, 8
  00132	dd 5d f0	 fstp	 QWORD PTR _fpval2$[ebp]

; 334  : 
; 335  : 		/* Skip trailing zeroes */
; 336  : 		while (precision && (unsigned __int64)fpval2 % 10 == 0)

  00135	85 f6		 test	 esi, esi
  00137	0f 84 db 01 00
	00		 je	 $LN83@format_flo
  0013d	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _fpval2$[ebp]
  00142	f2 0f 11 4d f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm1
$LL27@format_flo:
  00147	66 0f 28 c1	 movapd	 xmm0, xmm1
  0014b	e8 00 00 00 00	 call	 __dtoul3
  00150	6a 00		 push	 0
  00152	6a 0a		 push	 10			; 0000000aH
  00154	52		 push	 edx
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 __aullrem
  0015b	0b c2		 or	 eax, edx
  0015d	0f 85 bf 01 00
	00		 jne	 $LN33@format_flo

; 337  : 		{
; 338  : 			precision--;
; 339  : 			fpval2 /= 10;

  00163	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _fpval2$1$[ebp]
  00168	4e		 dec	 esi
  00169	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4024000000000000
  00171	89 75 10	 mov	 DWORD PTR _precision$[ebp], esi
  00174	f2 0f 11 4d f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm1
  00179	75 cc		 jne	 SHORT $LL27@format_flo

; 340  : 		}
; 341  : 		break;

  0017b	e9 a2 01 00 00	 jmp	 $LN33@format_flo
$LN25@format_flo:

; 342  : 
; 343  : 	case ('E'):
; 344  : 		digits = digits_u;

  00180	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_u@?1??format_float@@9@9
$case_e$88:
  00187	66 0f 6e ca	 movd	 xmm1, edx

; 345  : 	case ('e'):
; 346  : case_e:
; 347  : 		/* Shift the decimal point and round */
; 348  : 		fpval2 = round(sign * (double)fpval * pow(10., precision - exponent));

  0018b	8b c6		 mov	 eax, esi
  0018d	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00191	2b c1		 sub	 eax, ecx
  00193	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00197	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  0019f	f2 0f 11 4d d4	 movsd	 QWORD PTR tv366[ebp], xmm1
  001a4	66 0f 6e c8	 movd	 xmm1, eax
  001a8	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  001ac	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  001b1	f2 0f 59 45 d4	 mulsd	 xmm0, QWORD PTR tv366[ebp]
  001b6	83 ec 08	 sub	 esp, 8
  001b9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001c1	f2 0f 11 45 f0	 movsd	 QWORD PTR tv535[ebp], xmm0
  001c6	dd 45 f0	 fld	 QWORD PTR tv535[ebp]
  001c9	dd 1c 24	 fstp	 QWORD PTR [esp]
  001cc	e8 00 00 00 00	 call	 _floor

; 349  : 
; 350  : 		/* Compensate for changed exponent through rounding */
; 351  : 		if (fpval2 >= (unsigned __int64)pow(10., precision + 1))

  001d1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  001d9	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001dc	66 0f 6e c8	 movd	 xmm1, eax
  001e0	83 c4 08	 add	 esp, 8
  001e3	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  001e7	dd 5d f0	 fstp	 QWORD PTR _fpval2$[ebp]
  001ea	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  001ef	e8 00 00 00 00	 call	 __dtoul3
  001f4	8b c8		 mov	 ecx, eax
  001f6	e8 00 00 00 00	 call	 __ultod3
  001fb	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _fpval2$[ebp]
  00200	66 0f 2f c8	 comisd	 xmm1, xmm0
  00204	f2 0f 11 4d f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm1
  00209	72 52		 jb	 SHORT $LN23@format_flo

; 352  : 		{
; 353  : 			exponent++;

  0020b	f2 0f 2c 4d dc	 cvttsd2si ecx, QWORD PTR tv578[ebp]

; 354  : 			fpval2 = round(sign * (double)fpval * pow(10., precision - exponent));

  00210	8b c6		 mov	 eax, esi
  00212	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  0021a	41		 inc	 ecx
  0021b	2b c1		 sub	 eax, ecx
  0021d	89 4d f8	 mov	 DWORD PTR _exponent$1$[ebp], ecx
  00220	66 0f 6e c8	 movd	 xmm1, eax
  00224	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  00228	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  0022d	f2 0f 59 45 d4	 mulsd	 xmm0, QWORD PTR tv366[ebp]
  00232	83 ec 08	 sub	 esp, 8
  00235	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0023d	f2 0f 11 45 d4	 movsd	 QWORD PTR tv516[ebp], xmm0
  00242	dd 45 d4	 fld	 QWORD PTR tv516[ebp]
  00245	dd 1c 24	 fstp	 QWORD PTR [esp]
  00248	e8 00 00 00 00	 call	 _floor
  0024d	dd 5d f0	 fstp	 QWORD PTR _fpval2$[ebp]
  00250	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _fpval2$[ebp]
  00255	83 c4 08	 add	 esp, 8
  00258	f2 0f 11 45 f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm0
$LN23@format_flo:

; 355  : 		}
; 356  : 
; 357  : 		val32 = exponent >= 0 ? exponent : -exponent;

  0025d	8b 45 f8	 mov	 eax, DWORD PTR _exponent$1$[ebp]
  00260	99		 cdq
  00261	8b c8		 mov	 ecx, eax

; 358  : 
; 359  : 		// FIXME: handle length of exponent field:
; 360  : 		// http://msdn.microsoft.com/de-de/library/0fatw238%28VS.80%29.aspx
; 361  : 		num_digits = 3;
; 362  : 		while (num_digits--)

  00263	b8 03 00 00 00	 mov	 eax, 3
  00268	33 ca		 xor	 ecx, edx
  0026a	2b ca		 sub	 ecx, edx
  0026c	89 4d 08	 mov	 DWORD PTR _val32$1$[ebp], ecx
  0026f	90		 npad	 1
$LL22@format_flo:
  00270	48		 dec	 eax

; 363  : 		{
; 364  : 			*--(*string) = digits[val32 % 10];

  00271	ff 0f		 dec	 DWORD PTR [edi]
  00273	89 45 14	 mov	 DWORD PTR _num_digits$1$[ebp], eax
  00276	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0027b	f7 e9		 imul	 ecx
  0027d	8b 37		 mov	 esi, DWORD PTR [edi]
  0027f	c1 fa 02	 sar	 edx, 2
  00282	8b ca		 mov	 ecx, edx
  00284	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00287	03 ca		 add	 ecx, edx
  00289	8b 55 08	 mov	 edx, DWORD PTR _val32$1$[ebp]

; 365  : 			val32 /= 10;

  0028c	89 4d 08	 mov	 DWORD PTR _val32$1$[ebp], ecx
  0028f	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00292	03 c0		 add	 eax, eax
  00294	2b d0		 sub	 edx, eax
  00296	8b 45 fc	 mov	 eax, DWORD PTR _digits$1$[ebp]
  00299	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  0029c	88 06		 mov	 BYTE PTR [esi], al
  0029e	8b 45 14	 mov	 eax, DWORD PTR _num_digits$1$[ebp]
  002a1	85 c0		 test	 eax, eax
  002a3	75 cb		 jne	 SHORT $LL22@format_flo

; 366  : 		}
; 367  : 
; 368  : 		/* Sign for the exponent */
; 369  : 		*--(*string) = (exponent >= 0 ? ('+') : ('-'));

  002a5	ff 0f		 dec	 DWORD PTR [edi]
  002a7	39 45 f8	 cmp	 DWORD PTR _exponent$1$[ebp], eax
  002aa	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 370  : 
; 371  : 		/* Add 'e' or 'E' separator */
; 372  : 		*--(*string) = digits[0xe];
; 373  : 		break;

  002ac	8b 75 10	 mov	 esi, DWORD PTR _precision$[ebp]
  002af	0f 9c c0	 setl	 al
  002b2	8d 04 45 2b 00
	00 00		 lea	 eax, DWORD PTR [eax*2+43]
  002b9	88 01		 mov	 BYTE PTR [ecx], al
  002bb	ff 0f		 dec	 DWORD PTR [edi]
  002bd	8b 45 fc	 mov	 eax, DWORD PTR _digits$1$[ebp]
  002c0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  002c2	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  002c5	88 01		 mov	 BYTE PTR [ecx], al
  002c7	eb 59		 jmp	 SHORT $LN33@format_flo
$LN20@format_flo:

; 374  : 
; 375  : 	case ('A'):
; 376  : 		digits = digits_u;

  002c9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _digits$1$[ebp], OFFSET ?digits_u@?1??format_float@@9@9
$LN19@format_flo:

; 377  : 	case ('a'):
; 378  : 		//            base = 16;
; 379  : 		// FIXME: TODO
; 380  : 
; 381  : 	case ('f'):
; 382  : 	default:
; 383  : 		/* Shift the decimal point and round */
; 384  : 		fpval2 = round(sign * (double)fpval * pow(10., precision));

  002d0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  002d8	66 0f 6e ce	 movd	 xmm1, esi
  002dc	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  002e0	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  002e5	66 0f 6e 4d f4	 movd	 xmm1, DWORD PTR _sign$1$[ebp]
  002ea	83 ec 08	 sub	 esp, 8
  002ed	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  002f1	f2 0f 59 4d e4	 mulsd	 xmm1, QWORD PTR _fpval$1$[ebp]
  002f6	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002fa	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00302	f2 0f 11 45 d4	 movsd	 QWORD PTR tv490[ebp], xmm0
  00307	dd 45 d4	 fld	 QWORD PTR tv490[ebp]
  0030a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0030d	e8 00 00 00 00	 call	 _floor
  00312	dd 5d f0	 fstp	 QWORD PTR _fpval2$[ebp]
  00315	83 c4 08	 add	 esp, 8
$LN83@format_flo:
  00318	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _fpval2$[ebp]
  0031d	f2 0f 11 45 f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm0
$LN33@format_flo:

; 385  : 		break;
; 386  : 	}
; 387  : 
; 388  : 	/* Handle sign */
; 389  : 	if (fpval < 0)

  00322	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _fpval$1$[ebp]
  00327	0f 57 c9	 xorps	 xmm1, xmm1
  0032a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0032e	76 0b		 jbe	 SHORT $LN18@format_flo

; 390  : 	{
; 391  : 		*prefix = ("-");

  00330	8b 45 18	 mov	 eax, DWORD PTR _prefix$[ebp]
  00333	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET $SG2719
  00339	eb 1f		 jmp	 SHORT $LN14@format_flo
$LN18@format_flo:

; 392  : 	}
; 393  : 	else if (flags & FLAG_FORCE_SIGN)

  0033b	8b 45 0c	 mov	 eax, DWORD PTR _flags$[ebp]
  0033e	a8 02		 test	 al, 2
  00340	74 0b		 je	 SHORT $LN16@format_flo

; 394  : 		*prefix = ("+");

  00342	8b 45 18	 mov	 eax, DWORD PTR _prefix$[ebp]
  00345	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET $SG2722
  0034b	eb 0d		 jmp	 SHORT $LN14@format_flo
$LN16@format_flo:

; 395  : 	else if (flags & FLAG_FORCE_SIGNSP)

  0034d	a8 04		 test	 al, 4
  0034f	74 09		 je	 SHORT $LN14@format_flo

; 396  : 		*prefix = (" ");

  00351	8b 45 18	 mov	 eax, DWORD PTR _prefix$[ebp]
  00354	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET $SG2725
$LN14@format_flo:

; 397  : 
; 398  : 	/* Handle special cases first */
; 399  : 	if (_isnan((double)fpval))

  0035a	83 ec 08	 sub	 esp, 8
  0035d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00362	e8 00 00 00 00	 call	 __isnan
  00367	83 c4 08	 add	 esp, 8
  0036a	85 c0		 test	 eax, eax
  0036c	74 2a		 je	 SHORT $LN13@format_flo

; 400  : 	{
; 401  : 		(*string) -= sizeof(_nan) / sizeof(char) - 1;

  0036e	83 07 fb	 add	 DWORD PTR [edi], -5	; fffffffbH

; 402  : 		strcpy((*string), _nan);

  00371	b9 00 00 00 00	 mov	 ecx, OFFSET ?_nan@?1??format_float@@9@9
  00376	8b 17		 mov	 edx, DWORD PTR [edi]
$LL46@format_flo:
  00378	8a 01		 mov	 al, BYTE PTR [ecx]
  0037a	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0037d	88 02		 mov	 BYTE PTR [edx], al
  0037f	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00382	84 c0		 test	 al, al
  00384	75 f2		 jne	 SHORT $LL46@format_flo

; 403  : 		fpval2 = 1;

  00386	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0038e	f2 0f 11 45 f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm0
  00393	e9 a1 00 00 00	 jmp	 $LN60@format_flo
$LN13@format_flo:

; 404  : 	}
; 405  : 	else if (!_finite((double)fpval))

  00398	f2 0f 10 55 e4	 movsd	 xmm2, QWORD PTR _fpval$1$[ebp]
  0039d	83 ec 08	 sub	 esp, 8
  003a0	f2 0f 11 14 24	 movsd	 QWORD PTR [esp], xmm2
  003a5	e8 00 00 00 00	 call	 __finite
  003aa	83 c4 08	 add	 esp, 8
  003ad	85 c0		 test	 eax, eax
  003af	75 2c		 jne	 SHORT $LN52@format_flo

; 406  : 	{
; 407  : 		(*string) -= sizeof(_infinity) / sizeof(char) - 1;

  003b1	83 07 fc	 add	 DWORD PTR [edi], -4	; fffffffcH

; 408  : 		strcpy((*string), _infinity);

  003b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?_infinity@?1??format_float@@9@9
  003b9	8b 17		 mov	 edx, DWORD PTR [edi]
  003bb	eb 03 8d 49 00	 npad	 5
$LL47@format_flo:
  003c0	8a 01		 mov	 al, BYTE PTR [ecx]
  003c2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  003c5	88 02		 mov	 BYTE PTR [edx], al
  003c7	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  003ca	84 c0		 test	 al, al
  003cc	75 f2		 jne	 SHORT $LL47@format_flo

; 409  : 		fpval2 = 1;

  003ce	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003d6	f2 0f 11 45 f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm0

; 410  : 	}
; 411  : 	else

  003db	eb 5c		 jmp	 SHORT $LN60@format_flo
$LN52@format_flo:

; 412  : 	{
; 413  : 		/* Zero padding */
; 414  : 		while (padding-- > 0) *--(*string) = ('0');

  003dd	8b 4d ec	 mov	 ecx, DWORD PTR _padding$1$[ebp]
  003e0	85 c9		 test	 ecx, ecx
  003e2	7e 0c		 jle	 SHORT $LN58@format_flo
$LL9@format_flo:
  003e4	ff 0f		 dec	 DWORD PTR [edi]
  003e6	49		 dec	 ecx
  003e7	8b 07		 mov	 eax, DWORD PTR [edi]
  003e9	c6 00 30	 mov	 BYTE PTR [eax], 48	; 00000030H
  003ec	85 c9		 test	 ecx, ecx
  003ee	7f f4		 jg	 SHORT $LL9@format_flo
$LN58@format_flo:

; 415  : 
; 416  : 		/* Digits after the decimal point */
; 417  : 		num_digits = precision;

  003f0	8b c6		 mov	 eax, esi

; 418  : 		while (num_digits-- > 0)

  003f2	85 f6		 test	 esi, esi
  003f4	7e 49		 jle	 SHORT $LN80@format_flo
  003f6	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _fpval2$1$[ebp]
  003fb	eb 03 8d 49 00	 npad	 5
$LL7@format_flo:

; 419  : 		{
; 420  : 			*--(*string) = digits[(unsigned __int64)fpval2 % 10];

  00400	ff 0f		 dec	 DWORD PTR [edi]
  00402	48		 dec	 eax
  00403	8b 37		 mov	 esi, DWORD PTR [edi]
  00405	89 45 08	 mov	 DWORD PTR _num_digits$2$[ebp], eax
  00408	e8 00 00 00 00	 call	 __dtoul3
  0040d	6a 00		 push	 0
  0040f	6a 0a		 push	 10			; 0000000aH
  00411	52		 push	 edx
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 __aullrem

; 421  : 			fpval2 /= base;

  00418	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _fpval2$1$[ebp]
  0041d	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  00425	8b 4d fc	 mov	 ecx, DWORD PTR _digits$1$[ebp]
  00428	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  0042b	88 06		 mov	 BYTE PTR [esi], al
  0042d	8b 45 08	 mov	 eax, DWORD PTR _num_digits$2$[ebp]
  00430	f2 0f 11 45 f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm0
  00435	85 c0		 test	 eax, eax
  00437	7f c7		 jg	 SHORT $LL7@format_flo
$LN60@format_flo:

; 422  : 		}
; 423  : 	}
; 424  : 
; 425  : 	if (precision > 0 || flags & FLAG_SPECIAL)

  00439	83 7d 10 00	 cmp	 DWORD PTR _precision$[ebp], 0
  0043d	7f 06		 jg	 SHORT $LN4@format_flo
$LN80@format_flo:
  0043f	f6 45 0c 10	 test	 BYTE PTR _flags$[ebp], 16 ; 00000010H
  00443	74 07		 je	 SHORT $LN81@format_flo
$LN4@format_flo:

; 426  : 		*--(*string) = ('.');

  00445	ff 0f		 dec	 DWORD PTR [edi]
  00447	8b 07		 mov	 eax, DWORD PTR [edi]
  00449	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
$LN81@format_flo:
  0044c	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _fpval2$1$[ebp]
  00451	e8 00 00 00 00	 call	 __dtoul3
  00456	8b c8		 mov	 ecx, eax
$LL3@format_flo:

; 427  : 
; 428  : 	/* Digits before the decimal point */
; 429  : 	do
; 430  : 	{
; 431  : 		*--(*string) = digits[(unsigned __int64)fpval2 % base];

  00458	ff 0f		 dec	 DWORD PTR [edi]
  0045a	8b 37		 mov	 esi, DWORD PTR [edi]
  0045c	6a 00		 push	 0
  0045e	6a 0a		 push	 10			; 0000000aH
  00460	52		 push	 edx
  00461	51		 push	 ecx
  00462	e8 00 00 00 00	 call	 __aullrem

; 432  : 		fpval2 /= base;

  00467	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _fpval2$1$[ebp]
  0046c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  00474	8b 4d fc	 mov	 ecx, DWORD PTR _digits$1$[ebp]
  00477	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  0047a	88 06		 mov	 BYTE PTR [esi], al
  0047c	f2 0f 11 45 f0	 movsd	 QWORD PTR _fpval2$1$[ebp], xmm0

; 433  : 	}
; 434  : 	while ((unsigned __int64)fpval2);

  00481	e8 00 00 00 00	 call	 __dtoul3
  00486	8b c8		 mov	 ecx, eax
  00488	0b c2		 or	 eax, edx
  0048a	75 cc		 jne	 SHORT $LL3@format_flo
  0048c	5f		 pop	 edi
  0048d	5e		 pop	 esi

; 435  : 
; 436  : }

  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	8b ff		 npad	 2
$LN87@format_flo:
  00494	00 00 00 00	 DD	 $LN20@format_flo
  00498	00 00 00 00	 DD	 $LN25@format_flo
  0049c	00 00 00 00	 DD	 $LN32@format_flo
  004a0	00 00 00 00	 DD	 $case_e$88
  004a4	00 00 00 00	 DD	 $LN31@format_flo
  004a8	00 00 00 00	 DD	 $LN19@format_flo
$LN82@format_flo:
  004ac	00		 DB	 0
  004ad	05		 DB	 5
  004ae	05		 DB	 5
  004af	05		 DB	 5
  004b0	01		 DB	 1
  004b1	05		 DB	 5
  004b2	02		 DB	 2
  004b3	05		 DB	 5
  004b4	05		 DB	 5
  004b5	05		 DB	 5
  004b6	05		 DB	 5
  004b7	05		 DB	 5
  004b8	05		 DB	 5
  004b9	05		 DB	 5
  004ba	05		 DB	 5
  004bb	05		 DB	 5
  004bc	05		 DB	 5
  004bd	05		 DB	 5
  004be	05		 DB	 5
  004bf	05		 DB	 5
  004c0	05		 DB	 5
  004c1	05		 DB	 5
  004c2	05		 DB	 5
  004c3	05		 DB	 5
  004c4	05		 DB	 5
  004c5	05		 DB	 5
  004c6	05		 DB	 5
  004c7	05		 DB	 5
  004c8	05		 DB	 5
  004c9	05		 DB	 5
  004ca	05		 DB	 5
  004cb	05		 DB	 5
  004cc	05		 DB	 5
  004cd	05		 DB	 5
  004ce	05		 DB	 5
  004cf	05		 DB	 5
  004d0	03		 DB	 3
  004d1	05		 DB	 5
  004d2	04		 DB	 4
_format_float ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _StreamOutWString
_TEXT	SEGMENT
_oStream$ = 8						; size = 4
_oLen$ = 12						; size = 4
_iStream$ = 16						; size = 4
_iLen$ = 20						; size = 4
_StreamOutWString PROC					; COMDAT

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 277  : 	/* Vars */
; 278  : 	wchar_t Character;
; 279  : 	int bWritten = 0;
; 280  : 
; 281  : 	/* Iterate count */
; 282  : 	while (iLen--)

  00005	8b 75 14	 mov	 esi, DWORD PTR _iLen$[ebp]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	85 f6		 test	 esi, esi
  0000d	74 22		 je	 SHORT $LN8@StreamOutW
  0000f	8b 5d 10	 mov	 ebx, DWORD PTR _iStream$[ebp]
$LL3@StreamOutW:

; 283  : 	{
; 284  : 		/* Get char */
; 285  : 		Character = *iStream++;

  00012	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  00015	8d 5b 02	 lea	 ebx, DWORD PTR [ebx+2]

; 286  : 
; 287  : 		/* Just write it, this function will do neccessary conversions */
; 288  : 		if (StreamOutCharacter(oStream, oLen, Character) == 0)

  00018	50		 push	 eax
  00019	ff 75 0c	 push	 DWORD PTR _oLen$[ebp]
  0001c	4e		 dec	 esi
  0001d	ff 75 08	 push	 DWORD PTR _oStream$[ebp]
  00020	e8 00 00 00 00	 call	 _StreamOutCharacter
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
  00028	85 c0		 test	 eax, eax
  0002a	74 0c		 je	 SHORT $LN7@StreamOutW

; 290  : 
; 291  : 		/* Inc */
; 292  : 		bWritten++;

  0002c	47		 inc	 edi
  0002d	85 f6		 test	 esi, esi
  0002f	75 e1		 jne	 SHORT $LL3@StreamOutW
$LN8@StreamOutW:

; 293  : 	}
; 294  : 
; 295  : 	/* Num of chars copied */
; 296  : 	return bWritten;

  00031	8b c7		 mov	 eax, edi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx

; 297  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN7@StreamOutW:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 289  : 			return -1;

  0003a	83 c8 ff	 or	 eax, -1
  0003d	5b		 pop	 ebx

; 297  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_StreamOutWString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _StreamOutString
_TEXT	SEGMENT
_iLen$2$ = 8						; size = 4
_oStream$ = 8						; size = 4
_oLen$ = 12						; size = 4
_iStream$ = 16						; size = 4
_iLen$ = 20						; size = 4
_StreamOutString PROC					; COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : 	char Character;
; 191  : 	int bWritten = 0;
; 192  : 
; 193  : 	/* Sanity */
; 194  : 	if (oStream)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _oStream$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	33 db		 xor	 ebx, ebx
  0000a	57		 push	 edi
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 40		 je	 SHORT $LN22@StreamOutS

; 195  : 	{
; 196  : 		while (iLen) {

  0000f	8b 75 14	 mov	 esi, DWORD PTR _iLen$[ebp]
  00012	85 f6		 test	 esi, esi
  00014	0f 84 e7 00 00
	00		 je	 $LN12@StreamOutS
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _iStream$[ebp]
  0001d	8d 49 00	 npad	 3
$LL17@StreamOutS:

; 197  : 			Character = *iStream++;

  00020	8a 07		 mov	 al, BYTE PTR [edi]
  00022	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]

; 198  : 			
; 199  : 			/* Write the character to the stream */
; 200  : 			if (StreamOutCharacter(oStream, oLen, (uint32_t)Character) == 0)

  00025	0f be c0	 movsx	 eax, al
  00028	50		 push	 eax
  00029	ff 75 0c	 push	 DWORD PTR _oLen$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _StreamOutCharacter
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	85 c0		 test	 eax, eax
  00037	74 0e		 je	 SHORT $LN24@StreamOutS

; 202  : 
; 203  : 			/* Inc */
; 204  : 			bWritten++;

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _oStream$[ebp]
  0003c	43		 inc	 ebx

; 205  : 			iLen--;

  0003d	4e		 dec	 esi
  0003e	75 e0		 jne	 SHORT $LL17@StreamOutS

; 266  : 			}
; 267  : 		}
; 268  : 	}
; 269  : 
; 270  : 	/* Num of bytes copied */
; 271  : 	return bWritten;

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	8b c3		 mov	 eax, ebx
  00044	5b		 pop	 ebx

; 272  : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
$LN24@StreamOutS:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 201  : 				return -1;

  00049	83 c8 ff	 or	 eax, -1
  0004c	5b		 pop	 ebx

; 272  : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN22@StreamOutS:

; 206  : 		}
; 207  : 	}
; 208  : 	else
; 209  : 	{
; 210  : 		/* Iterate chars */
; 211  : 		while (iLen)

  0004f	8b 45 14	 mov	 eax, DWORD PTR _iLen$[ebp]
  00052	89 45 08	 mov	 DWORD PTR _iLen$2$[ebp], eax
  00055	85 c0		 test	 eax, eax
  00057	0f 84 a4 00 00
	00		 je	 $LN12@StreamOutS
  0005d	8b 75 10	 mov	 esi, DWORD PTR _iStream$[ebp]
$LL13@StreamOutS:

; 212  : 		{
; 213  : 			Character = *iStream++;

  00060	8a 0e		 mov	 cl, BYTE PTR [esi]
  00062	46		 inc	 esi

; 214  : 			
; 215  : 			/* Sanity */
; 216  : 			if (IsUTF8(Character))

  00063	8a c1		 mov	 al, cl
  00065	24 c0		 and	 al, 192			; 000000c0H
  00067	3c 80		 cmp	 al, 128			; 00000080H

; 217  : 			{
; 218  : 				/* Build UTF-8 */
; 219  : 				uint32_t uChar = (uint32_t)Character;

  00069	0f be c1	 movsx	 eax, cl
  0006c	75 6d		 jne	 SHORT $LN11@StreamOutS

; 220  : 				uint32_t Size = 0;
; 221  : 
; 222  : 				/* Iterate */
; 223  : 				while (*iStream && IsUTF8(*iStream))

  0006e	8a 16		 mov	 dl, BYTE PTR [esi]
  00070	33 ff		 xor	 edi, edi
  00072	84 d2		 test	 dl, dl
  00074	74 1a		 je	 SHORT $LN36@StreamOutS
$LL10@StreamOutS:
  00076	8a ca		 mov	 cl, dl
  00078	80 e1 c0	 and	 cl, 192			; 000000c0H
  0007b	80 f9 80	 cmp	 cl, 128			; 00000080H
  0007e	75 10		 jne	 SHORT $LN36@StreamOutS

; 224  : 				{
; 225  : 					/* Move */
; 226  : 					uChar <<= 6;
; 227  : 
; 228  : 					/* Add */
; 229  : 					uChar += (unsigned char)*iStream;
; 230  : 
; 231  : 					/* Inc */
; 232  : 					Size++;
; 233  : 					iStream++;

  00080	46		 inc	 esi
  00081	c1 e0 06	 shl	 eax, 6
  00084	0f b6 ca	 movzx	 ecx, dl
  00087	47		 inc	 edi
  00088	03 c1		 add	 eax, ecx
  0008a	8a 16		 mov	 dl, BYTE PTR [esi]
  0008c	84 d2		 test	 dl, dl
  0008e	75 e6		 jne	 SHORT $LL10@StreamOutS
$LN36@StreamOutS:

; 234  : 				}
; 235  : 
; 236  : 				/* Move */
; 237  : 				uChar <<= 6;

  00090	c1 e0 06	 shl	 eax, 6

; 238  : 
; 239  : 				/* Add the last byte */
; 240  : 				if (Size == 1)

  00093	83 ff 01	 cmp	 edi, 1
  00096	75 08		 jne	 SHORT $LN8@StreamOutS

; 241  : 					uChar |= (((unsigned char)*iStream) & 0x1F);

  00098	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  0009b	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0009e	eb 18		 jmp	 SHORT $LN37@StreamOutS
$LN8@StreamOutS:

; 242  : 				else if (Size == 2)

  000a0	83 ff 02	 cmp	 edi, 2
  000a3	75 08		 jne	 SHORT $LN6@StreamOutS

; 243  : 					uChar |= (((unsigned char)*iStream) & 0xF);

  000a5	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  000a8	83 e1 0f	 and	 ecx, 15			; 0000000fH
  000ab	eb 0b		 jmp	 SHORT $LN37@StreamOutS
$LN6@StreamOutS:

; 244  : 				else if (Size == 3)

  000ad	83 ff 03	 cmp	 edi, 3
  000b0	75 08		 jne	 SHORT $LN4@StreamOutS

; 245  : 					uChar |= (((unsigned char)*iStream) & 0x7);

  000b2	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  000b5	83 e1 07	 and	 ecx, 7
$LN37@StreamOutS:
  000b8	0b c1		 or	 eax, ecx
$LN4@StreamOutS:

; 246  : 				Size++;
; 247  : 
; 248  : 				/* Write the character to the stream */
; 249  : 				if (StreamOutCharacter(oStream, oLen, uChar) == 0)

  000ba	50		 push	 eax
  000bb	ff 75 0c	 push	 DWORD PTR _oLen$[ebp]
  000be	47		 inc	 edi
  000bf	6a 00		 push	 0
  000c1	e8 00 00 00 00	 call	 _StreamOutCharacter
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	85 c0		 test	 eax, eax
  000cb	0f 84 76 ff ff
	ff		 je	 $LN24@StreamOutS

; 250  : 					return -1;
; 251  : 
; 252  : 				/* Skip */
; 253  : 				bWritten += Size;
; 254  : 				iLen -= Size;

  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _iLen$2$[ebp]
  000d4	03 df		 add	 ebx, edi
  000d6	2b cf		 sub	 ecx, edi

; 255  : 				iStream++;

  000d8	46		 inc	 esi

; 256  : 			}
; 257  : 			else

  000d9	eb 1b		 jmp	 SHORT $LN38@StreamOutS
$LN11@StreamOutS:

; 258  : 			{
; 259  : 				/* Write the character to the stream */
; 260  : 				if (StreamOutCharacter(oStream, oLen, (uint32_t)Character) == 0)

  000db	50		 push	 eax
  000dc	ff 75 0c	 push	 DWORD PTR _oLen$[ebp]
  000df	6a 00		 push	 0
  000e1	e8 00 00 00 00	 call	 _StreamOutCharacter
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	85 c0		 test	 eax, eax
  000eb	0f 84 56 ff ff
	ff		 je	 $LN24@StreamOutS

; 261  : 					return -1;
; 262  : 
; 263  : 				/* Inc */
; 264  : 				bWritten++;
; 265  : 				iLen--;

  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _iLen$2$[ebp]
  000f4	43		 inc	 ebx
  000f5	49		 dec	 ecx
$LN38@StreamOutS:
  000f6	89 4d 08	 mov	 DWORD PTR _iLen$2$[ebp], ecx
  000f9	85 c9		 test	 ecx, ecx
  000fb	0f 85 5f ff ff
	ff		 jne	 $LL13@StreamOutS
$LN12@StreamOutS:
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi

; 266  : 			}
; 267  : 		}
; 268  : 	}
; 269  : 
; 270  : 	/* Num of bytes copied */
; 271  : 	return bWritten;

  00103	8b c3		 mov	 eax, ebx
  00105	5b		 pop	 ebx

; 272  : }

  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_StreamOutString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _StreamOutCharacter
_TEXT	SEGMENT
_oStream$ = 8						; size = 4
_uLen$1 = 12						; size = 4
_oLen$ = 12						; size = 4
_Character$ = 16					; size = 4
_StreamOutCharacter PROC				; COMDAT

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 159  : 	/* Sanity */
; 160  : 	if (*oLen == 0)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _oLen$[ebp]
  00007	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0000a	75 05		 jne	 SHORT $LN3@StreamOutC

; 161  : 		return 0;

  0000c	33 c0		 xor	 eax, eax
  0000e	5b		 pop	 ebx

; 181  : #else
; 182  : 		return VideoPutChar(Character);
; 183  : #endif
; 184  : 	}
; 185  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN3@StreamOutC:
  00011	57		 push	 edi

; 162  : 
; 163  : 	/* Do we have a stream to write to? */
; 164  : 	if (oStream) {

  00012	8b 7d 08	 mov	 edi, DWORD PTR _oStream$[ebp]
  00015	85 ff		 test	 edi, edi
  00017	74 26		 je	 SHORT $LN2@StreamOutC

; 165  : 		/* We cannot just copy an U32 character 
; 166  : 		 * to stream like this, we must encode it back */
; 167  : 		uint32_t uLen = 0;
; 168  : 		StreamCharacterToUtf8(Character, *oStream, &uLen);

  00019	8d 45 0c	 lea	 eax, DWORD PTR _uLen$1[ebp]
  0001c	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _uLen$1[ebp], 0
  00023	50		 push	 eax
  00024	ff 37		 push	 DWORD PTR [edi]
  00026	ff 75 10	 push	 DWORD PTR _Character$[ebp]
  00029	e8 00 00 00 00	 call	 _StreamCharacterToUtf8

; 169  : 		(*oStream) += uLen;

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _uLen$1[ebp]
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	01 0f		 add	 DWORD PTR [edi], ecx

; 170  : 		*oLen -= uLen;

  00036	29 0b		 sub	 DWORD PTR [ebx], ecx

; 171  : 
; 172  : 		/* Done ! */
; 173  : 		return Character;

  00038	8b 45 10	 mov	 eax, DWORD PTR _Character$[ebp]
  0003b	5f		 pop	 edi
  0003c	5b		 pop	 ebx

; 181  : #else
; 182  : 		return VideoPutChar(Character);
; 183  : #endif
; 184  : 	}
; 185  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN2@StreamOutC:

; 174  : 	}
; 175  : 	else 
; 176  : 	{
; 177  : 		/* These routines need the 
; 178  : 		 * unicode-point */
; 179  : #ifndef LIBC_KERNEL
; 180  : 		return putchar(Character);

  0003f	ff 75 10	 push	 DWORD PTR _Character$[ebp]
  00042	e8 00 00 00 00	 call	 _putchar
  00047	83 c4 04	 add	 esp, 4
  0004a	5f		 pop	 edi
  0004b	5b		 pop	 ebx

; 181  : #else
; 182  : 		return VideoPutChar(Character);
; 183  : #endif
; 184  : 	}
; 185  : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_StreamOutCharacter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\stdio\stream.c
;	COMDAT _StreamCharacterToUtf8
_TEXT	SEGMENT
_TmpBuffer$ = -12					; size = 10
_Character$ = 8						; size = 4
_oBuffer$ = 12						; size = 4
_Length$ = 16						; size = 4
_StreamCharacterToUtf8 PROC				; COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 77   : 	/* Encode Buffer */
; 78   : 	char TmpBuffer[10] = { 0 };
; 79   : 	char* BufPtr = &TmpBuffer[0];
; 80   : 
; 81   : 	uint32_t NumBytes = 0;
; 82   : 	uint32_t Error = 0;
; 83   : 
; 84   : 	if (Character <= 0x7F)  /* 0XXX XXXX one byte */

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _Character$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	33 f6		 xor	 esi, esi
  00010	c6 45 f4 00	 mov	 BYTE PTR _TmpBuffer$[ebp], 0
  00014	33 ff		 xor	 edi, edi
  00016	66 0f d6 45 f5	 movq	 QWORD PTR _TmpBuffer$[ebp+1], xmm0
  0001b	c6 45 fd 00	 mov	 BYTE PTR _TmpBuffer$[ebp+9], 0
  0001f	83 f9 7f	 cmp	 ecx, 127		; 0000007fH
  00022	77 0b		 ja	 SHORT $LN18@StreamChar

; 85   : 	{
; 86   : 		TmpBuffer[0] = (char)(Character & 0xFF);

  00024	88 4d f4	 mov	 BYTE PTR _TmpBuffer$[ebp], cl

; 87   : 		NumBytes = 1;

  00027	8d 77 01	 lea	 esi, DWORD PTR [edi+1]
  0002a	e9 bc 00 00 00	 jmp	 $LN21@StreamChar
$LN18@StreamChar:

; 88   : 	}
; 89   : 	else if (Character <= 0x7FF)  /* 110X XXXX  two bytes */

  0002f	81 f9 ff 07 00
	00		 cmp	 ecx, 2047		; 000007ffH
  00035	77 1d		 ja	 SHORT $LN16@StreamChar

; 90   : 	{
; 91   : 		TmpBuffer[0] = (char)(0xC0 | (Character >> 6));

  00037	8b c1		 mov	 eax, ecx

; 92   : 		TmpBuffer[1] = (char)(0x80 | (Character & 0x3F));
; 93   : 		NumBytes = 2;

  00039	be 02 00 00 00	 mov	 esi, 2
  0003e	c1 e8 06	 shr	 eax, 6
  00041	80 e1 3f	 and	 cl, 63			; 0000003fH
  00044	0c c0		 or	 al, -64			; ffffffc0H
  00046	80 c9 80	 or	 cl, -128		; ffffff80H
  00049	88 45 f4	 mov	 BYTE PTR _TmpBuffer$[ebp], al
  0004c	88 4d f5	 mov	 BYTE PTR _TmpBuffer$[ebp+1], cl
  0004f	e9 97 00 00 00	 jmp	 $LN21@StreamChar
$LN16@StreamChar:

; 94   : 	}
; 95   : 	else if (Character <= 0xFFFF)  /* 1110 XXXX  three bytes */

  00054	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0005a	77 4f		 ja	 SHORT $LN14@StreamChar

; 96   : 	{
; 97   : 		TmpBuffer[0] = (char)(0xE0 | (Character >> 12));

  0005c	8b c1		 mov	 eax, ecx

; 98   : 		TmpBuffer[1] = (char)(0x80 | ((Character >> 6) & 0x3F));
; 99   : 		TmpBuffer[2] = (char)(0x80 | (Character & 0x3F));
; 100  : 		NumBytes = 3;

  0005e	be 03 00 00 00	 mov	 esi, 3
  00063	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00066	0c e0		 or	 al, -32			; ffffffe0H
  00068	88 45 f4	 mov	 BYTE PTR _TmpBuffer$[ebp], al
  0006b	8b c1		 mov	 eax, ecx
  0006d	c1 e8 06	 shr	 eax, 6
  00070	24 3f		 and	 al, 63			; 0000003fH
  00072	0c 80		 or	 al, -128		; ffffff80H
  00074	88 45 f5	 mov	 BYTE PTR _TmpBuffer$[ebp+1], al
  00077	8a c1		 mov	 al, cl
  00079	24 3f		 and	 al, 63			; 0000003fH
  0007b	0c 80		 or	 al, -128		; ffffff80H
  0007d	88 45 f6	 mov	 BYTE PTR _TmpBuffer$[ebp+2], al

; 101  : 
; 102  : 		/* Sanity no special characters */
; 103  : 		if (Character == 0xFFFE || Character == 0xFFFF)

  00080	81 f9 fe ff 00
	00		 cmp	 ecx, 65534		; 0000fffeH
  00086	74 08		 je	 SHORT $LN5@StreamChar
  00088	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0008e	75 5b		 jne	 SHORT $LN21@StreamChar
$LN5@StreamChar:

; 128  : 	{
; 129  : 		TmpBuffer[0] = (char)(0xFC | (Character >> 30));
; 130  : 		TmpBuffer[1] = (char)(0x80 | ((Character >> 24) & 0x3F));
; 131  : 		TmpBuffer[2] = (char)(0x80 | ((Character >> 18) & 0x3F));
; 132  : 		TmpBuffer[3] = (char)(0x80 | ((Character >> 12) & 0x3F));
; 133  : 		TmpBuffer[4] = (char)(0x80 | ((Character >> 6) & 0x3F));
; 134  : 		TmpBuffer[5] = (char)(0x80 | (Character & 0x3F));
; 135  : 		NumBytes = 6;
; 136  : 		Error = 1;
; 137  : 	}
; 138  : 	else
; 139  : 		Error = 1;

  00090	bf 01 00 00 00	 mov	 edi, 1
$LN3@StreamChar:

; 144  : 
; 145  : 	/* We want the length */
; 146  : 	*Length = NumBytes;

  00095	8b 45 10	 mov	 eax, DWORD PTR _Length$[ebp]
  00098	89 30		 mov	 DWORD PTR [eax], esi

; 147  : 
; 148  : 	/* Sanity */
; 149  : 	if (Error)

  0009a	85 ff		 test	 edi, edi
  0009c	0f 84 98 00 00
	00		 je	 $LN2@StreamChar

; 150  : 		return -1;

  000a2	5f		 pop	 edi
  000a3	83 c8 ff	 or	 eax, -1
  000a6	5e		 pop	 esi

; 153  : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
$LN14@StreamChar:

; 104  : 			Error = 1;
; 105  : 	}
; 106  : 	else if (Character <= 0x1FFFFF)  /* 1111 0XXX  four bytes */

  000ab	81 f9 ff ff 1f
	00		 cmp	 ecx, 2097151		; 001fffffH
  000b1	77 4f		 ja	 SHORT $LN10@StreamChar

; 107  : 	{
; 108  : 		TmpBuffer[0] = (char)(0xF0 | (Character >> 18));

  000b3	8b c1		 mov	 eax, ecx

; 109  : 		TmpBuffer[1] = (char)(0x80 | ((Character >> 12) & 0x3F));
; 110  : 		TmpBuffer[2] = (char)(0x80 | ((Character >> 6) & 0x3F));
; 111  : 		TmpBuffer[3] = (char)(0x80 | (Character & 0x3F));
; 112  : 		NumBytes = 4;

  000b5	be 04 00 00 00	 mov	 esi, 4
  000ba	c1 e8 12	 shr	 eax, 18			; 00000012H
  000bd	0c f0		 or	 al, -16			; fffffff0H
  000bf	88 45 f4	 mov	 BYTE PTR _TmpBuffer$[ebp], al
  000c2	8b c1		 mov	 eax, ecx
  000c4	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000c7	24 3f		 and	 al, 63			; 0000003fH
  000c9	0c 80		 or	 al, -128		; ffffff80H
  000cb	88 45 f5	 mov	 BYTE PTR _TmpBuffer$[ebp+1], al
  000ce	8b c1		 mov	 eax, ecx
  000d0	c1 e8 06	 shr	 eax, 6
  000d3	24 3f		 and	 al, 63			; 0000003fH
  000d5	0c 80		 or	 al, -128		; ffffff80H
  000d7	88 45 f6	 mov	 BYTE PTR _TmpBuffer$[ebp+2], al
  000da	8a c1		 mov	 al, cl
  000dc	24 3f		 and	 al, 63			; 0000003fH
  000de	0c 80		 or	 al, -128		; ffffff80H
  000e0	88 45 f7	 mov	 BYTE PTR _TmpBuffer$[ebp+3], al

; 113  : 
; 114  : 		if (Character > 0x10FFFF)

  000e3	81 f9 ff ff 10
	00		 cmp	 ecx, 1114111		; 0010ffffH
  000e9	77 a5		 ja	 SHORT $LN5@StreamChar
$LN21@StreamChar:

; 140  : 
; 141  : 	/* Write buffer only if it's a valid byte sequence */
; 142  : 	if (!Error && oBuffer != NULL)

  000eb	8b 45 0c	 mov	 eax, DWORD PTR _oBuffer$[ebp]
  000ee	85 c0		 test	 eax, eax
  000f0	74 a3		 je	 SHORT $LN3@StreamChar

; 143  : 		memcpy(oBuffer, BufPtr, NumBytes);

  000f2	56		 push	 esi
  000f3	8d 4d f4	 lea	 ecx, DWORD PTR _TmpBuffer$[ebp]
  000f6	51		 push	 ecx
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _memcpy
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00100	eb 93		 jmp	 SHORT $LN3@StreamChar
$LN10@StreamChar:

; 115  : 			Error = 1;
; 116  : 	}
; 117  : 	else if (Character <= 0x3FFFFFF)  /* 1111 10XX  five bytes */

  00102	81 f9 ff ff ff
	03		 cmp	 ecx, 67108863		; 03ffffffH
  00108	77 12		 ja	 SHORT $LN7@StreamChar

; 144  : 
; 145  : 	/* We want the length */
; 146  : 	*Length = NumBytes;

  0010a	8b 45 10	 mov	 eax, DWORD PTR _Length$[ebp]
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	c7 00 05 00 00
	00		 mov	 DWORD PTR [eax], 5

; 150  : 		return -1;

  00115	83 c8 ff	 or	 eax, -1

; 153  : }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
$LN7@StreamChar:

; 118  : 	{
; 119  : 		TmpBuffer[0] = (char)(0xF8 | (Character >> 24));
; 120  : 		TmpBuffer[1] = (char)(0x80 | (Character >> 18));
; 121  : 		TmpBuffer[2] = (char)(0x80 | ((Character >> 12) & 0x3F));
; 122  : 		TmpBuffer[3] = (char)(0x80 | ((Character >> 6) & 0x3F));
; 123  : 		TmpBuffer[4] = (char)(0x80 | (Character & 0x3F));
; 124  : 		NumBytes = 5;
; 125  : 		Error = 1;
; 126  : 	}
; 127  : 	else if (Character <= 0x7FFFFFFF)  /* 1111 110X  six bytes */

  0011c	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00122	0f 87 68 ff ff
	ff		 ja	 $LN5@StreamChar

; 144  : 
; 145  : 	/* We want the length */
; 146  : 	*Length = NumBytes;

  00128	8b 45 10	 mov	 eax, DWORD PTR _Length$[ebp]
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	c7 00 06 00 00
	00		 mov	 DWORD PTR [eax], 6

; 150  : 		return -1;

  00133	83 c8 ff	 or	 eax, -1

; 153  : }

  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
$LN2@StreamChar:
  0013a	5f		 pop	 edi

; 151  : 	else
; 152  : 		return 0;

  0013b	33 c0		 xor	 eax, eax
  0013d	5e		 pop	 esi

; 153  : }

  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
_StreamCharacterToUtf8 ENDP
_TEXT	ENDS
END
