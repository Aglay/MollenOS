; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\log.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_zero	DQ	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_ln2_hi	DQ	03fe62e42fee00000r		; 0.693147
_ln2_lo	DQ	03dea39ef35793c76r		; 1.90821e-010
_two54	DQ	04350000000000000r		; 1.80144e+016
_Lg1	DQ	03fe5555555555593r		; 0.666667
_Lg2	DQ	03fd999999997fa04r		; 0.4
_Lg3	DQ	03fd2492494229359r		; 0.285714
_Lg4	DQ	03fcc71c51d8e78afr		; 0.222222
_Lg5	DQ	03fc7466496cb03der		; 0.181836
_Lg6	DQ	03fc39a09d078c69fr		; 0.153138
_Lg7	DQ	03fc2f112df3e5244r		; 0.147982
CONST	ENDS
PUBLIC	_log
PUBLIC	___fpclassifyl
PUBLIC	___fpclassifyf
PUBLIC	___fpclassify
PUBLIC	___isnan
PUBLIC	___isnanf
PUBLIC	___isnanl
PUBLIC	___signbit
PUBLIC	___signbitf
PUBLIC	___signbitl
PUBLIC	_logb
PUBLIC	_logbf
PUBLIC	_logbl
PUBLIC	_rint
PUBLIC	_rintf
PUBLIC	_rintl
PUBLIC	_lrint
PUBLIC	_lrintf
PUBLIC	_lrintl
PUBLIC	_llrint
PUBLIC	_llrintf
PUBLIC	_llrintl
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3dea39ef35793c76
PUBLIC	__real@3fc2f112df3e5244
PUBLIC	__real@3fc39a09d078c69f
PUBLIC	__real@3fc7466496cb03de
PUBLIC	__real@3fcc71c51d8e78af
PUBLIC	__real@3fd2492494229359
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fd999999997fa04
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe5555555555593
PUBLIC	__real@3fe62e42fee00000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4350000000000000
PUBLIC	__real@c350000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@c350000000000000
CONST	SEGMENT
__real@c350000000000000 DQ 0c350000000000000r	; -1.80144e+016
CONST	ENDS
;	COMDAT __real@4350000000000000
CONST	SEGMENT
__real@4350000000000000 DQ 04350000000000000r	; 1.80144e+016
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe62e42fee00000
CONST	SEGMENT
__real@3fe62e42fee00000 DQ 03fe62e42fee00000r	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe5555555555593
CONST	SEGMENT
__real@3fe5555555555593 DQ 03fe5555555555593r	; 0.666667
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd999999997fa04
CONST	SEGMENT
__real@3fd999999997fa04 DQ 03fd999999997fa04r	; 0.4
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd2492494229359
CONST	SEGMENT
__real@3fd2492494229359 DQ 03fd2492494229359r	; 0.285714
CONST	ENDS
;	COMDAT __real@3fcc71c51d8e78af
CONST	SEGMENT
__real@3fcc71c51d8e78af DQ 03fcc71c51d8e78afr	; 0.222222
CONST	ENDS
;	COMDAT __real@3fc7466496cb03de
CONST	SEGMENT
__real@3fc7466496cb03de DQ 03fc7466496cb03der	; 0.181836
CONST	ENDS
;	COMDAT __real@3fc39a09d078c69f
CONST	SEGMENT
__real@3fc39a09d078c69f DQ 03fc39a09d078c69fr	; 0.153138
CONST	ENDS
;	COMDAT __real@3fc2f112df3e5244
CONST	SEGMENT
__real@3fc2f112df3e5244 DQ 03fc2f112df3e5244r	; 0.147982
CONST	ENDS
;	COMDAT __real@3dea39ef35793c76
CONST	SEGMENT
__real@3dea39ef35793c76 DQ 03dea39ef35793c76r	; 1.90821e-010
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _llrintl
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 8
_llrintl PROC						; COMDAT

; 600  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 601  : 	long long retval = 0ll;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0
  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp+4], 0

; 602  : #if defined(_MSC_VER)
; 603  : 	_asm {
; 604  : 		fld [x];

  00014	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 605  : 		fistp [retval];

  00017	df 7d f8	 fistp	 QWORD PTR _retval$[ebp]

; 606  : 	}
; 607  : #else
; 608  : 	__asm__ __volatile__("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
; 609  : #endif
; 610  : 	return retval;

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _retval$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _retval$[ebp+4]

; 611  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_llrintl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _llrintf
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 4
_llrintf PROC						; COMDAT

; 586  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 587  : 	long long retval = 0ll;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0
  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp+4], 0

; 588  : #if defined(_MSC_VER)
; 589  : 	_asm {
; 590  : 		fld [x];

  00014	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 591  : 		fistp [retval];

  00017	df 7d f8	 fistp	 QWORD PTR _retval$[ebp]

; 592  : 	}
; 593  : #else
; 594  : 	__asm__ __volatile__("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
; 595  : #endif
; 596  : 	return retval;

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _retval$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _retval$[ebp+4]

; 597  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_llrintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _llrint
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 8
_llrint	PROC						; COMDAT

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 573  : 	long long retval = 0ll;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0
  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp+4], 0

; 574  : #if defined(_MSC_VER)
; 575  : 	_asm {
; 576  : 		fld [x];

  00014	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 577  : 		fistp [retval];

  00017	df 7d f8	 fistp	 QWORD PTR _retval$[ebp]

; 578  : 	}
; 579  : #else
; 580  : 	__asm__ __volatile__("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
; 581  : #endif
; 582  : 	return retval;

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _retval$[ebp]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _retval$[ebp+4]

; 583  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_llrint	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _lrintl
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_x$ = 8							; size = 8
_lrintl	PROC						; COMDAT

; 559  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 560  : 	long retval = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0

; 561  : #if defined(_MSC_VER)
; 562  : 	_asm {
; 563  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 564  : 		fistp [retval];

  0000e	db 5d fc	 fistp	 DWORD PTR _retval$[ebp]

; 565  : 	}
; 566  : #else
; 567  : 	__asm__ __volatile__("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
; 568  : #endif
; 569  : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_lrintl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _lrintf
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_x$ = 8							; size = 4
_lrintf	PROC						; COMDAT

; 545  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 546  : 	long retval = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0

; 547  : #if defined(_MSC_VER)
; 548  : 	_asm {
; 549  : 		fld [x];

  0000b	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 550  : 		fistp [retval];

  0000e	db 5d fc	 fistp	 DWORD PTR _retval$[ebp]

; 551  : 	}
; 552  : #else
; 553  : 	__asm__ __volatile__("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
; 554  : #endif
; 555  : 	return retval;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _retval$[ebp]

; 556  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_lrintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _lrint
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_x$ = 8							; size = 8
_lrint	PROC						; COMDAT

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 532  : 	long retval = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _retval$[ebp], 0

; 533  : #if defined(_MSC_VER)
; 534  : 	_asm {
; 535  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 536  : 		fistp [retval];

  0000e	db 5d fc	 fistp	 DWORD PTR _retval$[ebp]

; 537  : 	}
; 538  : #else
; 539  : 	__asm__ __volatile__("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
; 540  : #endif
; 541  : 	return retval;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _retval$[ebp]

; 542  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_lrint	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _rintl
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 8
_rintl	PROC						; COMDAT

; 516  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 517  : 	long double retval = 0.0l;

  00006	d9 ee		 fldz
  00008	dd 5d f8	 fstp	 QWORD PTR _retval$[ebp]

; 518  : #if defined(_MSC_VER)
; 519  : 	_asm {
; 520  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 521  : 		frndint;

  0000e	d9 fc		 frndint

; 522  : 		fstp [retval];

  00010	dd 5d f8	 fstp	 QWORD PTR _retval$[ebp]

; 523  : 	}
; 524  : #else
; 525  : 	__asm__ __volatile__("frndint;": "=t" (retval) : "0" (x));
; 526  : #endif
; 527  : 	return retval;

  00013	dd 45 f8	 fld	 QWORD PTR _retval$[ebp]

; 528  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_rintl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _rintf
_TEXT	SEGMENT
_retval$ = -4						; size = 4
_x$ = 8							; size = 4
_rintf	PROC						; COMDAT

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 502  : 	float retval = 0.0;

  00004	d9 ee		 fldz
  00006	d9 5d fc	 fstp	 DWORD PTR _retval$[ebp]

; 503  : #if defined(_MSC_VER)
; 504  : 	_asm {
; 505  : 		fld [x];

  00009	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 506  : 		frndint;

  0000c	d9 fc		 frndint

; 507  : 		fstp [retval];

  0000e	d9 5d fc	 fstp	 DWORD PTR _retval$[ebp]

; 508  : 	}
; 509  : #else
; 510  : 	__asm__ __volatile__("frndint;": "=t" (retval) : "0" (x));
; 511  : #endif
; 512  : 	return retval;

  00011	d9 45 fc	 fld	 DWORD PTR _retval$[ebp]

; 513  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_rintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _rint
_TEXT	SEGMENT
_retval$ = -8						; size = 8
_x$ = 8							; size = 8
_rint	PROC						; COMDAT

; 486  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 487  : 	double retval = 0.0;

  00006	d9 ee		 fldz
  00008	dd 5d f8	 fstp	 QWORD PTR _retval$[ebp]

; 488  : #if defined(_MSC_VER)
; 489  : 	_asm {
; 490  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 491  : 		frndint;

  0000e	d9 fc		 frndint

; 492  : 		fstp [retval];

  00010	dd 5d f8	 fstp	 QWORD PTR _retval$[ebp]

; 493  : 	}
; 494  : #else
; 495  : 	__asm__ __volatile__("frndint;": "=t" (retval) : "0" (x));
; 496  : #endif
; 497  : 	return retval;

  00013	dd 45 f8	 fld	 QWORD PTR _retval$[ebp]

; 498  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_rint	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _logbl
_TEXT	SEGMENT
_res$ = -8						; size = 8
_x$ = 8							; size = 8
_logbl	PROC						; COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 390  : 	long double res = 0.0l;

  00006	d9 ee		 fldz
  00008	dd 5d f8	 fstp	 QWORD PTR _res$[ebp]

; 391  : #if defined(_MSC_VER)
; 392  : 	_asm {
; 393  : 		fld[x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 394  : 		fxtract;

  0000e	d9 f4		 fxtract

; 395  : 		fstp[res];

  00010	dd 5d f8	 fstp	 QWORD PTR _res$[ebp]

; 396  : 	}
; 397  : #else
; 398  : 	__asm__ __volatile__("fxtract\n\t"
; 399  : 		"fstp	%%st" : "=t" (res) : "0" (x));
; 400  : #endif
; 401  : 	return res;

  00013	dd 45 f8	 fld	 QWORD PTR _res$[ebp]

; 402  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_logbl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _logbf
_TEXT	SEGMENT
_res$ = -4						; size = 4
_x$ = 8							; size = 4
_logbf	PROC						; COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 374  : 	float res = 0.0F;

  00004	d9 ee		 fldz
  00006	d9 5d fc	 fstp	 DWORD PTR _res$[ebp]

; 375  : #if defined(_MSC_VER)
; 376  : 	_asm {
; 377  : 		fld[x];

  00009	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 378  : 		fxtract;

  0000c	d9 f4		 fxtract

; 379  : 		fstp[res];

  0000e	d9 5d fc	 fstp	 DWORD PTR _res$[ebp]

; 380  : 	}
; 381  : #else
; 382  : 	__asm__ __volatile__("fxtract\n\t"
; 383  : 		"fstp	%%st" : "=t" (res) : "0" (x));
; 384  : #endif
; 385  : 	return res;

  00011	d9 45 fc	 fld	 DWORD PTR _res$[ebp]

; 386  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
_logbf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT _logb
_TEXT	SEGMENT
_res$ = -8						; size = 8
_x$ = 8							; size = 8
_logb	PROC						; COMDAT

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 358  : 	double res = 0.0;

  00006	d9 ee		 fldz
  00008	dd 5d f8	 fstp	 QWORD PTR _res$[ebp]

; 359  : #if defined(_MSC_VER)
; 360  : 	_asm {
; 361  : 		fld [x];

  0000b	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 362  : 		fxtract;

  0000e	d9 f4		 fxtract

; 363  : 		fstp [res];

  00010	dd 5d f8	 fstp	 QWORD PTR _res$[ebp]

; 364  : 	}
; 365  : #else
; 366  : 	__asm__ __volatile__("fxtract\n\t"
; 367  : 		"fstp	%%st" : "=t" (res) : "0" (x));
; 368  : #endif
; 369  : 	return res;

  00013	dd 45 f8	 fld	 QWORD PTR _res$[ebp]

; 370  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
_logb	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbitl
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 8
___signbitl PROC					; COMDAT

; 271  : __CRT_INLINE int __cdecl __signbitl(long double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 272  : 	unsigned short stw;
; 273  : #if defined(_MSC_VER)
; 274  : 	_asm {
; 275  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 276  : 		fxam;

  00007	d9 e5		 fxam

; 277  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 278  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 279  : 	}
; 280  : #else
; 281  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 282  : #endif
; 283  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 284  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbitl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbitf
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 4
___signbitf PROC					; COMDAT

; 256  : __CRT_INLINE int __cdecl __signbitf(float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 257  : 	unsigned short stw;
; 258  : #if defined(_MSC_VER)
; 259  : 	_asm {
; 260  : 		fld [x];

  00004	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 261  : 		fxam;

  00007	d9 e5		 fxam

; 262  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 263  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 264  : 	}
; 265  : #else
; 266  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 267  : #endif
; 268  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 269  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbitf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___signbit
_TEXT	SEGMENT
_stw$ = -4						; size = 2
_x$ = 8							; size = 8
___signbit PROC						; COMDAT

; 241  : __CRT_INLINE int __cdecl __signbit(double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 242  : 	unsigned short stw;
; 243  : #if defined(_MSC_VER)
; 244  : 	_asm {
; 245  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 246  : 		fxam;

  00007	d9 e5		 fxam

; 247  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 248  : 		mov word ptr[stw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _stw$[ebp], ax

; 249  : 	}
; 250  : #else
; 251  : 	__asm__ __volatile__("fxam; fstsw %%ax;": "=a" (stw) : "t" (x));
; 252  : #endif
; 253  : 	return stw & 0x0200;

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _stw$[ebp]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 254  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___signbit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnanl
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 8
___isnanl PROC						; COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 212  : 	unsigned short sw;
; 213  : #if defined(_MSC_VER)
; 214  : 	_asm {
; 215  : 		fld [_x];

  00004	dd 45 08	 fld	 QWORD PTR __x$[ebp]

; 216  : 		fxam;

  00007	d9 e5		 fxam

; 217  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 218  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 219  : 	}
; 220  : #else
; 221  : 	__asm__ __volatile__("fxam;"
; 222  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 223  : #endif
; 224  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 225  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 226  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnanl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnanf
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 4
___isnanf PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 194  : 	unsigned short sw;
; 195  : #if defined(_MSC_VER)
; 196  : 	_asm {
; 197  : 		fld [_x];

  00004	d9 45 08	 fld	 DWORD PTR __x$[ebp]

; 198  : 		fxam;

  00007	d9 e5		 fxam

; 199  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 200  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 201  : 	}
; 202  : #else
; 203  : 	__asm__ __volatile__("fxam;"
; 204  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 205  : #endif
; 206  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 207  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 208  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnanf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___isnan
_TEXT	SEGMENT
_sw$ = -4						; size = 2
__x$ = 8						; size = 8
___isnan PROC						; COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 176  : 	unsigned short sw;
; 177  : #if defined(_MSC_VER)
; 178  : 	_asm {
; 179  : 		fld [_x];

  00004	dd 45 08	 fld	 QWORD PTR __x$[ebp]

; 180  : 		fxam;

  00007	d9 e5		 fxam

; 181  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 182  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 183  : 	}
; 184  : #else
; 185  : 	__asm__ __volatile__("fxam;"
; 186  : 		"fstsw %%ax": "=a" (sw) : "t" (_x));
; 187  : #endif
; 188  : 	return (sw & (FP_NAN | FP_NORMAL | FP_INFINITE | FP_ZERO | FP_SUBNORMAL))
; 189  : 		== FP_NAN;

  00010	0f b7 4d fc	 movzx	 ecx, WORD PTR _sw$[ebp]
  00014	33 c0		 xor	 eax, eax
  00016	81 e1 00 45 00
	00		 and	 ecx, 17664		; 00004500H
  0001c	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00022	0f 94 c0	 sete	 al

; 190  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
___isnan ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassify
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 8
___fpclassify PROC					; COMDAT

; 125  : __CRT_INLINE int __cdecl __fpclassify(double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 126  : 	unsigned short sw;
; 127  : #if defined(_MSC_VER)
; 128  : 	_asm {
; 129  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 130  : 		fxam;

  00007	d9 e5		 fxam

; 131  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 132  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 133  : 	}
; 134  : #else
; 135  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 136  : #endif
; 137  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 138  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassify ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassifyf
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 4
___fpclassifyf PROC					; COMDAT

; 139  : __CRT_INLINE int __cdecl __fpclassifyf(float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 140  : 	unsigned short sw;
; 141  : #if defined(_MSC_VER)
; 142  : 	_asm {
; 143  : 		fld [x];

  00004	d9 45 08	 fld	 DWORD PTR _x$[ebp]

; 144  : 		fxam;

  00007	d9 e5		 fxam

; 145  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 146  : 		mov word ptr[sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 147  : 	}
; 148  : #else
; 149  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 150  : #endif
; 151  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 152  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassifyf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\include\math.h
;	COMDAT ___fpclassifyl
_TEXT	SEGMENT
_sw$ = -4						; size = 2
_x$ = 8							; size = 8
___fpclassifyl PROC					; COMDAT

; 111  : __CRT_INLINE int __cdecl __fpclassifyl(long double x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 112  : 	unsigned short sw;
; 113  : #if defined(_MSC_VER)
; 114  : 	_asm {
; 115  : 		fld [x];

  00004	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 116  : 		fxam;

  00007	d9 e5		 fxam

; 117  : 		fstsw ax;

  00009	9b df e0	 fstsw	 ax

; 118  : 		mov word ptr [sw], ax;

  0000c	66 89 45 fc	 mov	 WORD PTR _sw$[ebp], ax

; 119  : 	}
; 120  : #else
; 121  : 	__asm__ __volatile__("fxam; fstsw %%ax;" : "=a" (sw) : "t" (x));
; 122  : #endif
; 123  : 	return sw & (FP_NAN | FP_NORMAL | FP_ZERO);

  00010	0f b7 45 fc	 movzx	 eax, WORD PTR _sw$[ebp]
  00014	25 00 45 00 00	 and	 eax, 17664		; 00004500H

; 124  : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
___fpclassifyl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\log.c
;	COMDAT _log
_TEXT	SEGMENT
_k$ = -4						; size = 4
_x$ = 8							; size = 8
_log	PROC						; COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 86   : 	double hfsq,f,s,z,R,w,t1,t2,dk;
; 87   : 	int k,hx,i,j;
; 88   : 	unsigned lx;
; 89   : 
; 90   : 	hx = __HI(x);		/* high word of x */
; 91   : 	lx = __LO(x);		/* low  word of x */
; 92   : 
; 93   : 	k=0;
; 94   : 	if (hx < 0x00100000) {			/* x < 2**-1022  */

  00004	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  00007	33 c9		 xor	 ecx, ecx
  00009	81 fa 00 00 10
	00		 cmp	 edx, 1048576		; 00100000H
  0000f	7d 42		 jge	 SHORT $LN19@log

; 95   : 	    if (((hx&0x7fffffff)|lx)==0) 

  00011	8b c2		 mov	 eax, edx
  00013	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00018	0b 45 08	 or	 eax, DWORD PTR _x$[ebp]
  0001b	75 10		 jne	 SHORT $LN15@log

; 96   : 		return -two54/zero;		/* log(+-0)=-inf */

  0001d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c350000000000000
  00023	dc 35 00 00 00
	00		 fdiv	 QWORD PTR _zero

; 132  : 	}
; 133  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN15@log:

; 97   : 	    if (hx<0) return (x-x)/zero;	/* log(-#) = NaN */

  0002d	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00030	85 d2		 test	 edx, edx
  00032	79 0c		 jns	 SHORT $LN14@log
  00034	dc e8		 fsub	 ST(0), ST(0)
  00036	dc 35 00 00 00
	00		 fdiv	 QWORD PTR _zero

; 132  : 	}
; 133  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN14@log:

; 98   : 	    k -= 54; x *= two54; /* subnormal number, scale up x */

  00040	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4350000000000000
  00046	b9 ca ff ff ff	 mov	 ecx, -54		; ffffffcaH
  0004b	dd 55 08	 fst	 QWORD PTR _x$[ebp]
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  00051	eb 03		 jmp	 SHORT $LN16@log
$LN19@log:
  00053	dd 45 08	 fld	 QWORD PTR _x$[ebp]
$LN16@log:

; 99   : 	    hx = __HI(x);		/* high word of x */
; 100  : 	} 
; 101  : 	if (hx >= 0x7ff00000) return x+x;

  00056	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  0005c	7c 06		 jl	 SHORT $LN23@log
  0005e	dc c0		 fadd	 ST(0), ST(0)

; 132  : 	}
; 133  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN23@log:
  00064	56		 push	 esi

; 102  : 	k += (hx>>20)-1023;

  00065	8b f2		 mov	 esi, edx
  00067	81 c1 01 fc ff
	ff		 add	 ecx, -1023		; fffffc01H

; 103  : 	hx &= 0x000fffff;

  0006d	81 e2 ff ff 0f
	00		 and	 edx, 1048575		; 000fffffH
  00073	c1 fe 14	 sar	 esi, 20			; 00000014H
  00076	03 f1		 add	 esi, ecx
  00078	dd d8		 fstp	 ST(0)

; 104  : 	i = (hx+0x95f64)&0x100000;

  0007a	8d 8a 64 5f 09
	00		 lea	 ecx, DWORD PTR [edx+614244]
  00080	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H

; 105  : 	__HI(x) = hx|(i^0x3ff00000);	/* normalize x or x/2 */

  00086	8b c1		 mov	 eax, ecx

; 106  : 	k += (i>>20);

  00088	c1 f9 14	 sar	 ecx, 20			; 00000014H
  0008b	35 00 00 f0 3f	 xor	 eax, 1072693248		; 3ff00000H
  00090	03 f1		 add	 esi, ecx
  00092	0b c2		 or	 eax, edx
  00094	89 75 fc	 mov	 DWORD PTR _k$[ebp], esi
  00097	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax

; 107  : 	f = x-1.0;
; 108  : 	if((0x000fffff&(2+hx))<3) {	/* |f| < 2**-20 */

  0009a	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0009d	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  000a0	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  000a5	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  000ab	83 f8 03	 cmp	 eax, 3
  000ae	7d 63		 jge	 SHORT $LN7@log

; 109  : 	    if(f==zero) if(k==0) return zero;  else {dk=(double)k;

  000b0	dd 05 00 00 00
	00		 fld	 QWORD PTR _zero
  000b6	dd e1		 fucom	 ST(1)
  000b8	df e0		 fnstsw	 ax
  000ba	f6 c4 44	 test	 ah, 68			; 00000044H
  000bd	7a 26		 jp	 SHORT $LN29@log
  000bf	dd d9		 fstp	 ST(1)
  000c1	85 f6		 test	 esi, esi
  000c3	0f 84 21 01 00
	00		 je	 $LN20@log
  000c9	dd d8		 fstp	 ST(0)
  000cb	db 45 fc	 fild	 DWORD PTR _k$[ebp]
  000ce	5e		 pop	 esi

; 110  : 				 return dk*ln2_hi+dk*ln2_lo;}

  000cf	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3dea39ef35793c76
  000d5	d8 c9		 fmul	 ST(0), ST(1)
  000d7	d9 c9		 fxch	 ST(1)
  000d9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe62e42fee00000
  000df	de c1		 faddp	 ST(1), ST(0)

; 132  : 	}
; 133  : }

  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
$LN29@log:
  000e5	dd d8		 fstp	 ST(0)

; 111  : 	    R = f*f*(0.5-0.33333333333333333*f);

  000e7	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd5555555555555
  000ed	d8 c9		 fmul	 ST(0), ST(1)
  000ef	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe0000000000000
  000f5	d9 c1		 fld	 ST(1)
  000f7	d8 ca		 fmul	 ST(0), ST(2)
  000f9	de c9		 fmulp	 ST(1), ST(0)

; 112  : 	    if(k==0) return f-R; else {dk=(double)k;

  000fb	85 f6		 test	 esi, esi
  000fd	0f 84 c0 00 00
	00		 je	 $LN48@log
  00103	db 45 fc	 fild	 DWORD PTR _k$[ebp]

; 113  : 	    	     return dk*ln2_hi-((R-dk*ln2_lo)-f);}

  00106	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fe62e42fee00000
  0010c	d8 c9		 fmul	 ST(0), ST(1)
  0010e	e9 c7 00 00 00	 jmp	 $LN46@log
$LN7@log:

; 114  : 	}
; 115  :  	s = f/(2.0+f); 

  00113	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4000000000000000

; 116  : 	dk = (double)k;
; 117  : 	z = s*s;
; 118  : 	i = hx-0x6147a;

  00119	8d 82 86 eb f9
	ff		 lea	 eax, DWORD PTR [edx-398458]
  0011f	d8 c1		 fadd	 ST(0), ST(1)

; 119  : 	w = z*z;
; 120  : 	j = 0x6b851-hx;

  00121	b9 51 b8 06 00	 mov	 ecx, 440401		; 0006b851H
  00126	2b ca		 sub	 ecx, edx

; 121  : 	t1= w*(Lg2+w*(Lg4+w*Lg6)); 
; 122  : 	t2= z*(Lg1+w*(Lg3+w*(Lg5+w*Lg7))); 
; 123  : 	i |= j;

  00128	0b c8		 or	 ecx, eax
  0012a	d8 f9		 fdivr	 ST(0), ST(1)
  0012c	db 45 fc	 fild	 DWORD PTR _k$[ebp]
  0012f	d9 c1		 fld	 ST(1)
  00131	d8 ca		 fmul	 ST(0), ST(2)
  00133	d9 c0		 fld	 ST(0)
  00135	d8 c9		 fmul	 ST(0), ST(1)
  00137	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fc2f112df3e5244
  0013d	d8 c9		 fmul	 ST(0), ST(1)
  0013f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fc7466496cb03de
  00145	d8 c9		 fmul	 ST(0), ST(1)
  00147	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd2492494229359
  0014d	d8 c9		 fmul	 ST(0), ST(1)
  0014f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe5555555555593
  00155	de ca		 fmulp	 ST(2), ST(0)
  00157	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fc39a09d078c69f
  0015d	d8 c9		 fmul	 ST(0), ST(1)
  0015f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fcc71c51d8e78af
  00165	d8 c9		 fmul	 ST(0), ST(1)
  00167	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fd999999997fa04
  0016d	de c9		 fmulp	 ST(1), ST(0)

; 124  : 	R = t2+t1;

  0016f	de c1		 faddp	 ST(1), ST(0)

; 125  : 	if(i>0) {

  00171	7e 46		 jle	 SHORT $LN6@log

; 126  : 	    hfsq=0.5*f*f;

  00173	d9 c3		 fld	 ST(3)
  00175	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  0017b	d8 cc		 fmul	 ST(0), ST(4)

; 127  : 	    if(k==0) return f-(hfsq-s*(hfsq+R)); else

  0017d	85 f6		 test	 esi, esi
  0017f	75 0f		 jne	 SHORT $LN5@log
  00181	dd da		 fstp	 ST(2)
  00183	d8 c1		 fadd	 ST(0), ST(1)
  00185	5e		 pop	 esi
  00186	de ca		 fmulp	 ST(2), ST(0)
  00188	de e1		 fsubrp	 ST(1), ST(0)
  0018a	de e9		 fsubp	 ST(1), ST(0)

; 132  : 	}
; 133  : }

  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c3		 ret	 0
$LN5@log:

; 128  : 		     return dk*ln2_hi-((hfsq-(s*(hfsq+R)+dk*ln2_lo))-f);

  00190	d9 c2		 fld	 ST(2)
  00192	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe62e42fee00000
  00198	d9 c1		 fld	 ST(1)
  0019a	de c3		 faddp	 ST(3), ST(0)
  0019c	d9 ca		 fxch	 ST(2)
  0019e	5e		 pop	 esi
  0019f	de cc		 fmulp	 ST(4), ST(0)
  001a1	d9 ca		 fxch	 ST(2)
  001a3	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3dea39ef35793c76
  001a9	de c3		 faddp	 ST(3), ST(0)
  001ab	d9 c9		 fxch	 ST(1)
  001ad	de e2		 fsubrp	 ST(2), ST(0)

; 131  : 		     return dk*ln2_hi-((s*(f-R)-dk*ln2_lo)-f);

  001af	d9 c9		 fxch	 ST(1)
  001b1	de e2		 fsubrp	 ST(2), ST(0)
  001b3	de e1		 fsubrp	 ST(1), ST(0)

; 132  : 	}
; 133  : }

  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
$LN6@log:

; 129  : 	} else {
; 130  : 	    if(k==0) return f-s*(f-R); else

  001b9	85 f6		 test	 esi, esi
  001bb	75 0d		 jne	 SHORT $LN2@log
  001bd	dd d9		 fstp	 ST(1)
  001bf	d8 ea		 fsubr	 ST(0), ST(2)
  001c1	de c9		 fmulp	 ST(1), ST(0)
$LN48@log:
  001c3	de e9		 fsubp	 ST(1), ST(0)
  001c5	5e		 pop	 esi

; 132  : 	}
; 133  : }

  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c3		 ret	 0
$LN2@log:

; 131  : 		     return dk*ln2_hi-((s*(f-R)-dk*ln2_lo)-f);

  001ca	d9 c1		 fld	 ST(1)
  001cc	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe62e42fee00000
  001d2	d9 c4		 fld	 ST(4)
  001d4	de e2		 fsubrp	 ST(2), ST(0)
  001d6	d9 c9		 fxch	 ST(1)
  001d8	de cb		 fmulp	 ST(3), ST(0)
$LN46@log:
  001da	d9 c9		 fxch	 ST(1)
  001dc	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3dea39ef35793c76
  001e2	de ea		 fsubp	 ST(2), ST(0)
  001e4	d9 c9		 fxch	 ST(1)
  001e6	de e2		 fsubrp	 ST(2), ST(0)
  001e8	de e1		 fsubrp	 ST(1), ST(0)
$LN20@log:
  001ea	5e		 pop	 esi

; 132  : 	}
; 133  : }

  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
_log	ENDP
_TEXT	ENDS
END
