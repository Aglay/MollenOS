; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\math\log.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_zero	DQ	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_ln2_hi	DQ	03fe62e42fee00000r		; 0.693147
_ln2_lo	DQ	03dea39ef35793c76r		; 1.90821e-010
_two54	DQ	04350000000000000r		; 1.80144e+016
_Lg1	DQ	03fe5555555555593r		; 0.666667
_Lg2	DQ	03fd999999997fa04r		; 0.4
_Lg3	DQ	03fd2492494229359r		; 0.285714
_Lg4	DQ	03fcc71c51d8e78afr		; 0.222222
_Lg5	DQ	03fc7466496cb03der		; 0.181836
_Lg6	DQ	03fc39a09d078c69fr		; 0.153138
_Lg7	DQ	03fc2f112df3e5244r		; 0.147982
CONST	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@c350000000000000
PUBLIC	_log
EXTRN	__fltused:DWORD
;	COMDAT __real@4000000000000000
; File c:\users\phail\documents\github\mollenos\clib\src\math\log.c
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@c350000000000000
CONST	SEGMENT
__real@c350000000000000 DQ 0c350000000000000r	; -1.80144e+016
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT _log
_TEXT	SEGMENT
_k$ = -4						; size = 4
_x$ = 8							; size = 8
_log	PROC						; COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 86   : 	double hfsq,f,s,z,R,w,t1,t2,dk;
; 87   : 	int k,hx,i,j;
; 88   : 	unsigned lx;
; 89   : 
; 90   : 	hx = __HI(x);		/* high word of x */
; 91   : 	lx = __LO(x);		/* low  word of x */
; 92   : 
; 93   : 	k=0;
; 94   : 	if (hx < 0x00100000) {			/* x < 2**-1022  */

  00004	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00007	33 c9		 xor	 ecx, ecx
  00009	3d 00 00 10 00	 cmp	 eax, 1048576		; 00100000H
  0000e	7d 43		 jge	 SHORT $LN19@log

; 95   : 	    if (((hx&0x7fffffff)|lx)==0) 

  00010	8b c8		 mov	 ecx, eax
  00012	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  00018	0b 4d 08	 or	 ecx, DWORD PTR _x$[ebp]
  0001b	75 10		 jne	 SHORT $LN15@log

; 96   : 		return -two54/zero;		/* log(+-0)=-inf */

  0001d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c350000000000000
  00023	dc 35 00 00 00
	00		 fdiv	 QWORD PTR _zero

; 132  : 	}
; 133  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN15@log:

; 97   : 	    if (hx<0) return (x-x)/zero;	/* log(-#) = NaN */

  0002d	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00030	85 c0		 test	 eax, eax
  00032	79 0c		 jns	 SHORT $LN14@log
  00034	dc e0		 fsubr	 ST(0), ST(0)
  00036	dc 35 00 00 00
	00		 fdiv	 QWORD PTR _zero

; 132  : 	}
; 133  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN14@log:

; 98   : 	    k -= 54; x *= two54; /* subnormal number, scale up x */

  00040	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _two54
  00046	b9 ca ff ff ff	 mov	 ecx, -54		; ffffffcaH
  0004b	dd 55 08	 fst	 QWORD PTR _x$[ebp]
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00051	eb 03		 jmp	 SHORT $LN16@log
$LN19@log:
  00053	dd 45 08	 fld	 QWORD PTR _x$[ebp]
$LN16@log:

; 99   : 	    hx = __HI(x);		/* high word of x */
; 100  : 	} 
; 101  : 	if (hx >= 0x7ff00000) return x+x;

  00056	3d 00 00 f0 7f	 cmp	 eax, 2146435072		; 7ff00000H
  0005b	7c 06		 jl	 SHORT $LN22@log
  0005d	dc c0		 fadd	 ST(0), ST(0)

; 132  : 	}
; 133  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN22@log:

; 102  : 	k += (hx>>20)-1023;

  00063	8b d0		 mov	 edx, eax
  00065	dd d8		 fstp	 ST(0)

; 103  : 	hx &= 0x000fffff;

  00067	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  0006c	c1 fa 14	 sar	 edx, 20			; 00000014H
  0006f	8d 94 11 01 fc
	ff ff		 lea	 edx, DWORD PTR [ecx+edx-1023]
  00076	8b c8		 mov	 ecx, eax
  00078	56		 push	 esi

; 104  : 	i = (hx+0x95f64)&0x100000;

  00079	8d 81 64 5f 09
	00		 lea	 eax, DWORD PTR [ecx+614244]
  0007f	25 00 00 10 00	 and	 eax, 1048576		; 00100000H

; 105  : 	__HI(x) = hx|(i^0x3ff00000);	/* normalize x or x/2 */

  00084	8b f0		 mov	 esi, eax

; 106  : 	k += (i>>20);

  00086	c1 f8 14	 sar	 eax, 20			; 00000014H
  00089	81 f6 00 00 f0
	3f		 xor	 esi, 1072693248		; 3ff00000H
  0008f	03 d0		 add	 edx, eax
  00091	0b f1		 or	 esi, ecx
  00093	89 75 0c	 mov	 DWORD PTR _x$[ebp+4], esi

; 107  : 	f = x-1.0;

  00096	dd 45 08	 fld	 QWORD PTR _x$[ebp]

; 108  : 	if((0x000fffff&(2+hx))<3) {	/* |f| < 2**-20 */

  00099	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  0009c	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  000a2	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  000a7	89 55 fc	 mov	 DWORD PTR _k$[ebp], edx
  000aa	5e		 pop	 esi
  000ab	83 f8 03	 cmp	 eax, 3
  000ae	7d 77		 jge	 SHORT $LN7@log

; 109  : 	    if(f==zero) if(k==0) return zero;  else {dk=(double)k;

  000b0	d9 c0		 fld	 ST(0)
  000b2	dd 05 00 00 00
	00		 fld	 QWORD PTR _zero
  000b8	d9 c0		 fld	 ST(0)
  000ba	dd ea		 fucomp	 ST(2)
  000bc	df e0		 fnstsw	 ax
  000be	dd d9		 fstp	 ST(1)
  000c0	f6 c4 44	 test	 ah, 68			; 00000044H
  000c3	7a 25		 jp	 SHORT $LN28@log
  000c5	dd d9		 fstp	 ST(1)
  000c7	85 d2		 test	 edx, edx
  000c9	0f 84 2c 01 00
	00		 je	 $LN1@log
  000cf	dd d8		 fstp	 ST(0)
  000d1	db 45 fc	 fild	 DWORD PTR _k$[ebp]

; 110  : 				 return dk*ln2_hi+dk*ln2_lo;}

  000d4	dd 05 00 00 00
	00		 fld	 QWORD PTR _ln2_lo
  000da	d8 c9		 fmul	 ST(0), ST(1)
  000dc	d9 c9		 fxch	 ST(1)
  000de	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ln2_hi
  000e4	de c1		 faddp	 ST(1), ST(0)

; 132  : 	}
; 133  : }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
$LN28@log:

; 109  : 	    if(f==zero) if(k==0) return zero;  else {dk=(double)k;

  000ea	dd d8		 fstp	 ST(0)

; 111  : 	    R = f*f*(0.5-0.33333333333333333*f);

  000ec	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fd5555555555555
  000f2	d8 c9		 fmul	 ST(0), ST(1)
  000f4	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@3fe0000000000000
  000fa	d9 c1		 fld	 ST(1)
  000fc	d8 ca		 fmul	 ST(0), ST(2)
  000fe	de c9		 fmulp	 ST(1), ST(0)

; 112  : 	    if(k==0) return f-R; else {dk=(double)k;

  00100	85 d2		 test	 edx, edx
  00102	0f 84 95 00 00
	00		 je	 $LN47@log
  00108	db 45 fc	 fild	 DWORD PTR _k$[ebp]

; 113  : 	    	     return dk*ln2_hi-((R-dk*ln2_lo)-f);}

  0010b	dd 05 00 00 00
	00		 fld	 QWORD PTR _ln2_hi
  00111	d8 c9		 fmul	 ST(0), ST(1)

; 131  : 		     return dk*ln2_hi-((s*(f-R)-dk*ln2_lo)-f);

  00113	d9 c9		 fxch	 ST(1)
  00115	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ln2_lo
  0011b	de ea		 fsubp	 ST(2), ST(0)
  0011d	d9 c9		 fxch	 ST(1)
  0011f	de e2		 fsubrp	 ST(2), ST(0)
  00121	de e1		 fsubrp	 ST(1), ST(0)

; 132  : 	}
; 133  : }

  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
$LN7@log:

; 114  : 	}
; 115  :  	s = f/(2.0+f); 

  00127	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4000000000000000

; 116  : 	dk = (double)k;
; 117  : 	z = s*s;
; 118  : 	i = hx-0x6147a;
; 119  : 	w = z*z;
; 120  : 	j = 0x6b851-hx;

  0012d	b8 51 b8 06 00	 mov	 eax, 440401		; 0006b851H
  00132	d8 c1		 fadd	 ST(0), ST(1)
  00134	2b c1		 sub	 eax, ecx
  00136	81 c1 86 eb f9
	ff		 add	 ecx, -398458		; fff9eb86H

; 121  : 	t1= w*(Lg2+w*(Lg4+w*Lg6)); 
; 122  : 	t2= z*(Lg1+w*(Lg3+w*(Lg5+w*Lg7))); 
; 123  : 	i |= j;

  0013c	0b c1		 or	 eax, ecx
  0013e	d8 f9		 fdivr	 ST(0), ST(1)
  00140	db 45 fc	 fild	 DWORD PTR _k$[ebp]
  00143	d9 c1		 fld	 ST(1)
  00145	d8 ca		 fmul	 ST(0), ST(2)
  00147	d9 c0		 fld	 ST(0)
  00149	d8 c9		 fmul	 ST(0), ST(1)
  0014b	dd 05 00 00 00
	00		 fld	 QWORD PTR _Lg7
  00151	d8 c9		 fmul	 ST(0), ST(1)
  00153	dc 05 00 00 00
	00		 fadd	 QWORD PTR _Lg5
  00159	d8 c9		 fmul	 ST(0), ST(1)
  0015b	dc 05 00 00 00
	00		 fadd	 QWORD PTR _Lg3
  00161	d8 c9		 fmul	 ST(0), ST(1)
  00163	dc 05 00 00 00
	00		 fadd	 QWORD PTR _Lg1
  00169	de ca		 fmulp	 ST(2), ST(0)
  0016b	dd 05 00 00 00
	00		 fld	 QWORD PTR _Lg6
  00171	d8 c9		 fmul	 ST(0), ST(1)
  00173	dc 05 00 00 00
	00		 fadd	 QWORD PTR _Lg4
  00179	d8 c9		 fmul	 ST(0), ST(1)
  0017b	dc 05 00 00 00
	00		 fadd	 QWORD PTR _Lg2
  00181	de c9		 fmulp	 ST(1), ST(0)

; 124  : 	R = t2+t1;

  00183	de c1		 faddp	 ST(1), ST(0)

; 125  : 	if(i>0) {

  00185	7e 44		 jle	 SHORT $LN6@log

; 126  : 	    hfsq=0.5*f*f;

  00187	d9 c3		 fld	 ST(3)
  00189	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  0018f	d8 cc		 fmul	 ST(0), ST(4)

; 127  : 	    if(k==0) return f-(hfsq-s*(hfsq+R)); else

  00191	85 d2		 test	 edx, edx
  00193	75 0e		 jne	 SHORT $LN5@log
  00195	dd da		 fstp	 ST(2)
  00197	d8 c1		 fadd	 ST(0), ST(1)
  00199	de ca		 fmulp	 ST(2), ST(0)
  0019b	de e1		 fsubrp	 ST(1), ST(0)
$LN47@log:
  0019d	de e9		 fsubp	 ST(1), ST(0)

; 132  : 	}
; 133  : }

  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c3		 ret	 0
$LN5@log:

; 128  : 		     return dk*ln2_hi-((hfsq-(s*(hfsq+R)+dk*ln2_lo))-f);

  001a3	d9 c2		 fld	 ST(2)
  001a5	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ln2_hi
  001ab	d9 c1		 fld	 ST(1)
  001ad	de c3		 faddp	 ST(3), ST(0)
  001af	d9 ca		 fxch	 ST(2)
  001b1	de cc		 fmulp	 ST(4), ST(0)
  001b3	d9 ca		 fxch	 ST(2)
  001b5	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ln2_lo
  001bb	de c3		 faddp	 ST(3), ST(0)
  001bd	d9 c9		 fxch	 ST(1)
  001bf	de e2		 fsubrp	 ST(2), ST(0)

; 131  : 		     return dk*ln2_hi-((s*(f-R)-dk*ln2_lo)-f);

  001c1	d9 c9		 fxch	 ST(1)
  001c3	de e2		 fsubrp	 ST(2), ST(0)
  001c5	de e1		 fsubrp	 ST(1), ST(0)

; 132  : 	}
; 133  : }

  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c3		 ret	 0
$LN6@log:

; 129  : 	} else {
; 130  : 	    if(k==0) return f-s*(f-R); else

  001cb	85 d2		 test	 edx, edx
  001cd	75 0c		 jne	 SHORT $LN2@log
  001cf	dd d9		 fstp	 ST(1)
  001d1	d8 ea		 fsubr	 ST(0), ST(2)
  001d3	de c9		 fmulp	 ST(1), ST(0)
  001d5	de e9		 fsubp	 ST(1), ST(0)

; 132  : 	}
; 133  : }

  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
$LN2@log:

; 131  : 		     return dk*ln2_hi-((s*(f-R)-dk*ln2_lo)-f);

  001db	d9 c1		 fld	 ST(1)
  001dd	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ln2_hi
  001e3	d9 c4		 fld	 ST(4)
  001e5	de e2		 fsubrp	 ST(2), ST(0)
  001e7	d9 c9		 fxch	 ST(1)
  001e9	de cb		 fmulp	 ST(3), ST(0)
  001eb	d9 c9		 fxch	 ST(1)
  001ed	dc 0d 00 00 00
	00		 fmul	 QWORD PTR _ln2_lo
  001f3	de ea		 fsubp	 ST(2), ST(0)
  001f5	d9 c9		 fxch	 ST(1)
  001f7	de e2		 fsubrp	 ST(2), ST(0)
  001f9	de e1		 fsubrp	 ST(1), ST(0)
$LN1@log:

; 132  : 	}
; 133  : }

  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c3		 ret	 0
_log	ENDP
_TEXT	ENDS
END
