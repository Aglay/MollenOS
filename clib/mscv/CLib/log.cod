; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\math\log.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_zero	DQ	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_ln2_hi	DQ	03fe62e42fee00000r		; 0.693147
_ln2_lo	DQ	03dea39ef35793c76r		; 1.90821e-010
_two54	DQ	04350000000000000r		; 1.80144e+016
_Lg1	DQ	03fe5555555555593r		; 0.666667
_Lg2	DQ	03fd999999997fa04r		; 0.4
_Lg3	DQ	03fd2492494229359r		; 0.285714
_Lg4	DQ	03fcc71c51d8e78afr		; 0.222222
_Lg5	DQ	03fc7466496cb03der		; 0.181836
_Lg6	DQ	03fc39a09d078c69fr		; 0.153138
_Lg7	DQ	03fc2f112df3e5244r		; 0.147982
CONST	ENDS
PUBLIC	_log
PUBLIC	__real@3dea39ef35793c76
PUBLIC	__real@3fc2f112df3e5244
PUBLIC	__real@3fc39a09d078c69f
PUBLIC	__real@3fc7466496cb03de
PUBLIC	__real@3fcc71c51d8e78af
PUBLIC	__real@3fd2492494229359
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fd999999997fa04
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe5555555555593
PUBLIC	__real@3fe62e42fee00000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4350000000000000
PUBLIC	__real@c350000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@c350000000000000
CONST	SEGMENT
__real@c350000000000000 DQ 0c350000000000000r	; -1.80144e+016
CONST	ENDS
;	COMDAT __real@4350000000000000
CONST	SEGMENT
__real@4350000000000000 DQ 04350000000000000r	; 1.80144e+016
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe62e42fee00000
CONST	SEGMENT
__real@3fe62e42fee00000 DQ 03fe62e42fee00000r	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe5555555555593
CONST	SEGMENT
__real@3fe5555555555593 DQ 03fe5555555555593r	; 0.666667
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd999999997fa04
CONST	SEGMENT
__real@3fd999999997fa04 DQ 03fd999999997fa04r	; 0.4
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd2492494229359
CONST	SEGMENT
__real@3fd2492494229359 DQ 03fd2492494229359r	; 0.285714
CONST	ENDS
;	COMDAT __real@3fcc71c51d8e78af
CONST	SEGMENT
__real@3fcc71c51d8e78af DQ 03fcc71c51d8e78afr	; 0.222222
CONST	ENDS
;	COMDAT __real@3fc7466496cb03de
CONST	SEGMENT
__real@3fc7466496cb03de DQ 03fc7466496cb03der	; 0.181836
CONST	ENDS
;	COMDAT __real@3fc39a09d078c69f
CONST	SEGMENT
__real@3fc39a09d078c69f DQ 03fc39a09d078c69fr	; 0.153138
CONST	ENDS
;	COMDAT __real@3fc2f112df3e5244
CONST	SEGMENT
__real@3fc2f112df3e5244 DQ 03fc2f112df3e5244r	; 0.147982
CONST	ENDS
;	COMDAT __real@3dea39ef35793c76
CONST	SEGMENT
__real@3dea39ef35793c76 DQ 03dea39ef35793c76r	; 1.90821e-010
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\phail\documents\github\mollenos\clib\src\math\log.c
;	COMDAT _log
_TEXT	SEGMENT
tv389 = 8						; size = 8
tv385 = 8						; size = 8
tv380 = 8						; size = 8
tv369 = 8						; size = 8
tv362 = 8						; size = 8
tv356 = 8						; size = 8
tv342 = 8						; size = 8
tv335 = 8						; size = 8
tv330 = 8						; size = 8
tv324 = 8						; size = 8
_x$ = 8							; size = 8
_log	PROC						; COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : 	double hfsq,f,s,z,R,w,t1,t2,dk;
; 87   : 	int k,hx,i,j;
; 88   : 	unsigned lx;
; 89   : 
; 90   : 	hx = __HI(x);		/* high word of x */
; 91   : 	lx = __LO(x);		/* low  word of x */
; 92   : 
; 93   : 	k=0;
; 94   : 	if (hx < 0x00100000) {			/* x < 2**-1022  */

  00003	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  00006	33 c9		 xor	 ecx, ecx
  00008	81 fa 00 00 10
	00		 cmp	 edx, 1048576		; 00100000H
  0000e	7d 5c		 jge	 SHORT $LN19@log

; 95   : 	    if (((hx&0x7fffffff)|lx)==0) 

  00010	8b c2		 mov	 eax, edx
  00012	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00017	0b 45 08	 or	 eax, DWORD PTR _x$[ebp]
  0001a	75 1a		 jne	 SHORT $LN15@log

; 96   : 		return -two54/zero;		/* log(+-0)=-inf */

  0001c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c350000000000000
  00024	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR _zero
  0002c	f2 0f 11 45 08	 movsd	 QWORD PTR tv389[ebp], xmm0
  00031	dd 45 08	 fld	 QWORD PTR tv389[ebp]

; 132  : 	}
; 133  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN15@log:

; 97   : 	    if (hx<0) return (x-x)/zero;	/* log(-#) = NaN */

  00036	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  0003b	85 d2		 test	 edx, edx
  0003d	79 16		 jns	 SHORT $LN14@log
  0003f	f2 0f 5c c0	 subsd	 xmm0, xmm0
  00043	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR _zero
  0004b	f2 0f 11 45 08	 movsd	 QWORD PTR tv385[ebp], xmm0
  00050	dd 45 08	 fld	 QWORD PTR tv385[ebp]

; 132  : 	}
; 133  : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN14@log:

; 98   : 	    k -= 54; x *= two54; /* subnormal number, scale up x */

  00055	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4350000000000000
  0005d	b9 ca ff ff ff	 mov	 ecx, -54		; ffffffcaH
  00062	f2 0f 11 45 08	 movsd	 QWORD PTR _x$[ebp], xmm0
  00067	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  0006a	eb 05		 jmp	 SHORT $LN16@log
$LN19@log:
  0006c	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
$LN16@log:

; 99   : 	    hx = __HI(x);		/* high word of x */
; 100  : 	} 
; 101  : 	if (hx >= 0x7ff00000) return x+x;

  00071	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  00077	7c 0e		 jl	 SHORT $LN13@log
  00079	f2 0f 58 c0	 addsd	 xmm0, xmm0
  0007d	f2 0f 11 45 08	 movsd	 QWORD PTR tv380[ebp], xmm0
  00082	dd 45 08	 fld	 QWORD PTR tv380[ebp]

; 132  : 	}
; 133  : }

  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN13@log:
  00087	56		 push	 esi

; 102  : 	k += (hx>>20)-1023;

  00088	8b f2		 mov	 esi, edx
  0008a	81 c1 01 fc ff
	ff		 add	 ecx, -1023		; fffffc01H

; 103  : 	hx &= 0x000fffff;

  00090	81 e2 ff ff 0f
	00		 and	 edx, 1048575		; 000fffffH
  00096	c1 fe 14	 sar	 esi, 20			; 00000014H
  00099	03 f1		 add	 esi, ecx

; 104  : 	i = (hx+0x95f64)&0x100000;

  0009b	8d 8a 64 5f 09
	00		 lea	 ecx, DWORD PTR [edx+614244]
  000a1	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H

; 105  : 	__HI(x) = hx|(i^0x3ff00000);	/* normalize x or x/2 */

  000a7	8b c1		 mov	 eax, ecx

; 106  : 	k += (i>>20);

  000a9	c1 f9 14	 sar	 ecx, 20			; 00000014H
  000ac	35 00 00 f0 3f	 xor	 eax, 1072693248		; 3ff00000H
  000b1	03 f1		 add	 esi, ecx
  000b3	0b c2		 or	 eax, edx
  000b5	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax

; 107  : 	f = x-1.0;
; 108  : 	if((0x000fffff&(2+hx))<3) {	/* |f| < 2**-20 */

  000b8	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  000bb	f2 0f 10 55 08	 movsd	 xmm2, QWORD PTR _x$[ebp]
  000c0	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  000c5	f2 0f 5c 15 00
	00 00 00	 subsd	 xmm2, QWORD PTR __real@3ff0000000000000
  000cd	83 f8 03	 cmp	 eax, 3
  000d0	0f 8d ad 00 00
	00		 jge	 $LN7@log

; 109  : 	    if(f==zero) if(k==0) return zero;  else {dk=(double)k;

  000d6	66 0f 2e 15 00
	00 00 00	 ucomisd xmm2, QWORD PTR _zero
  000de	9f		 lahf
  000df	f6 c4 44	 test	 ah, 68			; 00000044H
  000e2	7a 37		 jp	 SHORT $LN9@log
  000e4	85 f6		 test	 esi, esi
  000e6	75 09		 jne	 SHORT $LN10@log
  000e8	dd 05 00 00 00
	00		 fld	 QWORD PTR _zero
  000ee	5e		 pop	 esi

; 132  : 	}
; 133  : }

  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
$LN10@log:
  000f1	66 0f 6e ce	 movd	 xmm1, esi

; 109  : 	    if(f==zero) if(k==0) return zero;  else {dk=(double)k;

  000f5	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  000f9	5e		 pop	 esi

; 110  : 				 return dk*ln2_hi+dk*ln2_lo;}

  000fa	0f 28 c1	 movaps	 xmm0, xmm1
  000fd	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe62e42fee00000
  00105	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3dea39ef35793c76
  0010d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00111	f2 0f 11 45 08	 movsd	 QWORD PTR tv369[ebp], xmm0
  00116	dd 45 08	 fld	 QWORD PTR tv369[ebp]

; 132  : 	}
; 133  : }

  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
$LN9@log:

; 111  : 	    R = f*f*(0.5-0.33333333333333333*f);

  0011b	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3fe0000000000000
  00123	0f 28 c2	 movaps	 xmm0, xmm2
  00126	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd5555555555555
  0012e	f2 0f 5c d8	 subsd	 xmm3, xmm0
  00132	0f 28 c2	 movaps	 xmm0, xmm2
  00135	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00139	f2 0f 59 d8	 mulsd	 xmm3, xmm0

; 112  : 	    if(k==0) return f-R; else {dk=(double)k;

  0013d	85 f6		 test	 esi, esi
  0013f	75 0f		 jne	 SHORT $LN8@log
  00141	f2 0f 5c d3	 subsd	 xmm2, xmm3
  00145	5e		 pop	 esi
  00146	f2 0f 11 55 08	 movsd	 QWORD PTR tv362[ebp], xmm2
  0014b	dd 45 08	 fld	 QWORD PTR tv362[ebp]

; 132  : 	}
; 133  : }

  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
$LN8@log:
  00150	66 0f 6e c6	 movd	 xmm0, esi

; 112  : 	    if(k==0) return f-R; else {dk=(double)k;

  00154	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00158	5e		 pop	 esi

; 113  : 	    	     return dk*ln2_hi-((R-dk*ln2_lo)-f);}

  00159	66 0f 28 c8	 movapd	 xmm1, xmm0
  0015d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3dea39ef35793c76
  00165	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe62e42fee00000
  0016d	f2 0f 5c d8	 subsd	 xmm3, xmm0
  00171	f2 0f 5c da	 subsd	 xmm3, xmm2
  00175	f2 0f 5c cb	 subsd	 xmm1, xmm3
  00179	f2 0f 11 4d 08	 movsd	 QWORD PTR tv356[ebp], xmm1
  0017e	dd 45 08	 fld	 QWORD PTR tv356[ebp]

; 132  : 	}
; 133  : }

  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
$LN7@log:

; 114  : 	}
; 115  :  	s = f/(2.0+f); 

  00183	0f 28 c2	 movaps	 xmm0, xmm2
  00186	66 0f 6e ee	 movd	 xmm5, esi
  0018a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00192	66 0f 28 f2	 movapd	 xmm6, xmm2

; 116  : 	dk = (double)k;
; 117  : 	z = s*s;
; 118  : 	i = hx-0x6147a;

  00196	8d 82 86 eb f9
	ff		 lea	 eax, DWORD PTR [edx-398458]

; 119  : 	w = z*z;
; 120  : 	j = 0x6b851-hx;

  0019c	b9 51 b8 06 00	 mov	 ecx, 440401		; 0006b851H
  001a1	2b ca		 sub	 ecx, edx

; 121  : 	t1= w*(Lg2+w*(Lg4+w*Lg6)); 
; 122  : 	t2= z*(Lg1+w*(Lg3+w*(Lg5+w*Lg7))); 
; 123  : 	i |= j;

  001a3	0b c8		 or	 ecx, eax
  001a5	f2 0f 5e f0	 divsd	 xmm6, xmm0
  001a9	f3 0f e6 ed	 cvtdq2pd xmm5, xmm5
  001ad	66 0f 28 c6	 movapd	 xmm0, xmm6
  001b1	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  001b5	66 0f 28 c8	 movapd	 xmm1, xmm0
  001b9	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001bd	66 0f 28 e1	 movapd	 xmm4, xmm1
  001c1	f2 0f 59 25 00
	00 00 00	 mulsd	 xmm4, QWORD PTR __real@3fc2f112df3e5244
  001c9	f2 0f 58 25 00
	00 00 00	 addsd	 xmm4, QWORD PTR __real@3fc7466496cb03de
  001d1	f2 0f 59 e1	 mulsd	 xmm4, xmm1
  001d5	f2 0f 58 25 00
	00 00 00	 addsd	 xmm4, QWORD PTR __real@3fd2492494229359
  001dd	f2 0f 59 e1	 mulsd	 xmm4, xmm1
  001e1	f2 0f 58 25 00
	00 00 00	 addsd	 xmm4, QWORD PTR __real@3fe5555555555593
  001e9	f2 0f 59 e0	 mulsd	 xmm4, xmm0
  001ed	66 0f 28 c1	 movapd	 xmm0, xmm1
  001f1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc39a09d078c69f
  001f9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc71c51d8e78af
  00201	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00205	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd999999997fa04
  0020d	f2 0f 59 c1	 mulsd	 xmm0, xmm1

; 124  : 	R = t2+t1;

  00211	f2 0f 58 e0	 addsd	 xmm4, xmm0

; 125  : 	if(i>0) {

  00215	7e 62		 jle	 SHORT $LN6@log

; 126  : 	    hfsq=0.5*f*f;

  00217	66 0f 28 da	 movapd	 xmm3, xmm2
  0021b	f2 0f 59 1d 00
	00 00 00	 mulsd	 xmm3, QWORD PTR __real@3fe0000000000000
  00223	f2 0f 59 da	 mulsd	 xmm3, xmm2

; 127  : 	    if(k==0) return f-(hfsq-s*(hfsq+R)); else

  00227	66 0f 28 c3	 movapd	 xmm0, xmm3
  0022b	f2 0f 58 c4	 addsd	 xmm0, xmm4
  0022f	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  00233	85 f6		 test	 esi, esi
  00235	75 13		 jne	 SHORT $LN5@log
  00237	f2 0f 5c d8	 subsd	 xmm3, xmm0
  0023b	5e		 pop	 esi
  0023c	f2 0f 5c d3	 subsd	 xmm2, xmm3
  00240	f2 0f 11 55 08	 movsd	 QWORD PTR tv342[ebp], xmm2
  00245	dd 45 08	 fld	 QWORD PTR tv342[ebp]

; 132  : 	}
; 133  : }

  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
$LN5@log:

; 128  : 		     return dk*ln2_hi-((hfsq-(s*(hfsq+R)+dk*ln2_lo))-f);

  0024a	66 0f 28 cd	 movapd	 xmm1, xmm5
  0024e	f2 0f 59 2d 00
	00 00 00	 mulsd	 xmm5, QWORD PTR __real@3dea39ef35793c76
  00256	5e		 pop	 esi
  00257	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe62e42fee00000
  0025f	f2 0f 58 c5	 addsd	 xmm0, xmm5
  00263	f2 0f 5c d8	 subsd	 xmm3, xmm0
  00267	f2 0f 5c da	 subsd	 xmm3, xmm2
  0026b	f2 0f 5c cb	 subsd	 xmm1, xmm3
  0026f	f2 0f 11 4d 08	 movsd	 QWORD PTR tv335[ebp], xmm1
  00274	dd 45 08	 fld	 QWORD PTR tv335[ebp]

; 132  : 	}
; 133  : }

  00277	5d		 pop	 ebp
  00278	c3		 ret	 0
$LN6@log:

; 129  : 	} else {
; 130  : 	    if(k==0) return f-s*(f-R); else

  00279	0f 28 c2	 movaps	 xmm0, xmm2
  0027c	f2 0f 5c c4	 subsd	 xmm0, xmm4
  00280	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  00284	85 f6		 test	 esi, esi
  00286	75 0f		 jne	 SHORT $LN2@log
  00288	f2 0f 5c d0	 subsd	 xmm2, xmm0
  0028c	5e		 pop	 esi
  0028d	f2 0f 11 55 08	 movsd	 QWORD PTR tv330[ebp], xmm2
  00292	dd 45 08	 fld	 QWORD PTR tv330[ebp]

; 132  : 	}
; 133  : }

  00295	5d		 pop	 ebp
  00296	c3		 ret	 0
$LN2@log:

; 131  : 		     return dk*ln2_hi-((s*(f-R)-dk*ln2_lo)-f);

  00297	66 0f 28 cd	 movapd	 xmm1, xmm5
  0029b	f2 0f 59 2d 00
	00 00 00	 mulsd	 xmm5, QWORD PTR __real@3dea39ef35793c76
  002a3	5e		 pop	 esi
  002a4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe62e42fee00000
  002ac	f2 0f 5c c5	 subsd	 xmm0, xmm5
  002b0	f2 0f 5c c2	 subsd	 xmm0, xmm2
  002b4	f2 0f 5c c8	 subsd	 xmm1, xmm0
  002b8	f2 0f 11 4d 08	 movsd	 QWORD PTR tv324[ebp], xmm1
  002bd	dd 45 08	 fld	 QWORD PTR tv324[ebp]

; 132  : 	}
; 133  : }

  002c0	5d		 pop	 ebp
  002c1	c3		 ret	 0
_log	ENDP
_TEXT	ENDS
END
