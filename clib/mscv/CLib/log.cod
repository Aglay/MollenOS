; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\log.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_zero	DQ	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
_ln2_hi	DQ	03fe62e42fee00000r		; 0.693147
_ln2_lo	DQ	03dea39ef35793c76r		; 1.90821e-010
_two54	DQ	04350000000000000r		; 1.80144e+016
_Lg1	DQ	03fe5555555555593r		; 0.666667
_Lg2	DQ	03fd999999997fa04r		; 0.4
_Lg3	DQ	03fd2492494229359r		; 0.285714
_Lg4	DQ	03fcc71c51d8e78afr		; 0.222222
_Lg5	DQ	03fc7466496cb03der		; 0.181836
_Lg6	DQ	03fc39a09d078c69fr		; 0.153138
_Lg7	DQ	03fc2f112df3e5244r		; 0.147982
CONST	ENDS
PUBLIC	_log
PUBLIC	__real@3dea39ef35793c76
PUBLIC	__real@3fc2f112df3e5244
PUBLIC	__real@3fc39a09d078c69f
PUBLIC	__real@3fc7466496cb03de
PUBLIC	__real@3fcc71c51d8e78af
PUBLIC	__real@3fd2492494229359
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fd999999997fa04
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe5555555555593
PUBLIC	__real@3fe62e42fee00000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4350000000000000
PUBLIC	__real@c350000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@c350000000000000
CONST	SEGMENT
__real@c350000000000000 DQ 0c350000000000000r	; -1.80144e+016
CONST	ENDS
;	COMDAT __real@4350000000000000
CONST	SEGMENT
__real@4350000000000000 DQ 04350000000000000r	; 1.80144e+016
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe62e42fee00000
CONST	SEGMENT
__real@3fe62e42fee00000 DQ 03fe62e42fee00000r	; 0.693147
CONST	ENDS
;	COMDAT __real@3fe5555555555593
CONST	SEGMENT
__real@3fe5555555555593 DQ 03fe5555555555593r	; 0.666667
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd999999997fa04
CONST	SEGMENT
__real@3fd999999997fa04 DQ 03fd999999997fa04r	; 0.4
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd2492494229359
CONST	SEGMENT
__real@3fd2492494229359 DQ 03fd2492494229359r	; 0.285714
CONST	ENDS
;	COMDAT __real@3fcc71c51d8e78af
CONST	SEGMENT
__real@3fcc71c51d8e78af DQ 03fcc71c51d8e78afr	; 0.222222
CONST	ENDS
;	COMDAT __real@3fc7466496cb03de
CONST	SEGMENT
__real@3fc7466496cb03de DQ 03fc7466496cb03der	; 0.181836
CONST	ENDS
;	COMDAT __real@3fc39a09d078c69f
CONST	SEGMENT
__real@3fc39a09d078c69f DQ 03fc39a09d078c69fr	; 0.153138
CONST	ENDS
;	COMDAT __real@3fc2f112df3e5244
CONST	SEGMENT
__real@3fc2f112df3e5244 DQ 03fc2f112df3e5244r	; 0.147982
CONST	ENDS
;	COMDAT __real@3dea39ef35793c76
CONST	SEGMENT
__real@3dea39ef35793c76 DQ 03dea39ef35793c76r	; 1.90821e-010
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\log.c
;	COMDAT _log
_TEXT	SEGMENT
_R$ = -8						; size = 8
tv378 = 8						; size = 8
tv367 = 8						; size = 8
tv353 = 8						; size = 8
tv346 = 8						; size = 8
tv341 = 8						; size = 8
tv335 = 8						; size = 8
_f$ = 8							; size = 8
_x$ = 8							; size = 8
_log	PROC						; COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : 	double hfsq,f,s,z,R,w,t1,t2,dk;
; 87   : 	int k,hx,i,j;
; 88   : 	unsigned lx;
; 89   : 
; 90   : 	hx = __HI(x);		/* high word of x */
; 91   : 	lx = __LO(x);		/* low  word of x */
; 92   : 
; 93   : 	k=0;
; 94   : 	if (hx < 0x00100000) {			/* x < 2**-1022  */

  00003	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  00006	83 ec 08	 sub	 esp, 8
  00009	33 c9		 xor	 ecx, ecx
  0000b	81 fa 00 00 10
	00		 cmp	 edx, 1048576		; 00100000H
  00011	7d 49		 jge	 SHORT $LN16@log

; 95   : 	    if (((hx&0x7fffffff)|lx)==0) 

  00013	8b c2		 mov	 eax, edx
  00015	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  0001a	0b 45 08	 or	 eax, DWORD PTR _x$[ebp]
  0001d	75 10		 jne	 SHORT $LN15@log

; 96   : 		return -two54/zero;		/* log(+-0)=-inf */

  0001f	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@c350000000000000
  00025	dc 35 00 00 00
	00		 fdiv	 QWORD PTR _zero

; 132  : 	}
; 133  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN15@log:

; 97   : 	    if (hx<0) return (x-x)/zero;	/* log(-#) = NaN */

  0002f	85 d2		 test	 edx, edx
  00031	79 0f		 jns	 SHORT $LN14@log
  00033	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00036	dc e8		 fsub	 ST(0), ST(0)
  00038	dc 35 00 00 00
	00		 fdiv	 QWORD PTR _zero

; 132  : 	}
; 133  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN14@log:

; 98   : 	    k -= 54; x *= two54; /* subnormal number, scale up x */

  00042	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  00047	b9 ca ff ff ff	 mov	 ecx, -54		; ffffffcaH
  0004c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4350000000000000
  00054	f2 0f 11 45 08	 movsd	 QWORD PTR _x$[ebp], xmm0
  00059	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
$LN16@log:

; 99   : 	    hx = __HI(x);		/* high word of x */
; 100  : 	} 
; 101  : 	if (hx >= 0x7ff00000) return x+x;

  0005c	81 fa 00 00 f0
	7f		 cmp	 edx, 2146435072		; 7ff00000H
  00062	7c 09		 jl	 SHORT $LN13@log
  00064	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00067	dc c0		 fadd	 ST(0), ST(0)

; 132  : 	}
; 133  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN13@log:
  0006d	56		 push	 esi

; 102  : 	k += (hx>>20)-1023;

  0006e	8b f2		 mov	 esi, edx
  00070	81 c1 01 fc ff
	ff		 add	 ecx, -1023		; fffffc01H

; 103  : 	hx &= 0x000fffff;

  00076	81 e2 ff ff 0f
	00		 and	 edx, 1048575		; 000fffffH
  0007c	c1 fe 14	 sar	 esi, 20			; 00000014H
  0007f	03 f1		 add	 esi, ecx

; 104  : 	i = (hx+0x95f64)&0x100000;

  00081	8d 8a 64 5f 09
	00		 lea	 ecx, DWORD PTR [edx+614244]
  00087	81 e1 00 00 10
	00		 and	 ecx, 1048576		; 00100000H

; 105  : 	__HI(x) = hx|(i^0x3ff00000);	/* normalize x or x/2 */

  0008d	8b c1		 mov	 eax, ecx

; 106  : 	k += (i>>20);

  0008f	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00092	35 00 00 f0 3f	 xor	 eax, 1072693248		; 3ff00000H
  00097	03 f1		 add	 esi, ecx
  00099	0b c2		 or	 eax, edx
  0009b	89 45 0c	 mov	 DWORD PTR _x$[ebp+4], eax

; 107  : 	f = x-1.0;
; 108  : 	if((0x000fffff&(2+hx))<3) {	/* |f| < 2**-20 */

  0009e	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  000a1	f2 0f 10 55 08	 movsd	 xmm2, QWORD PTR _x$[ebp]
  000a6	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  000ab	f2 0f 5c 15 00
	00 00 00	 subsd	 xmm2, QWORD PTR __real@3ff0000000000000
  000b3	f2 0f 11 55 08	 movsd	 QWORD PTR _f$[ebp], xmm2
  000b8	83 f8 03	 cmp	 eax, 3
  000bb	0f 8d b7 00 00
	00		 jge	 $LN7@log

; 109  : 	    if(f==zero) if(k==0) return zero;  else {dk=(double)k;

  000c1	66 0f 2e 15 00
	00 00 00	 ucomisd xmm2, QWORD PTR _zero
  000c9	9f		 lahf
  000ca	f6 c4 44	 test	 ah, 68			; 00000044H
  000cd	7a 3c		 jp	 SHORT $LN9@log
  000cf	85 f6		 test	 esi, esi
  000d1	75 0b		 jne	 SHORT $LN10@log
  000d3	dd 05 00 00 00
	00		 fld	 QWORD PTR _zero
  000d9	5e		 pop	 esi

; 132  : 	}
; 133  : }

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$LN10@log:
  000de	66 0f 6e ce	 movd	 xmm1, esi

; 109  : 	    if(f==zero) if(k==0) return zero;  else {dk=(double)k;

  000e2	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  000e6	5e		 pop	 esi

; 110  : 				 return dk*ln2_hi+dk*ln2_lo;}

  000e7	66 0f 28 c1	 movapd	 xmm0, xmm1
  000eb	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe62e42fee00000
  000f3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3dea39ef35793c76
  000fb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000ff	f2 0f 11 45 08	 movsd	 QWORD PTR tv378[ebp], xmm0
  00104	dd 45 08	 fld	 QWORD PTR tv378[ebp]

; 132  : 	}
; 133  : }

  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
$LN9@log:

; 111  : 	    R = f*f*(0.5-0.33333333333333333*f);

  0010b	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3fe0000000000000
  00113	66 0f 28 c2	 movapd	 xmm0, xmm2
  00117	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd5555555555555
  0011f	f2 0f 5c d8	 subsd	 xmm3, xmm0
  00123	66 0f 28 c2	 movapd	 xmm0, xmm2
  00127	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  0012b	f2 0f 59 d8	 mulsd	 xmm3, xmm0
  0012f	f2 0f 11 5d f8	 movsd	 QWORD PTR _R$[ebp], xmm3

; 112  : 	    if(k==0) return f-R; else {dk=(double)k;

  00134	85 f6		 test	 esi, esi
  00136	75 0b		 jne	 SHORT $LN8@log
  00138	dd 45 08	 fld	 QWORD PTR _f$[ebp]
  0013b	dc 65 f8	 fsub	 QWORD PTR _R$[ebp]
  0013e	5e		 pop	 esi

; 132  : 	}
; 133  : }

  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
$LN8@log:
  00143	66 0f 6e c6	 movd	 xmm0, esi

; 112  : 	    if(k==0) return f-R; else {dk=(double)k;

  00147	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0014b	5e		 pop	 esi

; 113  : 	    	     return dk*ln2_hi-((R-dk*ln2_lo)-f);}

  0014c	66 0f 28 c8	 movapd	 xmm1, xmm0
  00150	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3dea39ef35793c76
  00158	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe62e42fee00000
  00160	f2 0f 5c d8	 subsd	 xmm3, xmm0
  00164	f2 0f 5c da	 subsd	 xmm3, xmm2
  00168	f2 0f 5c cb	 subsd	 xmm1, xmm3
  0016c	f2 0f 11 4d 08	 movsd	 QWORD PTR tv367[ebp], xmm1
  00171	dd 45 08	 fld	 QWORD PTR tv367[ebp]

; 132  : 	}
; 133  : }

  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
$LN7@log:

; 114  : 	}
; 115  :  	s = f/(2.0+f); 

  00178	66 0f 28 c2	 movapd	 xmm0, xmm2
  0017c	66 0f 6e ee	 movd	 xmm5, esi
  00180	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00188	66 0f 28 f2	 movapd	 xmm6, xmm2

; 116  : 	dk = (double)k;
; 117  : 	z = s*s;
; 118  : 	i = hx-0x6147a;

  0018c	8d 82 86 eb f9
	ff		 lea	 eax, DWORD PTR [edx-398458]

; 119  : 	w = z*z;
; 120  : 	j = 0x6b851-hx;

  00192	b9 51 b8 06 00	 mov	 ecx, 440401		; 0006b851H
  00197	2b ca		 sub	 ecx, edx

; 121  : 	t1= w*(Lg2+w*(Lg4+w*Lg6)); 
; 122  : 	t2= z*(Lg1+w*(Lg3+w*(Lg5+w*Lg7))); 
; 123  : 	i |= j;

  00199	0b c8		 or	 ecx, eax
  0019b	f2 0f 5e f0	 divsd	 xmm6, xmm0
  0019f	f3 0f e6 ed	 cvtdq2pd xmm5, xmm5
  001a3	66 0f 28 c6	 movapd	 xmm0, xmm6
  001a7	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  001ab	66 0f 28 c8	 movapd	 xmm1, xmm0
  001af	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001b3	66 0f 28 e1	 movapd	 xmm4, xmm1
  001b7	f2 0f 59 25 00
	00 00 00	 mulsd	 xmm4, QWORD PTR __real@3fc2f112df3e5244
  001bf	f2 0f 58 25 00
	00 00 00	 addsd	 xmm4, QWORD PTR __real@3fc7466496cb03de
  001c7	f2 0f 59 e1	 mulsd	 xmm4, xmm1
  001cb	f2 0f 58 25 00
	00 00 00	 addsd	 xmm4, QWORD PTR __real@3fd2492494229359
  001d3	f2 0f 59 e1	 mulsd	 xmm4, xmm1
  001d7	f2 0f 58 25 00
	00 00 00	 addsd	 xmm4, QWORD PTR __real@3fe5555555555593
  001df	f2 0f 59 e0	 mulsd	 xmm4, xmm0
  001e3	66 0f 28 c1	 movapd	 xmm0, xmm1
  001e7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc39a09d078c69f
  001ef	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc71c51d8e78af
  001f7	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd999999997fa04
  00203	f2 0f 59 c1	 mulsd	 xmm0, xmm1

; 124  : 	R = t2+t1;

  00207	f2 0f 58 e0	 addsd	 xmm4, xmm0

; 125  : 	if(i>0) {

  0020b	7e 66		 jle	 SHORT $LN6@log

; 126  : 	    hfsq=0.5*f*f;

  0020d	66 0f 28 da	 movapd	 xmm3, xmm2
  00211	f2 0f 59 1d 00
	00 00 00	 mulsd	 xmm3, QWORD PTR __real@3fe0000000000000
  00219	f2 0f 59 da	 mulsd	 xmm3, xmm2

; 127  : 	    if(k==0) return f-(hfsq-s*(hfsq+R)); else

  0021d	66 0f 28 c3	 movapd	 xmm0, xmm3
  00221	f2 0f 58 c4	 addsd	 xmm0, xmm4
  00225	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  00229	85 f6		 test	 esi, esi
  0022b	75 15		 jne	 SHORT $LN5@log
  0022d	f2 0f 5c d8	 subsd	 xmm3, xmm0
  00231	5e		 pop	 esi
  00232	f2 0f 5c d3	 subsd	 xmm2, xmm3
  00236	f2 0f 11 55 08	 movsd	 QWORD PTR tv353[ebp], xmm2
  0023b	dd 45 08	 fld	 QWORD PTR tv353[ebp]

; 132  : 	}
; 133  : }

  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c3		 ret	 0
$LN5@log:

; 128  : 		     return dk*ln2_hi-((hfsq-(s*(hfsq+R)+dk*ln2_lo))-f);

  00242	66 0f 28 cd	 movapd	 xmm1, xmm5
  00246	f2 0f 59 2d 00
	00 00 00	 mulsd	 xmm5, QWORD PTR __real@3dea39ef35793c76
  0024e	5e		 pop	 esi
  0024f	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe62e42fee00000
  00257	f2 0f 58 c5	 addsd	 xmm0, xmm5
  0025b	f2 0f 5c d8	 subsd	 xmm3, xmm0
  0025f	f2 0f 5c da	 subsd	 xmm3, xmm2
  00263	f2 0f 5c cb	 subsd	 xmm1, xmm3
  00267	f2 0f 11 4d 08	 movsd	 QWORD PTR tv346[ebp], xmm1
  0026c	dd 45 08	 fld	 QWORD PTR tv346[ebp]

; 132  : 	}
; 133  : }

  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	c3		 ret	 0
$LN6@log:

; 129  : 	} else {
; 130  : 	    if(k==0) return f-s*(f-R); else

  00273	66 0f 28 c2	 movapd	 xmm0, xmm2
  00277	f2 0f 5c c4	 subsd	 xmm0, xmm4
  0027b	f2 0f 59 c6	 mulsd	 xmm0, xmm6
  0027f	85 f6		 test	 esi, esi
  00281	75 11		 jne	 SHORT $LN2@log
  00283	f2 0f 5c d0	 subsd	 xmm2, xmm0
  00287	5e		 pop	 esi
  00288	f2 0f 11 55 08	 movsd	 QWORD PTR tv341[ebp], xmm2
  0028d	dd 45 08	 fld	 QWORD PTR tv341[ebp]

; 132  : 	}
; 133  : }

  00290	8b e5		 mov	 esp, ebp
  00292	5d		 pop	 ebp
  00293	c3		 ret	 0
$LN2@log:

; 131  : 		     return dk*ln2_hi-((s*(f-R)-dk*ln2_lo)-f);

  00294	66 0f 28 cd	 movapd	 xmm1, xmm5
  00298	f2 0f 59 2d 00
	00 00 00	 mulsd	 xmm5, QWORD PTR __real@3dea39ef35793c76
  002a0	5e		 pop	 esi
  002a1	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe62e42fee00000
  002a9	f2 0f 5c c5	 subsd	 xmm0, xmm5
  002ad	f2 0f 5c c2	 subsd	 xmm0, xmm2
  002b1	f2 0f 5c c8	 subsd	 xmm1, xmm0
  002b5	f2 0f 11 4d 08	 movsd	 QWORD PTR tv335[ebp], xmm1
  002ba	dd 45 08	 fld	 QWORD PTR tv335[ebp]

; 132  : 	}
; 133  : }

  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c3		 ret	 0
_log	ENDP
_TEXT	ENDS
END
