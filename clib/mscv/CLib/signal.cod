; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Phail\Documents\GitHub\MollenOS\clib\src\signal\signal.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG1305	DB	'CTRL+C', 00H
	ORG $+1
$SG1307	DB	'Illegal instruction', 00H
$SG1309	DB	'Floating-point exception', 00H
	ORG $+3
$SG1311	DB	'Illegal storage access', 00H
	ORG $+1
$SG1313	DB	'Termination request', 00H
$SG1315	DB	'CTRL+BREAK', 00H
	ORG $+1
$SG1317	DB	'Abnormal termination', 00H
	ORG $+3
_signal_list DD	02H
	DD	FLAT:$SG1305
	DD	00H
	DD	04H
	DD	FLAT:$SG1307
	DD	00H
	DD	08H
	DD	FLAT:$SG1309
	DD	00H
	DD	0bH
	DD	FLAT:$SG1311
	DD	00H
	DD	0fH
	DD	FLAT:$SG1313
	DD	00H
	DD	015H
	DD	FLAT:$SG1315
	DD	00H
	DD	06H
	DD	FLAT:$SG1317
	DD	00H
_DATA	ENDS
PUBLIC	_signal
EXTRN	___errno:PROC
; Function compile flags: /Ogtp
; File c:\users\phail\documents\github\mollenos\clib\src\signal\signal.c
;	COMDAT _signal
_TEXT	SEGMENT
_sig$ = 8						; size = 4
_func$ = 12						; size = 4
_signal	PROC						; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 29   :    __p_sig_fn_t temp;
; 30   :    unsigned int i;
; 31   : 
; 32   :    switch (sig)

  00004	8b 75 08	 mov	 esi, DWORD PTR _sig$[ebp]
  00007	8d 46 fe	 lea	 eax, DWORD PTR [esi-2]
  0000a	83 f8 13	 cmp	 eax, 19			; 00000013H
  0000d	77 37		 ja	 SHORT $LN6@signal
  0000f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN15@signal[eax]
  00016	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@signal[eax*4]
$LN7@signal:

; 46   :    }
; 47   : 
; 48   :    // check with IsBadCodePtr
; 49   :    if ( (uintptr_t)func < 4096 && func != SIG_DFL && func != SIG_IGN)

  0001d	8b 55 0c	 mov	 edx, DWORD PTR _func$[ebp]
  00020	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00026	73 09		 jae	 SHORT $LN5@signal
  00028	85 d2		 test	 edx, edx
  0002a	74 05		 je	 SHORT $LN5@signal
  0002c	83 fa 01	 cmp	 edx, 1

; 50   :    {
; 51   :       _set_errno(EINVAL);
; 52   :       return SIG_ERR;

  0002f	75 15		 jne	 SHORT $LN6@signal
$LN5@signal:

; 53   :    }
; 54   : 
; 55   :    for(i=0; i < sizeof(signal_list)/sizeof(signal_list[0]); i++)

  00031	33 c9		 xor	 ecx, ecx
  00033	33 c0		 xor	 eax, eax
$LL4@signal:

; 56   :    {
; 57   :       if ( signal_list[i].signal == sig )

  00035	39 b0 00 00 00
	00		 cmp	 DWORD PTR _signal_list[eax], esi
  0003b	74 1a		 je	 SHORT $LN13@signal

; 53   :    }
; 54   : 
; 55   :    for(i=0; i < sizeof(signal_list)/sizeof(signal_list[0]); i++)

  0003d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00040	41		 inc	 ecx
  00041	83 f8 54	 cmp	 eax, 84			; 00000054H
  00044	72 ef		 jb	 SHORT $LL4@signal
$LN6@signal:

; 33   :    {
; 34   :       case SIGINT:
; 35   :       case SIGILL:
; 36   :       case SIGFPE:
; 37   :       case SIGSEGV:
; 38   :       case SIGTERM:
; 39   :       case SIGBREAK:
; 40   :       case SIGABRT:
; 41   :          break;
; 42   : 
; 43   :       default:
; 44   :          _set_errno(EINVAL);

  00046	e8 00 00 00 00	 call	 ___errno
  0004b	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H

; 45   :          return SIG_ERR;

  00051	83 c8 ff	 or	 eax, -1
  00054	5e		 pop	 esi

; 61   :          return temp;
; 62   :       }
; 63   :    }
; 64   : 
; 65   :    /* should be impossible to get here */
; 66   :    _set_errno(EINVAL);
; 67   :    return SIG_ERR;
; 68   : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN13@signal:

; 58   :       {
; 59   :          temp = signal_list[i].handler;

  00057	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0005a	8b 04 8d 08 00
	00 00		 mov	 eax, DWORD PTR _signal_list[ecx*4+8]

; 60   :          signal_list[i].handler = func;

  00061	89 14 8d 08 00
	00 00		 mov	 DWORD PTR _signal_list[ecx*4+8], edx
  00068	5e		 pop	 esi

; 61   :          return temp;
; 62   :       }
; 63   :    }
; 64   : 
; 65   :    /* should be impossible to get here */
; 66   :    _set_errno(EINVAL);
; 67   :    return SIG_ERR;
; 68   : }

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
  0006b	90		 npad	 1
$LN16@signal:
  0006c	00 00 00 00	 DD	 $LN7@signal
  00070	00 00 00 00	 DD	 $LN6@signal
$LN15@signal:
  00074	00		 DB	 0
  00075	01		 DB	 1
  00076	00		 DB	 0
  00077	01		 DB	 1
  00078	00		 DB	 0
  00079	01		 DB	 1
  0007a	00		 DB	 0
  0007b	01		 DB	 1
  0007c	01		 DB	 1
  0007d	00		 DB	 0
  0007e	01		 DB	 1
  0007f	01		 DB	 1
  00080	01		 DB	 1
  00081	00		 DB	 0
  00082	01		 DB	 1
  00083	01		 DB	 1
  00084	01		 DB	 1
  00085	01		 DB	 1
  00086	01		 DB	 1
  00087	00		 DB	 0
_signal	ENDP
_TEXT	ENDS
PUBLIC	__default_handler
EXTRN	_exit:PROC
; Function compile flags: /Ogtp
;	COMDAT __default_handler
_TEXT	SEGMENT
_sig$ = 8						; size = 4
__default_handler PROC					; COMDAT

; 123  :    _exit(3);

  00000	6a 03		 push	 3
  00002	e8 00 00 00 00	 call	 _exit
  00007	59		 pop	 ecx

; 124  : }

  00008	c3		 ret	 0
__default_handler ENDP
_TEXT	ENDS
PUBLIC	___pxcptinfoptrs
; Function compile flags: /Ogtp
;	COMDAT ___pxcptinfoptrs
_TEXT	SEGMENT
___pxcptinfoptrs PROC					; COMDAT

; 131  : 	return NULL;

  00000	33 c0		 xor	 eax, eax

; 132  : }

  00002	c3		 ret	 0
___pxcptinfoptrs ENDP
_TEXT	ENDS
PUBLIC	_raise
; Function compile flags: /Ogtp
;	COMDAT _raise
_TEXT	SEGMENT
_sig$ = 8						; size = 4
_raise	PROC						; COMDAT

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   :    __p_sig_fn_t temp = 0;
; 77   :    unsigned int i;
; 78   : 
; 79   :    switch (sig)

  00003	8b 55 08	 mov	 edx, DWORD PTR _sig$[ebp]
  00006	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  00009	83 f8 13	 cmp	 eax, 19			; 00000013H
  0000c	77 5a		 ja	 SHORT $LN8@raise
  0000e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@raise[eax]
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN21@raise[eax*4]
$LN9@raise:

; 93   :    }
; 94   : 
; 95   : 
; 96   :    //  if(sig <= 0)
; 97   :    //    return -1;
; 98   :    //  if(sig > SIGMAX)
; 99   :    //    return -1;
; 100  : 
; 101  :    for(i=0;i<sizeof(signal_list)/sizeof(signal_list[0]);i++)

  0001c	33 c9		 xor	 ecx, ecx
  0001e	33 c0		 xor	 eax, eax
$LL7@raise:

; 102  :    {
; 103  :       if ( signal_list[i].signal == sig )

  00020	39 90 00 00 00
	00		 cmp	 DWORD PTR _signal_list[eax], edx
  00026	74 16		 je	 SHORT $LN15@raise

; 93   :    }
; 94   : 
; 95   : 
; 96   :    //  if(sig <= 0)
; 97   :    //    return -1;
; 98   :    //  if(sig > SIGMAX)
; 99   :    //    return -1;
; 100  : 
; 101  :    for(i=0;i<sizeof(signal_list)/sizeof(signal_list[0]);i++)

  00028	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002b	41		 inc	 ecx
  0002c	83 f8 54	 cmp	 eax, 84			; 00000054H
  0002f	72 ef		 jb	 SHORT $LL7@raise

; 114  :       _default_handler(sig); /* this does not return */

  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 __default_handler

; 115  :    else
; 116  :       temp(sig);

  00037	83 c4 04	 add	 esp, 4

; 117  : 
; 118  :    return 0;

  0003a	33 c0		 xor	 eax, eax

; 119  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN15@raise:

; 104  :       {
; 105  :          temp = signal_list[i].handler;

  0003e	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00041	8b 04 8d 08 00
	00 00		 mov	 eax, DWORD PTR _signal_list[ecx*4+8]

; 106  :          break;
; 107  :       }
; 108  :    }
; 109  : 
; 110  :    if(temp == SIG_IGN)// || (sig == SIGQUIT && temp == (_p_sig_fn_t)SIG_DFL))

  00048	83 f8 01	 cmp	 eax, 1

; 111  :       return 0;   /* Ignore it */

  0004b	74 17		 je	 SHORT $LN20@raise

; 112  : 
; 113  :    if(temp == SIG_DFL)

  0004d	85 c0		 test	 eax, eax
  0004f	75 0d		 jne	 SHORT $LN2@raise

; 114  :       _default_handler(sig); /* this does not return */

  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 __default_handler

; 115  :    else
; 116  :       temp(sig);

  00057	83 c4 04	 add	 esp, 4

; 117  : 
; 118  :    return 0;

  0005a	33 c0		 xor	 eax, eax

; 119  : }

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN2@raise:

; 115  :    else
; 116  :       temp(sig);

  0005e	52		 push	 edx
  0005f	ff d0		 call	 eax
  00061	83 c4 04	 add	 esp, 4
$LN20@raise:

; 117  : 
; 118  :    return 0;

  00064	33 c0		 xor	 eax, eax

; 119  : }

  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN8@raise:

; 80   :    {
; 81   :       case SIGINT:
; 82   :       case SIGILL:
; 83   :       case SIGFPE:
; 84   :       case SIGSEGV:
; 85   :       case SIGTERM:
; 86   :       case SIGBREAK:
; 87   :       case SIGABRT:
; 88   :          break;
; 89   : 
; 90   :       default:
; 91   :          //FIXME: set last err?
; 92   :          return -1;

  00068	83 c8 ff	 or	 eax, -1

; 119  : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
  0006d	8d 49 00	 npad	 3
$LN21@raise:
  00070	00 00 00 00	 DD	 $LN9@raise
  00074	00 00 00 00	 DD	 $LN8@raise
$LN18@raise:
  00078	00		 DB	 0
  00079	01		 DB	 1
  0007a	00		 DB	 0
  0007b	01		 DB	 1
  0007c	00		 DB	 0
  0007d	01		 DB	 1
  0007e	00		 DB	 0
  0007f	01		 DB	 1
  00080	01		 DB	 1
  00081	00		 DB	 0
  00082	01		 DB	 1
  00083	01		 DB	 1
  00084	01		 DB	 1
  00085	00		 DB	 0
  00086	01		 DB	 1
  00087	01		 DB	 1
  00088	01		 DB	 1
  00089	01		 DB	 1
  0008a	01		 DB	 1
  0008b	00		 DB	 0
_raise	ENDP
_TEXT	ENDS
END
