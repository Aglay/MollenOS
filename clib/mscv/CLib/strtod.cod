; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strtod.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strtod
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@4024000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strtod.c
;	COMDAT _strtod
_TEXT	SEGMENT
tv421 = -12						; size = 8
tv414 = -12						; size = 8
tv389 = -12						; size = 8
_sign$ = -4						; size = 4
tv422 = 8						; size = 4
tv415 = 8						; size = 4
_s$ = 8							; size = 4
_sret$ = 12						; size = 4
_strtod	PROC						; COMDAT

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 9    :   long double r;		/* result */
; 10   :   int e;			/* exponent */
; 11   :   long double d;		/* scale */
; 12   :   int sign;			/* +- 1.0 */
; 13   :   int esign;
; 14   :   int i;
; 15   :   int flags=0;
; 16   : 
; 17   :   r = 0.0;

  00006	d9 ee		 fldz

; 18   :   sign = 1;
; 19   :   e = 0;

  00008	33 c9		 xor	 ecx, ecx

; 20   :   esign = 1;
; 21   : 
; 22   :   if (s == NULL)

  0000a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0000d	d9 c0		 fld	 ST(0)
  0000f	56		 push	 esi
  00010	33 f6		 xor	 esi, esi
  00012	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _sign$[ebp], 1
  00019	57		 push	 edi
  0001a	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  0001d	85 d2		 test	 edx, edx
  0001f	75 08		 jne	 SHORT $LN32@strtod
  00021	5f		 pop	 edi
  00022	dd d8		 fstp	 ST(0)
  00024	5e		 pop	 esi

; 101  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN32@strtod:

; 23   :      return (double)r;
; 24   : 
; 25   : 
; 26   :   while ((*s == ' ') || (*s == '\t'))

  00029	8a 02		 mov	 al, BYTE PTR [edx]
  0002b	3c 20		 cmp	 al, 32			; 00000020H
  0002d	74 04		 je	 SHORT $LN30@strtod
  0002f	3c 09		 cmp	 al, 9
  00031	75 03		 jne	 SHORT $LN31@strtod
$LN30@strtod:

; 27   :     s++;

  00033	42		 inc	 edx
  00034	eb f3		 jmp	 SHORT $LN32@strtod
$LN31@strtod:

; 28   : 
; 29   :   if (*s == '+')

  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3c 2b		 cmp	 al, 43			; 0000002bH
  0003a	74 0b		 je	 SHORT $LN209@strtod

; 30   :     s++;
; 31   :   else if (*s == '-')

  0003c	3c 2d		 cmp	 al, 45			; 0000002dH
  0003e	75 08		 jne	 SHORT $LN38@strtod

; 32   :   {
; 33   :     sign = -1;

  00040	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _sign$[ebp], -1
$LN209@strtod:

; 34   :     s++;

  00047	42		 inc	 edx
$LN38@strtod:

; 35   :   }
; 36   : 
; 37   :   while ((*s >= '0') && (*s <= '9'))

  00048	8a 02		 mov	 al, BYTE PTR [edx]
  0004a	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4024000000000000
  00050	3c 30		 cmp	 al, 48			; 00000030H
  00052	7c 25		 jl	 SHORT $LN121@strtod
$LN26@strtod:
  00054	3c 39		 cmp	 al, 57			; 00000039H
  00056	7f 21		 jg	 SHORT $LN121@strtod

; 38   :   {
; 39   :     flags |= 1;
; 40   :     r *= 10.0;
; 41   :     r += *s - '0';

  00058	0f be c0	 movsx	 eax, al

; 42   :     s++;

  0005b	42		 inc	 edx
  0005c	83 e8 30	 sub	 eax, 48			; 00000030H
  0005f	0b f7		 or	 esi, edi
  00061	89 45 08	 mov	 DWORD PTR tv422[ebp], eax
  00064	db 45 08	 fild	 DWORD PTR tv422[ebp]
  00067	dd 5d f4	 fstp	 QWORD PTR tv421[ebp]
  0006a	dd 45 f4	 fld	 QWORD PTR tv421[ebp]
  0006d	d9 ca		 fxch	 ST(2)
  0006f	8a 02		 mov	 al, BYTE PTR [edx]
  00071	d8 c9		 fmul	 ST(0), ST(1)
  00073	de c2		 faddp	 ST(2), ST(0)
  00075	3c 30		 cmp	 al, 48			; 00000030H
  00077	7d db		 jge	 SHORT $LN26@strtod
$LN121@strtod:

; 43   :   }
; 44   : 
; 45   :   if (*s == '.')

  00079	80 3a 2e	 cmp	 BYTE PTR [edx], 46	; 0000002eH
  0007c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3fb999999999999a
  00082	75 32		 jne	 SHORT $LN122@strtod

; 46   :   {
; 47   :     d = 0.1L;
; 48   :     s++;
; 49   :     while ((*s >= '0') && (*s <= '9'))

  00084	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00087	42		 inc	 edx
  00088	d9 c0		 fld	 ST(0)
  0008a	3c 30		 cmp	 al, 48			; 00000030H
  0008c	7c 26		 jl	 SHORT $LN154@strtod
$LN23@strtod:
  0008e	3c 39		 cmp	 al, 57			; 00000039H
  00090	7f 22		 jg	 SHORT $LN154@strtod

; 50   :     {
; 51   :       flags |= 2;
; 52   :       r += d * (*s - '0');

  00092	0f be c0	 movsx	 eax, al

; 53   :       s++;

  00095	42		 inc	 edx
  00096	83 e8 30	 sub	 eax, 48			; 00000030H
  00099	83 ce 02	 or	 esi, 2
  0009c	89 45 08	 mov	 DWORD PTR tv415[ebp], eax
  0009f	db 45 08	 fild	 DWORD PTR tv415[ebp]
  000a2	dd 5d f4	 fstp	 QWORD PTR tv414[ebp]
  000a5	dd 45 f4	 fld	 QWORD PTR tv414[ebp]
  000a8	8a 02		 mov	 al, BYTE PTR [edx]
  000aa	d8 c9		 fmul	 ST(0), ST(1)
  000ac	de c4		 faddp	 ST(4), ST(0)

; 54   :       d *= 0.1L;

  000ae	d8 c9		 fmul	 ST(0), ST(1)
  000b0	3c 30		 cmp	 al, 48			; 00000030H
  000b2	7d da		 jge	 SHORT $LN23@strtod
$LN154@strtod:
  000b4	dd d8		 fstp	 ST(0)
$LN122@strtod:

; 55   :     }
; 56   :   }
; 57   : 
; 58   :   if (flags == 0)

  000b6	85 f6		 test	 esi, esi
  000b8	75 0b		 jne	 SHORT $LN156@strtod

; 59   :   {
; 60   :     if (sret)
; 61   :       *sret = (char *)s;
; 62   :     return 0;

  000ba	dd da		 fstp	 ST(2)
  000bc	dd d9		 fstp	 ST(1)
  000be	dd d8		 fstp	 ST(0)
  000c0	e9 da 00 00 00	 jmp	 $LN13@strtod
$LN156@strtod:

; 63   :   }
; 64   : 
; 65   :   if ((*s == 'e') || (*s == 'E'))

  000c5	8a 02		 mov	 al, BYTE PTR [edx]
  000c7	dd db		 fstp	 ST(3)
  000c9	3c 65		 cmp	 al, 101			; 00000065H
  000cb	74 04		 je	 SHORT $LN18@strtod
  000cd	3c 45		 cmp	 al, 69			; 00000045H
  000cf	75 79		 jne	 SHORT $LN190@strtod
$LN18@strtod:

; 66   :   {
; 67   :     s++;
; 68   :     if (*s == '+')

  000d1	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  000d4	42		 inc	 edx
  000d5	3c 2b		 cmp	 al, 43			; 0000002bH
  000d7	75 03		 jne	 SHORT $LN17@strtod

; 69   :       s++;

  000d9	42		 inc	 edx
  000da	eb 08		 jmp	 SHORT $LN15@strtod
$LN17@strtod:

; 70   :     else if (*s == '-')

  000dc	3c 2d		 cmp	 al, 45			; 0000002dH
  000de	75 04		 jne	 SHORT $LN15@strtod

; 71   :     {
; 72   :       s++;

  000e0	42		 inc	 edx

; 73   :       esign = -1;

  000e1	83 cf ff	 or	 edi, -1
$LN15@strtod:

; 74   :     }
; 75   :     if ((*s < '0') || (*s > '9'))

  000e4	8a 02		 mov	 al, BYTE PTR [edx]
  000e6	3c 30		 cmp	 al, 48			; 00000030H
  000e8	0f 8c ad 00 00
	00		 jl	 $LN184@strtod
  000ee	3c 39		 cmp	 al, 57			; 00000039H
  000f0	0f 8f a5 00 00
	00		 jg	 $LN184@strtod
$LN11@strtod:

; 79   : 
; 80   : 		return (double)r;
; 81   :     }
; 82   : 
; 83   :     while ((*s >= '0') && (*s <= '9'))

  000f6	3c 39		 cmp	 al, 57			; 00000039H
  000f8	7f 13		 jg	 SHORT $LN10@strtod

; 84   :     {
; 85   :       e *= 10;
; 86   :       e += *s - '0';

  000fa	0f be c0	 movsx	 eax, al
  000fd	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]

; 87   :       s++;

  00100	42		 inc	 edx
  00101	8d 49 e8	 lea	 ecx, DWORD PTR [ecx-24]
  00104	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00107	8a 02		 mov	 al, BYTE PTR [edx]
  00109	3c 30		 cmp	 al, 48			; 00000030H
  0010b	7d e9		 jge	 SHORT $LN11@strtod
$LN10@strtod:

; 88   :     }
; 89   :   }
; 90   : 
; 91   :   if (esign < 0)

  0010d	85 ff		 test	 edi, edi
  0010f	79 39		 jns	 SHORT $LN190@strtod

; 92   :     for (i = 1; i <= e; i++)

  00111	dd d8		 fstp	 ST(0)
  00113	be 01 00 00 00	 mov	 esi, 1
  00118	83 f9 08	 cmp	 ecx, 8
  0011b	7c 1f		 jl	 SHORT $LC67@strtod
  0011d	8b c1		 mov	 eax, ecx
  0011f	c1 e8 03	 shr	 eax, 3
  00122	8d 34 c5 01 00
	00 00		 lea	 esi, DWORD PTR [eax*8+1]
$LN127@strtod:

; 93   :       r *= 0.1L;

  00129	d8 c9		 fmul	 ST(0), ST(1)
  0012b	d8 c9		 fmul	 ST(0), ST(1)
  0012d	d8 c9		 fmul	 ST(0), ST(1)
  0012f	d8 c9		 fmul	 ST(0), ST(1)
  00131	d8 c9		 fmul	 ST(0), ST(1)
  00133	d8 c9		 fmul	 ST(0), ST(1)
  00135	d8 c9		 fmul	 ST(0), ST(1)
  00137	d8 c9		 fmul	 ST(0), ST(1)
  00139	48		 dec	 eax
  0013a	75 ed		 jne	 SHORT $LN127@strtod
$LC67@strtod:

; 92   :     for (i = 1; i <= e; i++)

  0013c	3b f1		 cmp	 esi, ecx
  0013e	7f 41		 jg	 SHORT $LN197@strtod
  00140	2b ce		 sub	 ecx, esi
  00142	41		 inc	 ecx
$LC128@strtod:

; 93   :       r *= 0.1L;

  00143	d8 c9		 fmul	 ST(0), ST(1)
  00145	49		 dec	 ecx
  00146	75 fb		 jne	 SHORT $LC128@strtod

; 94   :   else

  00148	eb 37		 jmp	 SHORT $LN197@strtod
$LN190@strtod:
  0014a	dd da		 fstp	 ST(2)

; 95   :     for (i = 1; i <= e; i++)

  0014c	be 01 00 00 00	 mov	 esi, 1
  00151	83 f9 08	 cmp	 ecx, 8
  00154	7c 1f		 jl	 SHORT $LC70@strtod
  00156	8b c1		 mov	 eax, ecx
  00158	c1 e8 03	 shr	 eax, 3
  0015b	8d 34 c5 01 00
	00 00		 lea	 esi, DWORD PTR [eax*8+1]
$LN129@strtod:

; 96   :       r *= 10.0;

  00162	d8 c9		 fmul	 ST(0), ST(1)
  00164	d8 c9		 fmul	 ST(0), ST(1)
  00166	d8 c9		 fmul	 ST(0), ST(1)
  00168	d8 c9		 fmul	 ST(0), ST(1)
  0016a	d8 c9		 fmul	 ST(0), ST(1)
  0016c	d8 c9		 fmul	 ST(0), ST(1)
  0016e	d8 c9		 fmul	 ST(0), ST(1)
  00170	d8 c9		 fmul	 ST(0), ST(1)
  00172	48		 dec	 eax
  00173	75 ed		 jne	 SHORT $LN129@strtod
$LC70@strtod:

; 95   :     for (i = 1; i <= e; i++)

  00175	3b f1		 cmp	 esi, ecx
  00177	7f 08		 jg	 SHORT $LN197@strtod
  00179	2b ce		 sub	 ecx, esi
  0017b	41		 inc	 ecx
$LC130@strtod:

; 96   :       r *= 10.0;

  0017c	d8 c9		 fmul	 ST(0), ST(1)
  0017e	49		 dec	 ecx
  0017f	75 fb		 jne	 SHORT $LC130@strtod
$LN197@strtod:

; 97   : 
; 98   :   if (sret)

  00181	8b 45 0c	 mov	 eax, DWORD PTR _sret$[ebp]
  00184	dd d9		 fstp	 ST(1)
  00186	85 c0		 test	 eax, eax
  00188	74 02		 je	 SHORT $LN1@strtod

; 99   :     *sret = (char *)s;

  0018a	89 10		 mov	 DWORD PTR [eax], edx
$LN1@strtod:

; 100  :   return (double)(r * sign);

  0018c	db 45 fc	 fild	 DWORD PTR _sign$[ebp]
  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	dd 5d f4	 fstp	 QWORD PTR tv389[ebp]
  00194	dc 4d f4	 fmul	 QWORD PTR tv389[ebp]

; 101  : }

  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
$LN184@strtod:
  0019b	dd da		 fstp	 ST(2)
  0019d	dd d9		 fstp	 ST(1)
$LN13@strtod:

; 76   :     {
; 77   : 		if (sret)

  0019f	8b 45 0c	 mov	 eax, DWORD PTR _sret$[ebp]
  001a2	85 c0		 test	 eax, eax
  001a4	74 02		 je	 SHORT $LN34@strtod

; 78   : 			*sret = (char *)s;

  001a6	89 10		 mov	 DWORD PTR [eax], edx
$LN34@strtod:
  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi

; 101  : }

  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c3		 ret	 0
_strtod	ENDP
_TEXT	ENDS
END
