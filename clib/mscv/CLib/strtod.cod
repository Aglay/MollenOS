; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strtod.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strtod
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@4024000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strtod.c
;	COMDAT _strtod
_TEXT	SEGMENT
tv433 = -8						; size = 8
_r$ = -8						; size = 8
_s$ = 8							; size = 4
_sret$ = 12						; size = 4
_strtod	PROC						; COMDAT

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 9    :   long double r;		/* result */
; 10   :   int e;			/* exponent */
; 11   :   long double d;		/* scale */
; 12   :   int sign;			/* +- 1.0 */
; 13   :   int esign;
; 14   :   int i;
; 15   :   int flags=0;
; 16   : 
; 17   :   r = 0.0;
; 18   :   sign = 1;
; 19   :   e = 0;
; 20   :   esign = 1;
; 21   : 
; 22   :   if (s == NULL)

  00006	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00009	0f 57 c9	 xorps	 xmm1, xmm1
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	33 f6		 xor	 esi, esi
  00010	f2 0f 11 4d f8	 movsd	 QWORD PTR _r$[ebp], xmm1
  00015	bb 01 00 00 00	 mov	 ebx, 1
  0001a	33 c9		 xor	 ecx, ecx
  0001c	57		 push	 edi
  0001d	8b fb		 mov	 edi, ebx
  0001f	85 d2		 test	 edx, edx
  00021	0f 84 a4 00 00
	00		 je	 $LN20@strtod
$LL32@strtod:

; 23   :      return (double)r;
; 24   : 
; 25   : 
; 26   :   while ((*s == ' ') || (*s == '\t'))

  00027	8a 02		 mov	 al, BYTE PTR [edx]
  00029	3c 20		 cmp	 al, 32			; 00000020H
  0002b	74 04		 je	 SHORT $LN30@strtod
  0002d	3c 09		 cmp	 al, 9
  0002f	75 03		 jne	 SHORT $LN31@strtod
$LN30@strtod:

; 27   :     s++;

  00031	42		 inc	 edx
  00032	eb f3		 jmp	 SHORT $LL32@strtod
$LN31@strtod:

; 28   : 
; 29   :   if (*s == '+')

  00034	8a 02		 mov	 al, BYTE PTR [edx]
  00036	3c 2b		 cmp	 al, 43			; 0000002bH
  00038	74 07		 je	 SHORT $LN135@strtod

; 30   :     s++;
; 31   :   else if (*s == '-')

  0003a	3c 2d		 cmp	 al, 45			; 0000002dH
  0003c	75 04		 jne	 SHORT $LN38@strtod

; 32   :   {
; 33   :     sign = -1;

  0003e	83 cb ff	 or	 ebx, -1
$LN135@strtod:

; 34   :     s++;

  00041	42		 inc	 edx
$LN38@strtod:

; 35   :   }
; 36   : 
; 37   :   while ((*s >= '0') && (*s <= '9'))

  00042	8a 02		 mov	 al, BYTE PTR [edx]
  00044	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@4024000000000000
  0004c	3c 30		 cmp	 al, 48			; 00000030H
  0004e	7c 28		 jl	 SHORT $LN125@strtod
$LL26@strtod:
  00050	3c 39		 cmp	 al, 57			; 00000039H
  00052	7f 24		 jg	 SHORT $LN125@strtod

; 38   :   {
; 39   :     flags |= 1;
; 40   :     r *= 10.0;
; 41   :     r += *s - '0';

  00054	0f be c0	 movsx	 eax, al

; 42   :     s++;

  00057	42		 inc	 edx
  00058	83 e8 30	 sub	 eax, 48			; 00000030H
  0005b	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  0005f	0b f7		 or	 esi, edi
  00061	66 0f 6e c0	 movd	 xmm0, eax
  00065	8a 02		 mov	 al, BYTE PTR [edx]
  00067	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0006b	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0006f	f2 0f 11 4d f8	 movsd	 QWORD PTR _r$[ebp], xmm1
  00074	3c 30		 cmp	 al, 48			; 00000030H
  00076	7d d8		 jge	 SHORT $LL26@strtod
$LN125@strtod:

; 43   :   }
; 44   : 
; 45   :   if (*s == '.')

  00078	80 3a 2e	 cmp	 BYTE PTR [edx], 46	; 0000002eH
  0007b	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3fb999999999999a
  00083	75 39		 jne	 SHORT $LN126@strtod

; 46   :   {
; 47   :     d = 0.1L;
; 48   :     s++;
; 49   :     while ((*s >= '0') && (*s <= '9'))

  00085	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00088	42		 inc	 edx
  00089	66 0f 28 e2	 movapd	 xmm4, xmm2
  0008d	3c 30		 cmp	 al, 48			; 00000030H
  0008f	7c 2d		 jl	 SHORT $LN126@strtod
$LL23@strtod:
  00091	3c 39		 cmp	 al, 57			; 00000039H
  00093	7f 29		 jg	 SHORT $LN126@strtod

; 50   :     {
; 51   :       flags |= 2;
; 52   :       r += d * (*s - '0');

  00095	0f be c0	 movsx	 eax, al

; 53   :       s++;

  00098	42		 inc	 edx
  00099	83 e8 30	 sub	 eax, 48			; 00000030H
  0009c	83 ce 02	 or	 esi, 2
  0009f	66 0f 6e c0	 movd	 xmm0, eax
  000a3	8a 02		 mov	 al, BYTE PTR [edx]
  000a5	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000a9	f2 0f 59 c4	 mulsd	 xmm0, xmm4

; 54   :       d *= 0.1L;

  000ad	f2 0f 59 e2	 mulsd	 xmm4, xmm2
  000b1	f2 0f 58 c8	 addsd	 xmm1, xmm0
  000b5	f2 0f 11 4d f8	 movsd	 QWORD PTR _r$[ebp], xmm1
  000ba	3c 30		 cmp	 al, 48			; 00000030H
  000bc	7d d3		 jge	 SHORT $LL23@strtod
$LN126@strtod:

; 55   :     }
; 56   :   }
; 57   : 
; 58   :   if (flags == 0)

  000be	85 f6		 test	 esi, esi
  000c0	75 12		 jne	 SHORT $LN21@strtod

; 59   :   {
; 60   :     if (sret)

  000c2	8b 45 0c	 mov	 eax, DWORD PTR _sret$[ebp]
  000c5	85 c0		 test	 eax, eax
  000c7	74 02		 je	 SHORT $LN20@strtod

; 61   :       *sret = (char *)s;

  000c9	89 10		 mov	 DWORD PTR [eax], edx
$LN20@strtod:

; 62   :     return 0;

  000cb	d9 ee		 fldz
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx

; 101  : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
$LN21@strtod:

; 63   :   }
; 64   : 
; 65   :   if ((*s == 'e') || (*s == 'E'))

  000d4	8a 02		 mov	 al, BYTE PTR [edx]
  000d6	3c 65		 cmp	 al, 101			; 00000065H
  000d8	74 08		 je	 SHORT $LN18@strtod
  000da	3c 45		 cmp	 al, 69			; 00000045H
  000dc	0f 85 97 00 00
	00		 jne	 $LN9@strtod
$LN18@strtod:

; 66   :   {
; 67   :     s++;
; 68   :     if (*s == '+')

  000e2	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  000e5	42		 inc	 edx
  000e6	3c 2b		 cmp	 al, 43			; 0000002bH
  000e8	75 03		 jne	 SHORT $LN17@strtod

; 69   :       s++;

  000ea	42		 inc	 edx
  000eb	eb 08		 jmp	 SHORT $LN15@strtod
$LN17@strtod:

; 70   :     else if (*s == '-')

  000ed	3c 2d		 cmp	 al, 45			; 0000002dH
  000ef	75 04		 jne	 SHORT $LN15@strtod

; 71   :     {
; 72   :       s++;

  000f1	42		 inc	 edx

; 73   :       esign = -1;

  000f2	83 cf ff	 or	 edi, -1
$LN15@strtod:

; 74   :     }
; 75   :     if ((*s < '0') || (*s > '9'))

  000f5	8a 02		 mov	 al, BYTE PTR [edx]
  000f7	3c 30		 cmp	 al, 48			; 00000030H
  000f9	0f 8c ec 00 00
	00		 jl	 $LN13@strtod
  000ff	3c 39		 cmp	 al, 57			; 00000039H
  00101	0f 8f e4 00 00
	00		 jg	 $LN13@strtod
$LL11@strtod:

; 81   :     }
; 82   : 
; 83   :     while ((*s >= '0') && (*s <= '9'))

  00107	3c 39		 cmp	 al, 57			; 00000039H
  00109	7f 13		 jg	 SHORT $LN10@strtod

; 84   :     {
; 85   :       e *= 10;
; 86   :       e += *s - '0';

  0010b	0f be c0	 movsx	 eax, al
  0010e	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]

; 87   :       s++;

  00111	42		 inc	 edx
  00112	8d 49 e8	 lea	 ecx, DWORD PTR [ecx-24]
  00115	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00118	8a 02		 mov	 al, BYTE PTR [edx]
  0011a	3c 30		 cmp	 al, 48			; 00000030H
  0011c	7d e9		 jge	 SHORT $LL11@strtod
$LN10@strtod:

; 88   :     }
; 89   :   }
; 90   : 
; 91   :   if (esign < 0)

  0011e	85 ff		 test	 edi, edi
  00120	79 57		 jns	 SHORT $LN9@strtod

; 92   :     for (i = 1; i <= e; i++)

  00122	be 01 00 00 00	 mov	 esi, 1
  00127	83 f9 08	 cmp	 ecx, 8
  0012a	7c 37		 jl	 SHORT $LC71@strtod
  0012c	8b c1		 mov	 eax, ecx
  0012e	c1 e8 03	 shr	 eax, 3
  00131	8d 34 c5 01 00
	00 00		 lea	 esi, DWORD PTR [eax*8+1]
  00138	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL131@strtod:

; 93   :       r *= 0.1L;

  00140	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00144	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00148	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0014c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00150	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00154	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00158	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0015c	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00160	48		 dec	 eax
  00161	75 dd		 jne	 SHORT $LL131@strtod
$LC71@strtod:

; 92   :     for (i = 1; i <= e; i++)

  00163	3b f1		 cmp	 esi, ecx
  00165	7f 60		 jg	 SHORT $LN73@strtod
  00167	2b ce		 sub	 ecx, esi
  00169	41		 inc	 ecx
  0016a	8d 9b 00 00 00
	00		 npad	 6
$LC132@strtod:

; 93   :       r *= 0.1L;

  00170	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00174	49		 dec	 ecx
  00175	75 f9		 jne	 SHORT $LC132@strtod

; 94   :   else

  00177	eb 4e		 jmp	 SHORT $LN73@strtod
$LN9@strtod:

; 95   :     for (i = 1; i <= e; i++)

  00179	be 01 00 00 00	 mov	 esi, 1
  0017e	83 f9 08	 cmp	 ecx, 8
  00181	7c 30		 jl	 SHORT $LC74@strtod
  00183	8b c1		 mov	 eax, ecx
  00185	c1 e8 03	 shr	 eax, 3
  00188	8d 34 c5 01 00
	00 00		 lea	 esi, DWORD PTR [eax*8+1]
  0018f	90		 npad	 1
$LL133@strtod:

; 96   :       r *= 10.0;

  00190	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  00194	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  00198	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  0019c	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  001a0	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  001a4	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  001a8	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  001ac	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  001b0	48		 dec	 eax
  001b1	75 dd		 jne	 SHORT $LL133@strtod
$LC74@strtod:

; 95   :     for (i = 1; i <= e; i++)

  001b3	3b f1		 cmp	 esi, ecx
  001b5	7f 10		 jg	 SHORT $LN73@strtod
  001b7	2b ce		 sub	 ecx, esi
  001b9	41		 inc	 ecx
  001ba	8d 9b 00 00 00
	00		 npad	 6
$LC134@strtod:

; 96   :       r *= 10.0;

  001c0	f2 0f 59 cb	 mulsd	 xmm1, xmm3
  001c4	49		 dec	 ecx
  001c5	75 f9		 jne	 SHORT $LC134@strtod
$LN73@strtod:

; 97   : 
; 98   :   if (sret)

  001c7	8b 45 0c	 mov	 eax, DWORD PTR _sret$[ebp]
  001ca	85 c0		 test	 eax, eax
  001cc	74 02		 je	 SHORT $LN1@strtod

; 99   :     *sret = (char *)s;

  001ce	89 10		 mov	 DWORD PTR [eax], edx
$LN1@strtod:
  001d0	66 0f 6e c3	 movd	 xmm0, ebx

; 100  :   return (double)(r * sign);

  001d4	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx
  001db	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001df	f2 0f 11 45 f8	 movsd	 QWORD PTR tv433[ebp], xmm0
  001e4	dd 45 f8	 fld	 QWORD PTR tv433[ebp]

; 101  : }

  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c3		 ret	 0
$LN13@strtod:

; 76   :     {
; 77   : 		if (sret)

  001eb	8b 45 0c	 mov	 eax, DWORD PTR _sret$[ebp]
  001ee	85 c0		 test	 eax, eax
  001f0	74 02		 je	 SHORT $LN12@strtod

; 78   : 			*sret = (char *)s;

  001f2	89 10		 mov	 DWORD PTR [eax], edx
$LN12@strtod:

; 79   : 
; 80   : 		return (double)r;

  001f4	dd 45 f8	 fld	 QWORD PTR _r$[ebp]
  001f7	5f		 pop	 edi
  001f8	5e		 pop	 esi
  001f9	5b		 pop	 ebx

; 101  : }

  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c3		 ret	 0
_strtod	ENDP
_TEXT	ENDS
END
