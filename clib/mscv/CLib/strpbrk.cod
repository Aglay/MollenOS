; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\strpbrk.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_strpbrk
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\strpbrk.c
;	COMDAT _strpbrk
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_strpbrk PROC						; COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 36   : 	const char *c = s2;
; 37   : 	if (!*s1)

  00004	8b 75 08	 mov	 esi, DWORD PTR _s1$[ebp]
  00007	8a 16		 mov	 dl, BYTE PTR [esi]
  00009	84 d2		 test	 dl, dl
  0000b	75 05		 jne	 SHORT $LN24@strpbrk

; 38   : 		return (char *) NULL;

  0000d	33 c0		 xor	 eax, eax
  0000f	5e		 pop	 esi

; 58   : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN24@strpbrk:
  00012	53		 push	 ebx
  00013	57		 push	 edi
  00014	8b 7d 0c	 mov	 edi, DWORD PTR _s2$[ebp]
  00017	8a 1f		 mov	 bl, BYTE PTR [edi]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL8@strpbrk:

; 41   : 	{
; 42   : 		for (c = s2; *c; c++)

  00020	8b c7		 mov	 eax, edi
  00022	84 db		 test	 bl, bl
  00024	74 10		 je	 SHORT $LN14@strpbrk
  00026	8a cb		 mov	 cl, bl
$LL6@strpbrk:

; 43   : 		{
; 44   : 			if (*s1 == *c)

  00028	3a d1		 cmp	 dl, cl
  0002a	74 0a		 je	 SHORT $LN14@strpbrk

; 41   : 	{
; 42   : 		for (c = s2; *c; c++)

  0002c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002f	40		 inc	 eax
  00030	84 c9		 test	 cl, cl
  00032	75 f4		 jne	 SHORT $LL6@strpbrk

; 45   : 			break;
; 46   : 		}
; 47   : 
; 48   : 		if (*c)

  00034	eb 05		 jmp	 SHORT $LN23@strpbrk
$LN14@strpbrk:
  00036	80 38 00	 cmp	 BYTE PTR [eax], 0
  00039	75 11		 jne	 SHORT $LN1@strpbrk
$LN23@strpbrk:

; 39   : 
; 40   : 	while (*s1)

  0003b	8a 56 01	 mov	 dl, BYTE PTR [esi+1]

; 49   : 			break;
; 50   : 
; 51   : 		s1++;

  0003e	46		 inc	 esi
  0003f	84 d2		 test	 dl, dl
  00041	75 dd		 jne	 SHORT $LL8@strpbrk

; 52   : 	}
; 53   : 
; 54   : 	if (*c == '\0')

  00043	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	23 f0		 and	 esi, eax
$LN1@strpbrk:

; 55   : 		s1 = NULL;
; 56   : 
; 57   : 	return (char *) s1;

  0004c	5f		 pop	 edi
  0004d	5b		 pop	 ebx
  0004e	8b c6		 mov	 eax, esi
  00050	5e		 pop	 esi

; 58   : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_strpbrk ENDP
_TEXT	ENDS
END
