; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\math\cos.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_cos_off_tbl DQ	00000000000000000r		; 0
	DQ	0bff921fb54442d18r		; -1.5708
	DQ	00000000000000000r		; 0
	DQ	0bff921fb54442d18r		; -1.5708
_cos_sign_tbl DQ 03ff0000000000000r		; 1
	DQ	0bff0000000000000r		; -1
	DQ	0bff0000000000000r		; -1
	DQ	03ff0000000000000r		; 1
_DATA	ENDS
PUBLIC	_cosh
PUBLIC	_cos
PUBLIC	__real@3ca6827863b97d97
PUBLIC	__real@3d2ae7f3e733b81f
PUBLIC	__real@3da93974a8c07c9d
PUBLIC	__real@3e21eed8eff8d898
PUBLIC	__real@3e927e4fb7789f5c
PUBLIC	__real@3efa01a01a01a01a
PUBLIC	__real@3f56c16c16c16c17
PUBLIC	__real@3fa5555555555555
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe45f306dc9c883
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__libm_sse2_exp_precise:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe45f306dc9c883
CONST	SEGMENT
__real@3fe45f306dc9c883 DQ 03fe45f306dc9c883r	; 0.63662
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fa5555555555555
CONST	SEGMENT
__real@3fa5555555555555 DQ 03fa5555555555555r	; 0.0416667
CONST	ENDS
;	COMDAT __real@3f56c16c16c16c17
CONST	SEGMENT
__real@3f56c16c16c16c17 DQ 03f56c16c16c16c17r	; 0.00138889
CONST	ENDS
;	COMDAT __real@3efa01a01a01a01a
CONST	SEGMENT
__real@3efa01a01a01a01a DQ 03efa01a01a01a01ar	; 2.48016e-005
CONST	ENDS
;	COMDAT __real@3e927e4fb7789f5c
CONST	SEGMENT
__real@3e927e4fb7789f5c DQ 03e927e4fb7789f5cr	; 2.75573e-007
CONST	ENDS
;	COMDAT __real@3e21eed8eff8d898
CONST	SEGMENT
__real@3e21eed8eff8d898 DQ 03e21eed8eff8d898r	; 2.08768e-009
CONST	ENDS
;	COMDAT __real@3da93974a8c07c9d
CONST	SEGMENT
__real@3da93974a8c07c9d DQ 03da93974a8c07c9dr	; 1.14707e-011
CONST	ENDS
;	COMDAT __real@3d2ae7f3e733b81f
CONST	SEGMENT
__real@3d2ae7f3e733b81f DQ 03d2ae7f3e733b81fr	; 4.77948e-014
CONST	ENDS
;	COMDAT __real@3ca6827863b97d97
CONST	SEGMENT
__real@3ca6827863b97d97 DQ 03ca6827863b97d97r	; 1.56192e-016
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\cos.c
;	COMDAT _cos
_TEXT	SEGMENT
tv241 = 8						; size = 8
_x$ = 8							; size = 8
_cos	PROC						; COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 22   :     int quadrant;
; 23   :     double x2, result;
; 24   : 
; 25   :     /* Calculate the quadrant */
; 26   :     quadrant = (int)(x * (2./M_PI));

  00003	f2 0f 10 4d 08	 movsd	 xmm1, QWORD PTR _x$[ebp]
  00008	66 0f 28 c1	 movapd	 xmm0, xmm1
  0000c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe45f306dc9c883
  00014	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00018	66 0f 6e c0	 movd	 xmm0, eax

; 27   : 
; 28   :     /* Get offset inside quadrant */
; 29   :     x = x - quadrant * (M_PI/2.);
; 30   : 
; 31   :     /* Normalize quadrant to [0..3] */
; 32   :     quadrant = quadrant & 0x3;

  0001c	83 e0 03	 and	 eax, 3
  0001f	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0

; 33   : 
; 34   :     /* Fixup value for the generic function */
; 35   :     x += cos_off_tbl[quadrant];

  00023	f2 0f 10 14 c5
	00 00 00 00	 movsd	 xmm2, QWORD PTR _cos_off_tbl[eax*8]
  0002c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff921fb54442d18
  00034	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00038	f2 0f 58 d1	 addsd	 xmm2, xmm1

; 36   : 
; 37   :     /* Calculate the negative of the square of x */
; 38   :     x2 = - (x * x);

  0003c	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00040	66 0f 57 15 00
	00 00 00	 xorpd	 xmm2, QWORD PTR __xmm@80000000000000008000000000000000

; 39   : 
; 40   :     /* This is an unrolled taylor series using <PRECISION> iterations
; 41   :      * Example with 4 iterations:
; 42   :      * result = 1 - x^2/2! + x^4/4! - x^6/6! + x^8/8!
; 43   :      * To save multiplications and to keep the precision high, it's performed
; 44   :      * like this:
; 45   :      * result = 1 - x^2 * (1/2! - x^2 * (1/4! - x^2 * (1/6! - x^2 * (1/8!))))
; 46   :      */
; 47   : 
; 48   :     /* Start with 0, compiler will optimize this away */
; 49   :     result = 0;
; 50   : 
; 51   : #if (PRECISION >= 10)
; 52   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20);
; 53   :     result *= x2;
; 54   : #endif
; 55   : #if (PRECISION >= 9)
; 56   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18);
; 57   :     result *= x2;

  00048	66 0f 28 c2	 movapd	 xmm0, xmm2
  0004c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ca6827863b97d97

; 58   : #endif
; 59   : #if (PRECISION >= 8)
; 60   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16);

  00054	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3d2ae7f3e733b81f

; 61   :     result *= x2;

  0005c	f2 0f 59 c2	 mulsd	 xmm0, xmm2

; 62   : #endif
; 63   : #if (PRECISION >= 7)
; 64   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12*13*14);

  00060	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3da93974a8c07c9d

; 65   :     result *= x2;

  00068	f2 0f 59 c2	 mulsd	 xmm0, xmm2

; 66   : #endif
; 67   : #if (PRECISION >= 6)
; 68   :     result += 1./(1.*2*3*4*5*6*7*8*9*10*11*12);

  0006c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3e21eed8eff8d898

; 69   :     result *= x2;

  00074	f2 0f 59 c2	 mulsd	 xmm0, xmm2

; 70   : #endif
; 71   : #if (PRECISION >= 5)
; 72   :     result += 1./(1.*2*3*4*5*6*7*8*9*10);

  00078	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3e927e4fb7789f5c

; 73   :     result *= x2;

  00080	f2 0f 59 c2	 mulsd	 xmm0, xmm2

; 74   : #endif
; 75   :     result += 1./(1.*2*3*4*5*6*7*8);

  00084	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3efa01a01a01a01a

; 76   :     result *= x2;

  0008c	f2 0f 59 c2	 mulsd	 xmm0, xmm2

; 77   : 
; 78   :     result += 1./(1.*2*3*4*5*6);

  00090	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f56c16c16c16c17

; 79   :     result *= x2;

  00098	f2 0f 59 c2	 mulsd	 xmm0, xmm2

; 80   : 
; 81   :     result += 1./(1.*2*3*4);

  0009c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa5555555555555

; 82   :     result *= x2;

  000a4	f2 0f 59 c2	 mulsd	 xmm0, xmm2

; 83   : 
; 84   :     result += 1./(1.*2);

  000a8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000

; 85   :     result *= x2;

  000b0	f2 0f 59 c2	 mulsd	 xmm0, xmm2

; 86   : 
; 87   :     result += 1;

  000b4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 88   : 
; 89   :     /* Apply correct sign */
; 90   :     result *= cos_sign_tbl[quadrant];

  000bc	f2 0f 59 04 c5
	00 00 00 00	 mulsd	 xmm0, QWORD PTR _cos_sign_tbl[eax*8]

; 91   : 
; 92   :     return result;

  000c5	f2 0f 11 45 08	 movsd	 QWORD PTR tv241[ebp], xmm0
  000ca	dd 45 08	 fld	 QWORD PTR tv241[ebp]

; 93   : }

  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_cos	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\math\cos.c
;	COMDAT _cosh
_TEXT	SEGMENT
tv129 = -8						; size = 8
_x$ = 8							; size = 8
_cosh	PROC						; COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 101  :     const double ebig = exp(fabs(x));

  00006	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _x$[ebp]
  0000b	66 0f 54 05 00
	00 00 00	 andpd	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00013	e8 00 00 00 00	 call	 __libm_sse2_exp_precise

; 102  :     return (ebig + 1.0/ebig) / 2.0;

  00018	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00020	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00024	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00028	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00030	f2 0f 11 4d f8	 movsd	 QWORD PTR tv129[ebp], xmm1
  00035	dd 45 f8	 fld	 QWORD PTR tv129[ebp]

; 103  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
_cosh	ENDP
_TEXT	ENDS
END
