; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	C:\Users\Philip\Documents\GitHub\MollenOS\clib\src\string\memcmp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_memcmp
; Function compile flags: /Ogtp
; File c:\users\philip\documents\github\mollenos\clib\src\string\memcmp.c
;	COMDAT _memcmp
_TEXT	SEGMENT
_ptr1$ = 8						; size = 4
_ptr2$ = 12						; size = 4
_num$ = 16						; size = 4
_memcmp	PROC						; COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   : 	unsigned char *s1 = (unsigned char *) ptr1;

  00003	8b 55 08	 mov	 edx, DWORD PTR _ptr1$[ebp]

; 22   : 	unsigned char *s2 = (unsigned char *) ptr2;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _ptr2$[ebp]
  00009	56		 push	 esi

; 23   : 	unsigned long *a1;
; 24   : 	unsigned long *a2;
; 25   : 
; 26   : 	/* If the size is too small, or either pointer is unaligned,
; 27   : 		then we punt to the byte compare loop.  Hopefully this will
; 28   : 		not turn up in inner loops.  */
; 29   : 	if (!TOO_SMALL(num) && !MEMCMP_UNALIGNED(s1, s2))

  0000a	8b 75 10	 mov	 esi, DWORD PTR _num$[ebp]
  0000d	83 fe 04	 cmp	 esi, 4
  00010	72 22		 jb	 SHORT $LN12@memcmp
  00012	8b ca		 mov	 ecx, edx
  00014	0b c8		 or	 ecx, eax
  00016	f6 c1 03	 test	 cl, 3
  00019	75 19		 jne	 SHORT $LN12@memcmp
  0001b	eb 03 8d 49 00	 npad	 5
$LL6@memcmp:

; 30   : 	{
; 31   : 		/* Otherwise, load and compare the blocks of memory one 
; 32   : 			word at a time.  */
; 33   : 		a1 = (unsigned long*) s1;
; 34   : 		a2 = (unsigned long*) s2;
; 35   : 		while (num >= LBLOCKSIZE)
; 36   : 		{
; 37   : 			if (*a1 != *a2) 

  00020	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00022	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00024	75 0e		 jne	 SHORT $LN12@memcmp

; 38   :    				break;
; 39   : 
; 40   : 			a1++;
; 41   : 			a2++;
; 42   : 			num -= LBLOCKSIZE;

  00026	83 ee 04	 sub	 esi, 4
  00029	83 c2 04	 add	 edx, 4
  0002c	83 c0 04	 add	 eax, 4
  0002f	83 fe 04	 cmp	 esi, 4
  00032	73 ec		 jae	 SHORT $LL6@memcmp
$LN12@memcmp:

; 43   : 		}
; 44   : 
; 45   : 		/* check m mod LBLOCKSIZE remaining characters */
; 46   : 
; 47   : 		s1 = (unsigned char*)a1;
; 48   : 		s2 = (unsigned char*)a2;
; 49   : 	}
; 50   : 
; 51   : 	while (num--)

  00034	85 f6		 test	 esi, esi
  00036	74 0d		 je	 SHORT $LN15@memcmp
$LL3@memcmp:

; 52   : 	{
; 53   : 		if (*s1 != *s2)

  00038	8a 0a		 mov	 cl, BYTE PTR [edx]
  0003a	4e		 dec	 esi
  0003b	3a 08		 cmp	 cl, BYTE PTR [eax]
  0003d	75 0b		 jne	 SHORT $LN13@memcmp

; 55   : 
; 56   : 		s1++;

  0003f	42		 inc	 edx

; 57   : 		s2++;

  00040	40		 inc	 eax
  00041	85 f6		 test	 esi, esi
  00043	75 f3		 jne	 SHORT $LL3@memcmp
$LN15@memcmp:

; 58   : 	}
; 59   : 
; 60   : 	return 0;

  00045	33 c0		 xor	 eax, eax
  00047	5e		 pop	 esi

; 61   : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN13@memcmp:

; 54   : 			return *s1 - *s2;

  0004a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0004d	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00050	2b c1		 sub	 eax, ecx
  00052	5e		 pop	 esi

; 61   : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_memcmp	ENDP
_TEXT	ENDS
END
