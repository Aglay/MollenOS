# Build and package pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: architecture
  type: string
  default: 'amd64'
- name: sonarqube
  type: boolean
  default: false

variables:
  sonarOrganization: meulengracht
  sonarLogin: 2424514c0705a1297041e9f047de3a715ca796be
  sonarProject: Meulengracht_MollenOS
  sonarExclusions: resources/**,tools/**,librt/libm/**,librt/libacpi/**,librt/libclang/**,librt/libcxx/**

stages:
- stage: 'build_kernel'
  displayName: 'Build kernel and drivers - ${{ parameters.architecture }}'
  pool: vali-builders
  jobs:
    - job: compile
      timeoutInMinutes: 10
      steps:
        - bash: make build
          env:
            VALI_ARCH: ${{ parameters.architecture }}
          condition: eq('${{ parameters.sonarqube }}', false)
        - bash: build-wrapper-linux-x86-64 --out-dir .sonar-out make clean build
          env:
            VALI_ARCH: ${{ parameters.architecture }}
          condition: eq('${{ parameters.sonarqube }}', true)
        - bash: >
            $SONAR_BIN_PATH/sonar-scanner
            -Dsonar.cfamily.build-wrapper-output=$(Build.SourcesDirectory)/.sonar-out
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=$(sonarLogin)
            -Dsonar.organization=$(sonarOrganization)
            -Dsonar.projectBaseDir=$(Build.SourcesDirectory)
            -Dsonar.projectKey=$(sonarProject)
            -Dsonar.scanner.app=ScannerCli
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.sources=$(Build.SourcesDirectory)
            -Dsonar.exclusions=$(sonarExclusions)
            -Dsonar.working.directory=$(Build.SourcesDirectory)/.scannerwork
          condition: and(succeeded(), eq('${{ parameters.sonarqube }}', true))
        - bash: make package_os
          env:
            VALI_ARCH: ${{ parameters.architecture }}
        - bash: make package_sdk
          env:
            VALI_ARCH: ${{ parameters.architecture }}
        - bash: make package_ddk
          env:
            VALI_ARCH: ${{ parameters.architecture }}
        - task: PublishPipelineArtifact@1
          displayName: 'Publish kernel'
          inputs:
            targetPath: 'vali-$(VALI_VERSION)-${{ parameters.architecture }}.zip'
            artifactName: 'os-drop'
        - task: PublishPipelineArtifact@1
          displayName: 'Publish sdk'
          inputs:
            targetPath: 'vali-sdk-$(VALI_VERSION)-${{ parameters.architecture }}.zip'
            artifactName: 'sdk-drop'
        - task: PublishPipelineArtifact@1
          displayName: 'Publish sdk'
          inputs:
            targetPath: 'vali-sdk-$(VALI_VERSION)-${{ parameters.architecture }}.zip'
            artifactName: 'ddk-drop'

- stage: 'build_applications'
  displayName: 'Build required applications - ${{ parameters.architecture }}'
  dependsOn: build_kernel
  condition: succeeded()
  pool: vali-builders
  jobs:
    - deployment: compile
      displayName: 'Checkout and build applications'
      environment: kernel-dev
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadPipelineArtifact@2
                displayName: Download sdk
                inputs:
                  artifact: 'sdk-drop'
                  path: $(Build.SourcesDirectory)
              - task: DownloadPipelineArtifact@2
                displayName: Download ddk
                inputs:
                  artifact: 'ddk-drop'
                  path: $(Build.SourcesDirectory)
              - checkout: https://github.com/Meulengracht/vali-userspace.git
                clean: true
                submodules: recursive
              - bash: make
                env:
                  VALI_ARCH: ${{ parameters.architecture }}
- stage: 'create_release'
  displayName: 'Publish release - ${{ parameters.architecture }}'
  dependsOn: build_applications
  condition: succeeded()
  pool: vali-builders
  jobs:
    - job: publish
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: Download kernel
          inputs:
            artifact: 'os-drop'
            path: $(Build.SourcesDirectory)
        - task: DownloadPipelineArtifact@2
          displayName: Download applications
          inputs:
            artifact: 'app-drop'
            path: $(Build.SourcesDirectory)