# Build and package pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: architecture
  type: string
  default: 'amd64'
- name: sonarqube
  type: boolean
  default: false

variables:
  sonarOrganization: meulengracht
  sonarLogin: 2424514c0705a1297041e9f047de3a715ca796be
  sonarProject: Meulengracht_MollenOS
  sonarExclusions: resources/**,tools/**,librt/libm/**,librt/libacpi/**,librt/libclang/**,librt/libcxx/**

stages:
- stage: build
  displayName: Build kernel and drivers - ${{ parameters.architecture }}
  pool: vali-builders
  jobs:
    - job: compile
      timeoutInMinutes: 10
      steps:
        - bash: make build
          env:
            VALI_ARCH: ${{ parameters.architecture }}
          condition: eq('${{ parameters.sonarqube }}', false)
        - bash: build-wrapper-linux-x86-64 --out-dir .sonar-out make clean build
          env:
            VALI_ARCH: ${{ parameters.architecture }}
          condition: eq('${{ parameters.sonarqube }}', true)
        - bash: >
            $SONAR_BIN_PATH/sonar-scanner
            -Dsonar.cfamily.build-wrapper-output=$(Build.SourcesDirectory)/.sonar-out
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=$(sonarLogin)
            -Dsonar.organization=$(sonarOrganization)
            -Dsonar.projectBaseDir=$(Build.SourcesDirectory)
            -Dsonar.projectKey=$(sonarProject)
            -Dsonar.scanner.app=ScannerCli
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.sources=$(Build.SourcesDirectory)
            -Dsonar.exclusions=$(sonarExclusions)
            -Dsonar.working.directory=$(Build.SourcesDirectory)/.scannerwork
          condition: and(succeeded(), eq('${{ parameters.sonarqube }}', true))
- stage: create_release
  displayName: Create release package
  dependsOn: build
  pool: vali-builders
  jobs:
    - job: package
      timeoutInMinutes: 10
      steps:
        - bash: make package_os
          env:
            VALI_ARCH: ${{ parameters.architecture }}
        - bash: make package_sdk
          env:
            VALI_ARCH: ${{ parameters.architecture }}
        - bash: make package_ddk
          env:
            VALI_ARCH: ${{ parameters.architecture }}
    - job: publish
      steps:
        - task: PublishBuildArtifacts@1
          displayName: Publish
          inputs:
            PathtoPublish: 'packages/'
            ArtifactName: 'release'
            publishLocation: 'Container'
