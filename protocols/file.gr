/**
 * File-related Services
 * Provides storage, file and path related functionality to the rest of the OS.
 * These services are split for readability, but they are implemented by the same
 * process.
 */
 
import "types"

namespace sys

service storage (2) {
    func register(UUId_t driverId, UUId_t deviceId, storage_flags flags) : () = 1;
    func unregister(UUId_t deviceId, bool forced) : () = 2;
    
    // These should be in the file service
    func get_descriptor(UUId_t fileHandle) : (OsStatus_t result, disk_descriptor descriptor) = 3;
    func get_descriptor_path(string filePath, int followLinks) : (OsStatus_t result, disk_descriptor descriptor) = 4;
}

enum file_flags {
    FILE = 0,
    DIRECTORY = 0x1,
    LINK = 0x2
}

enum file_permissions {
    READ = 0x1,
    WRITE = 0x2,
    EXECUTE = 0x4
}

struct file_descriptor {
    long             id;
    long             storageId;
    file_flags       flags;
    file_permissions permissions;
    uint64           size;
    timestamp        created;
    timestamp        modified;
    timestamp        accessed;
}

struct filesystem_descriptor {
    long   id;
    uint   flags;
    uint   max_filename_length;
    string serial;
    uint   block_size;
    uint   blocks_per_segment;
    uint64 segments_total;
    uint64 segments_free;
}

service file (3) {
    func open(UUId_t processId, string path, uint options, uint access) : (OsStatus_t result, UUId_t handle) = 1;
    func close(UUId_t processId, UUId_t handle) : (OsStatus_t result) = 2;
    func delete(UUId_t processId, string path, uint flags) : (OsStatus_t result) = 3;
    func transfer(UUId_t processId, UUId_t handle, transfer_direction direction, UUId_t bufferHandle, ulong offset, ulong length) : (OsStatus_t result, ulong bytesTransferred) = 4;
    func transfer_absolute(UUId_t processId, UUId_t handle, transfer_direction direction, uint seekLow, uint seekHigh, UUId_t bufferHandle, ulong offset, ulong length) : (OsStatus_t result, ulong bytesTransferred) = 5;
    func seek(UUId_t processId, UUId_t handle, uint seekLow, uint seekHigh) : (OsStatus_t result) = 6;
    func flush(UUId_t processId, UUId_t handle) : (OsStatus_t result) = 7;
    func move(UUId_t processId, string source, string destination, bool copy) : (OsStatus_t result) = 8;
    func link(UUId_t processId, string source, string destination, bool symbolic) : (OsStatus_t result) = 9;
    func set_options(UUId_t processId, UUId_t handle, uint options, uint access) : (OsStatus_t result) = 10;
    func get_options(UUId_t processId, UUId_t handle) : (OsStatus_t result, uint options, uint access) = 11;
    func get_position(UUId_t processId, UUId_t handle) : (OsStatus_t result, uint low, uint high) = 12;
    func set_size(UUId_t processId, UUId_t handle, uint sizeLow, uint sizeHigh) : (OsStatus_t result) = 13;
    func get_size(UUId_t processId, UUId_t handle) : (OsStatus_t result, uint low, uint high) = 14;
    func get_path(UUId_t processId, UUId_t handle) : (OsStatus_t result, string path) = 15;
    func fstat(UUId_t processId, UUId_t handle) : (OsStatus_t result, file_descriptor descriptor) = 16;
    func fstat_link(UUId_t processId, string path) : (OsStatus_t result, string path) = 17;
    func fsstat(UUId_t processId, UUId_t handle) : (OsStatus_t result, filesystem_descriptor descriptor) = 19;
    func fstat_path(UUId_t processId, string path, int followLinks) : (OsStatus_t result, file_descriptor descriptor) = 20;
    func fsstat_path(UUId_t processId, string path, int followLinks) : (OsStatus_t result, filesystem_descriptor descriptor) = 21;
    
    // Service should also provide an async interface that communicates with events
    // transfer_async, and transfer_status
}

enum system_paths {
    PATH_SYSTEM,
    PATH_SYSTEM_THEMES,
    PATH_DATA,
    PATH_DATA_BIN,
    PATH_DATA_INC,
    PATH_DATA_LIB,
    PATH_DATA_SHARE,
    PATH_USER,
    PATH_USER_CACHE,
    PATH_APP,
    PATH_APP_TEMP,
    PATH_COUNT
}

service path (4) {
    func resolve(system_paths path) : (OsStatus_t result, string resolved) = 1;
    func realpath(string path, int followLinks) : (OsStatus_t result, string resolved) = 2;
}
